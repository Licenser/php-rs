/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const ZEND_VERSION: &'static [u8; 6usize] = b"3.2.0\0";
pub const COMPILE_DL_OPCACHE: u32 = 1;
pub const DARWIN: u32 = 1;
pub const DEFAULT_SHORT_OPEN_TAG: &'static [u8; 2usize] = b"1\0";
pub const ENABLE_CHROOT_FUNC: u32 = 1;
pub const HAVE_ACOSH: u32 = 1;
pub const HAVE_ALIGNOF: u32 = 1;
pub const HAVE_ALLOCA: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_ALPHASORT: u32 = 1;
pub const HAVE_APPLICATIONSERVICES_APPLICATIONSERVICES_H: u32 = 1;
pub const HAVE_ARPA_INET_H: u32 = 1;
pub const HAVE_ARPA_NAMESER_H: u32 = 1;
pub const HAVE_ASCTIME_R: u32 = 1;
pub const HAVE_ASINH: u32 = 1;
pub const HAVE_ASPRINTF: u32 = 1;
pub const HAVE_ASSERT_H: u32 = 1;
pub const HAVE_ATANH: u32 = 1;
pub const HAVE_ATOLL: u32 = 1;
pub const HAVE_ATTRIBUTE_ALIGNED: u32 = 1;
pub const HAVE_BUILD_DEFS_H: u32 = 1;
pub const HAVE_BUNDLED_PCRE: u32 = 1;
pub const HAVE_CHROOT: u32 = 1;
pub const HAVE_CRYPT: u32 = 1;
pub const HAVE_CTERMID: u32 = 1;
pub const HAVE_CTIME_R: u32 = 1;
pub const HAVE_CTYPE: u32 = 1;
pub const HAVE_DECLARED_TIMEZONE: u32 = 1;
pub const HAVE_DECL_ARC4RANDOM_BUF: u32 = 1;
pub const HAVE_DECL_ISFINITE: u32 = 1;
pub const HAVE_DECL_ISINF: u32 = 1;
pub const HAVE_DECL_ISNAN: u32 = 1;
pub const HAVE_DEV_URANDOM: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_DNS_H: u32 = 1;
pub const HAVE_DNS_SEARCH: u32 = 1;
pub const HAVE_DN_EXPAND: u32 = 1;
pub const HAVE_DN_SKIPNAME: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_FINITE: u32 = 1;
pub const HAVE_FLOCK: u32 = 1;
pub const HAVE_FLUSHIO: u32 = 1;
pub const HAVE_FNMATCH: u32 = 1;
pub const HAVE_FORK: u32 = 1;
pub const HAVE_FPU_INLINE_ASM_X86: u32 = 1;
pub const HAVE_FTOK: u32 = 1;
pub const HAVE_FUNOPEN: u32 = 1;
pub const HAVE_GAI_STRERROR: u32 = 1;
pub const HAVE_GCVT: u32 = 1;
pub const HAVE_GETADDRINFO: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_GETGRGID_R: u32 = 1;
pub const HAVE_GETGRNAM_R: u32 = 1;
pub const HAVE_GETGROUPS: u32 = 1;
pub const HAVE_GETHOSTBYADDR: u32 = 1;
pub const HAVE_GETHOSTNAME: u32 = 1;
pub const HAVE_GETLOADAVG: u32 = 1;
pub const HAVE_GETLOGIN: u32 = 1;
pub const HAVE_GETOPT: u32 = 1;
pub const HAVE_GETPGID: u32 = 1;
pub const HAVE_GETPID: u32 = 1;
pub const HAVE_GETPROTOBYNAME: u32 = 1;
pub const HAVE_GETPROTOBYNUMBER: u32 = 1;
pub const HAVE_GETPWNAM_R: u32 = 1;
pub const HAVE_GETPWUID_R: u32 = 1;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_GETRUSAGE: u32 = 1;
pub const HAVE_GETSERVBYNAME: u32 = 1;
pub const HAVE_GETSERVBYPORT: u32 = 1;
pub const HAVE_GETSID: u32 = 1;
pub const HAVE_GETTIMEOFDAY: u32 = 1;
pub const HAVE_GETWD: u32 = 1;
pub const HAVE_GLOB: u32 = 1;
pub const HAVE_GMTIME_R: u32 = 1;
pub const HAVE_GRANTPT: u32 = 1;
pub const HAVE_GRP_H: u32 = 1;
pub const HAVE_HASH_EXT: u32 = 1;
pub const HAVE_HTONL: u32 = 1;
pub const HAVE_HUGE_CODE_PAGES: u32 = 1;
pub const HAVE_HUGE_VAL_INF: u32 = 1;
pub const HAVE_HYPOT: u32 = 1;
pub const HAVE_INET_ATON: u32 = 1;
pub const HAVE_INET_NTOA: u32 = 1;
pub const HAVE_INET_NTOP: u32 = 1;
pub const HAVE_INET_PTON: u32 = 1;
pub const HAVE_INITGROUPS: u32 = 1;
pub const HAVE_INT16_T: u32 = 1;
pub const HAVE_INT32_T: u32 = 1;
pub const HAVE_INT64_T: u32 = 1;
pub const HAVE_INT8_T: u32 = 1;
pub const HAVE_INTMAX_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_IPV6: u32 = 1;
pub const HAVE_ISASCII: u32 = 1;
pub const HAVE_JSON: u32 = 1;
pub const HAVE_KILL: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LCHOWN: u32 = 1;
pub const HAVE_LIBDL: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_LIBRESOLV: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_LINK: u32 = 1;
pub const HAVE_LOCALECONV: u32 = 1;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_LOCKF: u32 = 1;
pub const HAVE_LOG1P: u32 = 1;
pub const HAVE_LRAND48: u32 = 1;
pub const HAVE_MBLEN: u32 = 1;
pub const HAVE_MBRLEN: u32 = 1;
pub const HAVE_MBSINIT: u32 = 1;
pub const HAVE_MBSTATE_T: u32 = 1;
pub const HAVE_MEMCPY: u32 = 1;
pub const HAVE_MEMMOVE: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MEM_MMAP_ANON: u32 = 1;
pub const HAVE_MKFIFO: u32 = 1;
pub const HAVE_MKNOD: u32 = 1;
pub const HAVE_MKSTEMP: u32 = 1;
pub const HAVE_MMAP: u32 = 1;
pub const HAVE_MONETARY_H: u32 = 1;
pub const HAVE_MPROTECT: u32 = 1;
pub const HAVE_NANOSLEEP: u32 = 1;
pub const HAVE_NETDB_H: u32 = 1;
pub const HAVE_NETINET_IN_H: u32 = 1;
pub const HAVE_NICE: u32 = 1;
pub const HAVE_NL_LANGINFO: u32 = 1;
pub const HAVE_OPCACHE_FILE_CACHE: u32 = 1;
pub const HAVE_PCRE_JIT_SUPPORT: u32 = 1;
pub const HAVE_PERROR: u32 = 1;
pub const HAVE_PHPDBG: u32 = 1;
pub const HAVE_PHP_SESSION: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_POSIX: u32 = 1;
pub const HAVE_POSIX_READDIR_R: u32 = 1;
pub const HAVE_PREAD: u32 = 1;
pub const HAVE_PTRDIFF_T: u32 = 1;
pub const HAVE_PTSNAME: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_PWRITE: u32 = 1;
pub const HAVE_RANDOM: u32 = 1;
pub const HAVE_RAND_R: u32 = 1;
pub const HAVE_REALPATH: u32 = 1;
pub const HAVE_REFLECTION: u32 = 1;
pub const HAVE_RESOLV_H: u32 = 1;
pub const HAVE_RES_SEARCH: u32 = 1;
pub const HAVE_SCANDIR: u32 = 1;
pub const HAVE_SETEGID: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_SETEUID: u32 = 1;
pub const HAVE_SETITIMER: u32 = 1;
pub const HAVE_SETLOCALE: u32 = 1;
pub const HAVE_SETPGID: u32 = 1;
pub const HAVE_SETRLIMIT: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SETSOCKOPT: u32 = 1;
pub const HAVE_SETVBUF: u32 = 1;
pub const HAVE_SHM_IPC: u32 = 1;
pub const HAVE_SHM_MMAP_ANON: u32 = 1;
pub const HAVE_SHM_MMAP_FILE: u32 = 1;
pub const HAVE_SHM_MMAP_POSIX: u32 = 1;
pub const HAVE_SHUTDOWN: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SIGNAL_H: u32 = 1;
pub const HAVE_SIGPROCMASK: u32 = 1;
pub const HAVE_SIGSETJMP: u32 = 1;
pub const HAVE_SIN: u32 = 1;
pub const HAVE_SNPRINTF: u32 = 1;
pub const HAVE_SOCKADDR_SA_LEN: u32 = 1;
pub const HAVE_SOCKADDR_STORAGE: u32 = 1;
pub const HAVE_SOCKADDR_UN_SUN_LEN: u32 = 1;
pub const HAVE_SOCKET: u32 = 1;
pub const HAVE_SOCKETPAIR: u32 = 1;
pub const HAVE_SOCKLEN_T: u32 = 1;
pub const HAVE_SPL: u32 = 1;
pub const HAVE_SQLITE3: u32 = 1;
pub const HAVE_SQLITE3_CLOSE_V2: u32 = 1;
pub const HAVE_SQLITE3_ERRSTR: u32 = 1;
pub const HAVE_SRAND48: u32 = 1;
pub const HAVE_SRANDOM: u32 = 1;
pub const HAVE_SSIZE_T: u32 = 1;
pub const HAVE_STATFS: u32 = 1;
pub const HAVE_STATVFS: u32 = 1;
pub const HAVE_STDARG_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRCOLL: u32 = 1;
pub const HAVE_STRDUP: u32 = 1;
pub const HAVE_STRERROR: u32 = 1;
pub const HAVE_STRFMON: u32 = 1;
pub const HAVE_STRFTIME: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRLCAT: u32 = 1;
pub const HAVE_STRLCPY: u32 = 1;
pub const HAVE_STRNDUP: u32 = 1;
pub const HAVE_STRNLEN: u32 = 1;
pub const HAVE_STRPTIME: u32 = 1;
pub const HAVE_STRPTIME_DECL_FAILS: u32 = 1;
pub const HAVE_STRSTR: u32 = 1;
pub const HAVE_STRTOD: u32 = 1;
pub const HAVE_STRTOK_R: u32 = 1;
pub const HAVE_STRTOL: u32 = 1;
pub const HAVE_STRTOLL: u32 = 1;
pub const HAVE_STRUCT_FLOCK: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_BLKSIZE: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_BLOCKS: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_RDEV: u32 = 1;
pub const HAVE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const HAVE_ST_BLKSIZE: u32 = 1;
pub const HAVE_ST_BLOCKS: u32 = 1;
pub const HAVE_ST_RDEV: u32 = 1;
pub const HAVE_SYMLINK: u32 = 1;
pub const HAVE_SYNC_FETCH_AND_ADD: u32 = 1;
pub const HAVE_SYSEXITS_H: u32 = 1;
pub const HAVE_SYSLOG_H: u32 = 1;
pub const HAVE_SYS_FILE_H: u32 = 1;
pub const HAVE_SYS_IOCTL_H: u32 = 1;
pub const HAVE_SYS_IPC_H: u32 = 1;
pub const HAVE_SYS_MMAN_H: u32 = 1;
pub const HAVE_SYS_MOUNT_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_POLL_H: u32 = 1;
pub const HAVE_SYS_RESOURCE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_SOCKET_H: u32 = 1;
pub const HAVE_SYS_STATVFS_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UIO_H: u32 = 1;
pub const HAVE_SYS_UTSNAME_H: u32 = 1;
pub const HAVE_SYS_WAIT_H: u32 = 1;
pub const HAVE_TEMPNAM: u32 = 1;
pub const HAVE_TERMIOS_H: u32 = 1;
pub const HAVE_TIMELIB_CONFIG_H: u32 = 1;
pub const HAVE_TIME_H: u32 = 1;
pub const HAVE_TM_GMTOFF: u32 = 1;
pub const HAVE_TM_ZONE: u32 = 1;
pub const HAVE_TTYNAME_R: u32 = 1;
pub const HAVE_TZSET: u32 = 1;
pub const HAVE_UINT16_T: u32 = 1;
pub const HAVE_UINT32_T: u32 = 1;
pub const HAVE_UINT64_T: u32 = 1;
pub const HAVE_UINT8_T: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UNLOCKPT: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_USLEEP: u32 = 1;
pub const HAVE_UTIME: u32 = 1;
pub const HAVE_UTIMES: u32 = 1;
pub const HAVE_UTIME_H: u32 = 1;
pub const HAVE_UTIME_NULL: u32 = 1;
pub const HAVE_U_INT16_T: u32 = 1;
pub const HAVE_U_INT32_T: u32 = 1;
pub const HAVE_U_INT64_T: u32 = 1;
pub const HAVE_U_INT8_T: u32 = 1;
pub const HAVE_VALGRIND: u32 = 1;
pub const HAVE_VASPRINTF: u32 = 1;
pub const HAVE_VPRINTF: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_YP_GET_DEFAULT_DOMAIN: u32 = 1;
pub const MISSING_FCLOSE_DECL: u32 = 0;
pub const ODBCVER: u32 = 848;
pub const PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_NAME: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_STRING: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_TARNAME: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_VERSION: &'static [u8; 1usize] = b"\0";
pub const PHAR_HASH_OK: u32 = 1;
pub const PHPDBG_DEBUG: u32 = 0;
pub const PHP_BUILD_DATE: &'static [u8; 11usize] = b"2018-11-14\0";
pub const PHP_CAN_SUPPORT_PROC_OPEN: u32 = 1;
pub const PHP_HAVE_BUILTIN_CLZ: u32 = 1;
pub const PHP_HAVE_BUILTIN_CTZL: u32 = 1;
pub const PHP_HAVE_BUILTIN_CTZLL: u32 = 1;
pub const PHP_HAVE_BUILTIN_EXPECT: u32 = 1;
pub const PHP_HAVE_BUILTIN_SADDLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SADDL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SMULLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SMULL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SSUBLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SSUBL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_STDINT_TYPES: u32 = 1;
pub const PHP_OS: &'static [u8; 7usize] = b"Darwin\0";
pub const PHP_SIGCHILD: u32 = 0;
pub const PHP_UNAME : & 'static [ u8 ; 127usize ] = b"Darwin alt00617 17.7.0 Darwin Kernel Version 17.7.0: Wed Oct 10 23:06:14 PDT 2018; root:xnu-4570.71.13~1/RELEASE_X86_64 x86_64\0" ;
pub const PHP_USE_PHP_CRYPT_R: u32 = 1;
pub const PHP_WRITE_STDOUT: u32 = 1;
pub const PTHREADS: u32 = 1;
pub const SIZEOF_INT: u32 = 4;
pub const SIZEOF_INTMAX_T: u32 = 8;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_LONG_INT: u32 = 8;
pub const SIZEOF_LONG_LONG: u32 = 8;
pub const SIZEOF_LONG_LONG_INT: u32 = 8;
pub const SIZEOF_PTRDIFF_T: u32 = 8;
pub const SIZEOF_SHORT: u32 = 2;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const SIZEOF_SSIZE_T: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const _ALL_SOURCE: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
pub const _TANDEM_SOURCE: u32 = 1;
pub const __EXTENSIONS__: u32 = 1;
pub const ZEND_BROKEN_SPRINTF: u32 = 0;
pub const ZEND_DEBUG: u32 = 1;
pub const ZEND_MM_ALIGNMENT: u32 = 8;
pub const ZEND_MM_ALIGNMENT_LOG2: u32 = 3;
pub const ZEND_SIGNALS: u32 = 1;
pub const ZTS: u32 = 1;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101304;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_VERS_1050: u32 = 0;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 0;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_CURRENT: u32 = 4;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const ZEND_PATHS_SEPARATOR: u8 = 58u8;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const TSRM_ERROR_LEVEL_ERROR: u32 = 1;
pub const TSRM_ERROR_LEVEL_CORE: u32 = 2;
pub const TSRM_ERROR_LEVEL_INFO: u32 = 3;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const __CTERMID_DEFINED: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const ZEND_ENABLE_ZVAL_LONG64: u32 = 1;
pub const ZEND_LONG_MAX: u64 = 9223372036854775807;
pub const ZEND_LONG_MIN: i64 = -9223372036854775808;
pub const ZEND_ULONG_MAX: i32 = -1;
pub const SIZEOF_ZEND_LONG: u32 = 8;
pub const ZEND_LTOA_BUF_LEN: u32 = 65;
pub const ZEND_LONG_FMT: &'static [u8; 5usize] = b"%lld\0";
pub const ZEND_ULONG_FMT: &'static [u8; 5usize] = b"%llu\0";
pub const ZEND_XLONG_FMT: &'static [u8; 5usize] = b"%llx\0";
pub const ZEND_LONG_FMT_SPEC: &'static [u8; 4usize] = b"lld\0";
pub const ZEND_ULONG_FMT_SPEC: &'static [u8; 4usize] = b"llu\0";
pub const MAX_LENGTH_OF_LONG: u32 = 20;
pub const LONG_MIN_DIGITS: &'static [u8; 20usize] = b"9223372036854775808\0";
pub const ZEND_ADDR_FMT: &'static [u8; 9usize] = b"0x%016zx\0";
pub const ZEND_LONG_CAN_OVFL_INT: u32 = 1;
pub const ZEND_LONG_CAN_OVFL_UINT: u32 = 1;
pub const ZEND_SIZE_T_CAN_OVFL_UINT: u32 = 1;
pub const ZEND_EXTENSIONS_SUPPORT: u32 = 1;
pub const ZTS_V: u32 = 1;
pub const MAX_LENGTH_OF_DOUBLE: u32 = 32;
pub const ZEND_MAX_RESERVED_RESOURCES: u32 = 6;
pub const ZEND_SIZE_MAX: i32 = -1;
pub const HT_MIN_SIZE: u32 = 8;
pub const HT_MAX_SIZE: u32 = 2147483648;
pub const IS_UNDEF: u32 = 0;
pub const IS_NULL: u32 = 1;
pub const IS_FALSE: u32 = 2;
pub const IS_TRUE: u32 = 3;
pub const IS_LONG: u32 = 4;
pub const IS_DOUBLE: u32 = 5;
pub const IS_STRING: u32 = 6;
pub const IS_ARRAY: u32 = 7;
pub const IS_OBJECT: u32 = 8;
pub const IS_RESOURCE: u32 = 9;
pub const IS_REFERENCE: u32 = 10;
pub const IS_CONSTANT: u32 = 11;
pub const IS_CONSTANT_AST: u32 = 12;
pub const _IS_BOOL: u32 = 13;
pub const IS_CALLABLE: u32 = 14;
pub const IS_ITERABLE: u32 = 19;
pub const IS_VOID: u32 = 18;
pub const IS_INDIRECT: u32 = 15;
pub const IS_PTR: u32 = 17;
pub const _IS_ERROR: u32 = 20;
pub const Z_TYPE_MASK: u32 = 255;
pub const Z_TYPE_FLAGS_SHIFT: u32 = 8;
pub const Z_CONST_FLAGS_SHIFT: u32 = 16;
pub const GC_FLAGS_SHIFT: u32 = 8;
pub const GC_INFO_SHIFT: u32 = 16;
pub const GC_INFO_MASK: u32 = 4294901760;
pub const GC_COLLECTABLE: u32 = 128;
pub const GC_ARRAY: u32 = 32775;
pub const GC_OBJECT: u32 = 32776;
pub const IS_TYPE_CONSTANT: u32 = 1;
pub const IS_TYPE_REFCOUNTED: u32 = 4;
pub const IS_TYPE_COPYABLE: u32 = 16;
pub const IS_INTERNED_STRING_EX: u32 = 6;
pub const IS_STRING_EX: u32 = 5126;
pub const IS_ARRAY_EX: u32 = 5127;
pub const IS_OBJECT_EX: u32 = 1032;
pub const IS_RESOURCE_EX: u32 = 1033;
pub const IS_REFERENCE_EX: u32 = 1034;
pub const IS_CONSTANT_EX: u32 = 5387;
pub const IS_CONSTANT_AST_EX: u32 = 5388;
pub const IS_CONSTANT_UNQUALIFIED: u32 = 16;
pub const IS_CONSTANT_VISITED_MARK: u32 = 32;
pub const IS_CONSTANT_CLASS: u32 = 128;
pub const IS_CONSTANT_IN_NAMESPACE: u32 = 256;
pub const IS_STR_PERSISTENT: u32 = 1;
pub const IS_STR_INTERNED: u32 = 2;
pub const IS_STR_PERMANENT: u32 = 4;
pub const IS_STR_CONSTANT: u32 = 8;
pub const IS_STR_CONSTANT_UNQUALIFIED: u32 = 16;
pub const IS_ARRAY_IMMUTABLE: u32 = 2;
pub const IS_OBJ_APPLY_COUNT: u32 = 7;
pub const IS_OBJ_DESTRUCTOR_CALLED: u32 = 8;
pub const IS_OBJ_FREE_CALLED: u32 = 16;
pub const IS_OBJ_USE_GUARDS: u32 = 32;
pub const IS_OBJ_HAS_GUARDS: u32 = 64;
pub const E_ERROR: u32 = 1;
pub const E_WARNING: u32 = 2;
pub const E_PARSE: u32 = 4;
pub const E_NOTICE: u32 = 8;
pub const E_CORE_ERROR: u32 = 16;
pub const E_CORE_WARNING: u32 = 32;
pub const E_COMPILE_ERROR: u32 = 64;
pub const E_COMPILE_WARNING: u32 = 128;
pub const E_USER_ERROR: u32 = 256;
pub const E_USER_WARNING: u32 = 512;
pub const E_USER_NOTICE: u32 = 1024;
pub const E_STRICT: u32 = 2048;
pub const E_RECOVERABLE_ERROR: u32 = 4096;
pub const E_DEPRECATED: u32 = 8192;
pub const E_USER_DEPRECATED: u32 = 16384;
pub const E_ALL: u32 = 32767;
pub const E_CORE: u32 = 48;
pub const ZEND_MM_CHUNK_SIZE: u32 = 2097152;
pub const ZEND_MM_PAGE_SIZE: u32 = 4096;
pub const ZEND_MM_PAGES: u32 = 512;
pub const ZEND_MM_FIRST_PAGE: u32 = 1;
pub const ZEND_MM_MIN_SMALL_SIZE: u32 = 8;
pub const ZEND_MM_MAX_SMALL_SIZE: u32 = 3072;
pub const ZEND_MM_MAX_LARGE_SIZE: u32 = 2093056;
pub const ZEND_MM_CUSTOM_HEAP_NONE: u32 = 0;
pub const ZEND_MM_CUSTOM_HEAP_STD: u32 = 1;
pub const ZEND_MM_CUSTOM_HEAP_DEBUG: u32 = 2;
pub const HASH_KEY_IS_STRING: u32 = 1;
pub const HASH_KEY_IS_LONG: u32 = 2;
pub const HASH_KEY_NON_EXISTENT: u32 = 3;
pub const HASH_UPDATE: u32 = 1;
pub const HASH_ADD: u32 = 2;
pub const HASH_UPDATE_INDIRECT: u32 = 4;
pub const HASH_ADD_NEW: u32 = 8;
pub const HASH_ADD_NEXT: u32 = 16;
pub const HASH_FLAG_PERSISTENT: u32 = 1;
pub const HASH_FLAG_APPLY_PROTECTION: u32 = 2;
pub const HASH_FLAG_PACKED: u32 = 4;
pub const HASH_FLAG_INITIALIZED: u32 = 8;
pub const HASH_FLAG_STATIC_KEYS: u32 = 16;
pub const HASH_FLAG_HAS_EMPTY_IND: u32 = 32;
pub const HASH_FLAG_ALLOW_COW_VIOLATION: u32 = 64;
pub const ZEND_HASH_APPLY_KEEP: u32 = 0;
pub const ZEND_HASH_APPLY_REMOVE: u32 = 1;
pub const ZEND_HASH_APPLY_STOP: u32 = 2;
pub const ZEND_HASH_APPLY_SHIFT: u32 = 8;
pub const ZEND_HASH_APPLY_COUNT_MASK: u32 = 65280;
pub const ZEND_AST_SPECIAL_SHIFT: u32 = 6;
pub const ZEND_AST_IS_LIST_SHIFT: u32 = 7;
pub const ZEND_AST_NUM_CHILDREN_SHIFT: u32 = 8;
pub const GC_BENCH: u32 = 0;
pub const GC_COLOR: u32 = 49152;
pub const GC_BLACK: u32 = 0;
pub const GC_WHITE: u32 = 32768;
pub const GC_GREY: u32 = 16384;
pub const GC_PURPLE: u32 = 49152;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 2031616;
pub const SF_SETTABLE: u32 = 4294901760;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const ZEND_MMAP_AHEAD: u32 = 32;
pub const ZEND_SIGNAL_QUEUE_SIZE: u32 = 64;
pub const ZMSG_FAILED_INCLUDE_FOPEN: u32 = 1;
pub const ZMSG_FAILED_REQUIRE_FOPEN: u32 = 2;
pub const ZMSG_FAILED_HIGHLIGHT_FOPEN: u32 = 3;
pub const ZMSG_MEMORY_LEAK_DETECTED: u32 = 4;
pub const ZMSG_MEMORY_LEAK_REPEATED: u32 = 5;
pub const ZMSG_LOG_SCRIPT_NAME: u32 = 6;
pub const ZMSG_MEMORY_LEAKS_GRAND_TOTAL: u32 = 7;
pub const DEBUG_BACKTRACE_PROVIDE_OBJECT: u32 = 1;
pub const DEBUG_BACKTRACE_IGNORE_ARGS: u32 = 2;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const LP_SUFF: &'static [u8; 2usize] = b"q\0";
pub const PHP_API_VERSION: u32 = 20170718;
pub const YYDEBUG: u32 = 0;
pub const PHP_DEFAULT_CHARSET: &'static [u8; 6usize] = b"UTF-8\0";
pub const PHP_MAJOR_VERSION: u32 = 7;
pub const PHP_MINOR_VERSION: u32 = 2;
pub const PHP_RELEASE_VERSION: u32 = 12;
pub const PHP_EXTRA_VERSION: &'static [u8; 1usize] = b"\0";
pub const PHP_VERSION: &'static [u8; 7usize] = b"7.2.12\0";
pub const PHP_VERSION_ID: u32 = 70212;
pub const ZEND_USE_ABS_JMP_ADDR: u32 = 0;
pub const ZEND_USE_ABS_CONST_ADDR: u32 = 0;
pub const ZEND_EX_USE_LITERALS: u32 = 1;
pub const ZEND_EX_USE_RUN_TIME_CACHE: u32 = 1;
pub const ZEND_LIVE_TMPVAR: u32 = 0;
pub const ZEND_LIVE_LOOP: u32 = 1;
pub const ZEND_LIVE_SILENCE: u32 = 2;
pub const ZEND_LIVE_ROPE: u32 = 3;
pub const ZEND_LIVE_MASK: u32 = 3;
pub const ZEND_ACC_STATIC: u32 = 1;
pub const ZEND_ACC_ABSTRACT: u32 = 2;
pub const ZEND_ACC_FINAL: u32 = 4;
pub const ZEND_ACC_IMPLEMENTED_ABSTRACT: u32 = 8;
pub const ZEND_ACC_PUBLIC: u32 = 256;
pub const ZEND_ACC_PROTECTED: u32 = 512;
pub const ZEND_ACC_PRIVATE: u32 = 1024;
pub const ZEND_ACC_PPP_MASK: u32 = 1792;
pub const ZEND_ACC_CHANGED: u32 = 2048;
pub const ZEND_ACC_IMPLICIT_PUBLIC: u32 = 4096;
pub const ZEND_ACC_CTOR: u32 = 8192;
pub const ZEND_ACC_DTOR: u32 = 16384;
pub const ZEND_ACC_USER_ARG_INFO: u32 = 128;
pub const ZEND_ACC_ALLOW_STATIC: u32 = 65536;
pub const ZEND_ACC_SHADOW: u32 = 131072;
pub const ZEND_ACC_DEPRECATED: u32 = 262144;
pub const ZEND_ACC_CLOSURE: u32 = 1048576;
pub const ZEND_ACC_FAKE_CLOSURE: u32 = 64;
pub const ZEND_ACC_GENERATOR: u32 = 8388608;
pub const ZEND_ACC_NO_RT_ARENA: u32 = 524288;
pub const ZEND_ACC_CALL_VIA_TRAMPOLINE: u32 = 2097152;
pub const ZEND_ACC_CALL_VIA_HANDLER: u32 = 2097152;
pub const ZEND_ACC_NEVER_CACHE: u32 = 4194304;
pub const ZEND_ACC_VARIADIC: u32 = 16777216;
pub const ZEND_ACC_RETURN_REFERENCE: u32 = 67108864;
pub const ZEND_ACC_DONE_PASS_TWO: u32 = 134217728;
pub const ZEND_ACC_USE_GUARDS: u32 = 16777216;
pub const ZEND_ACC_HAS_TYPE_HINTS: u32 = 268435456;
pub const ZEND_ACC_HAS_FINALLY_BLOCK: u32 = 536870912;
pub const ZEND_ACC_ARENA_ALLOCATED: u32 = 536870912;
pub const ZEND_ACC_HAS_RETURN_TYPE: u32 = 1073741824;
pub const ZEND_ACC_STRICT_TYPES: u32 = 2147483648;
pub const ZEND_ACC_IMPLICIT_ABSTRACT_CLASS: u32 = 16;
pub const ZEND_ACC_EXPLICIT_ABSTRACT_CLASS: u32 = 32;
pub const ZEND_ACC_INTERFACE: u32 = 64;
pub const ZEND_ACC_TRAIT: u32 = 128;
pub const ZEND_ACC_ANON_CLASS: u32 = 256;
pub const ZEND_ACC_ANON_BOUND: u32 = 512;
pub const ZEND_ACC_INHERITED: u32 = 1024;
pub const ZEND_ACC_IMPLEMENT_INTERFACES: u32 = 524288;
pub const ZEND_ACC_IMPLEMENT_TRAITS: u32 = 4194304;
pub const ZEND_ACC_CONSTANTS_UPDATED: u32 = 1048576;
pub const ZEND_HAS_STATIC_IN_METHODS: u32 = 8388608;
pub const ZEND_RETURN_VALUE: u32 = 0;
pub const ZEND_RETURN_REFERENCE: u32 = 1;
pub const ZEND_CALL_FUNCTION: u32 = 0;
pub const ZEND_CALL_CODE: u32 = 1;
pub const ZEND_CALL_NESTED: u32 = 0;
pub const ZEND_CALL_TOP: u32 = 2;
pub const ZEND_CALL_FREE_EXTRA_ARGS: u32 = 4;
pub const ZEND_CALL_CTOR: u32 = 8;
pub const ZEND_CALL_HAS_SYMBOL_TABLE: u32 = 16;
pub const ZEND_CALL_CLOSURE: u32 = 32;
pub const ZEND_CALL_RELEASE_THIS: u32 = 64;
pub const ZEND_CALL_ALLOCATED: u32 = 128;
pub const ZEND_CALL_GENERATOR: u32 = 256;
pub const ZEND_CALL_DYNAMIC: u32 = 512;
pub const ZEND_CALL_FAKE_CLOSURE: u32 = 1024;
pub const ZEND_CALL_INFO_SHIFT: u32 = 16;
pub const IS_CONST: u32 = 1;
pub const IS_TMP_VAR: u32 = 2;
pub const IS_VAR: u32 = 4;
pub const IS_UNUSED: u32 = 8;
pub const IS_CV: u32 = 16;
pub const _JBLEN: u32 = 37;
pub const STACK_BLOCK_SIZE: u32 = 16;
pub const ZEND_STACK_APPLY_TOPDOWN: u32 = 1;
pub const ZEND_STACK_APPLY_BOTTOMUP: u32 = 2;
pub const PTR_STACK_BLOCK_SIZE: u32 = 64;
pub const ZEND_PTR_STACK_NUM_ARGS: u32 = 3;
pub const OBJ_BUCKET_INVALID: u32 = 1;
pub const XPFPA_HAVE_CW: u32 = 1;
pub const ZEND_ARENA_ALIGNMENT: u32 = 8;
pub const SYMTABLE_CACHE_SIZE: u32 = 32;
pub const ZEND_EARLY_BINDING_COMPILE_TIME: u32 = 0;
pub const ZEND_EARLY_BINDING_DELAYED: u32 = 1;
pub const ZEND_EARLY_BINDING_DELAYED_ALL: u32 = 2;
pub const EG_FLAGS_INITIAL: u32 = 0;
pub const EG_FLAGS_IN_SHUTDOWN: u32 = 1;
pub const INITIAL_OP_ARRAY_SIZE: u32 = 64;
pub const ZEND_VM_SPEC: u32 = 1;
pub const ZEND_VM_LINES: u32 = 0;
pub const ZEND_VM_KIND_CALL: u32 = 1;
pub const ZEND_VM_KIND_SWITCH: u32 = 2;
pub const ZEND_VM_KIND_GOTO: u32 = 3;
pub const ZEND_VM_KIND_HYBRID: u32 = 4;
pub const ZEND_VM_KIND: u32 = 1;
pub const ZEND_VM_OP_SPEC: u32 = 1;
pub const ZEND_VM_OP_CONST: u32 = 2;
pub const ZEND_VM_OP_TMPVAR: u32 = 4;
pub const ZEND_VM_OP_TMPVARCV: u32 = 8;
pub const ZEND_VM_OP_MASK: u32 = 240;
pub const ZEND_VM_OP_NUM: u32 = 16;
pub const ZEND_VM_OP_JMP_ADDR: u32 = 32;
pub const ZEND_VM_OP_TRY_CATCH: u32 = 48;
pub const ZEND_VM_OP_LIVE_RANGE: u32 = 64;
pub const ZEND_VM_OP_THIS: u32 = 80;
pub const ZEND_VM_OP_NEXT: u32 = 96;
pub const ZEND_VM_OP_CLASS_FETCH: u32 = 112;
pub const ZEND_VM_OP_CONSTRUCTOR: u32 = 128;
pub const ZEND_VM_EXT_VAR_FETCH: u32 = 65536;
pub const ZEND_VM_EXT_ISSET: u32 = 131072;
pub const ZEND_VM_EXT_ARG_NUM: u32 = 262144;
pub const ZEND_VM_EXT_ARRAY_INIT: u32 = 524288;
pub const ZEND_VM_EXT_REF: u32 = 1048576;
pub const ZEND_VM_EXT_MASK: u32 = 251658240;
pub const ZEND_VM_EXT_NUM: u32 = 16777216;
pub const ZEND_VM_EXT_JMP_ADDR: u32 = 50331648;
pub const ZEND_VM_EXT_DIM_OBJ: u32 = 67108864;
pub const ZEND_VM_EXT_CLASS_FETCH: u32 = 83886080;
pub const ZEND_VM_EXT_CONST_FETCH: u32 = 100663296;
pub const ZEND_VM_EXT_TYPE: u32 = 117440512;
pub const ZEND_VM_EXT_EVAL: u32 = 134217728;
pub const ZEND_VM_EXT_SRC: u32 = 184549376;
pub const ZEND_VM_NO_CONST_CONST: u32 = 1073741824;
pub const ZEND_VM_COMMUTATIVE: u32 = 2147483648;
pub const ZEND_NOP: u32 = 0;
pub const ZEND_ADD: u32 = 1;
pub const ZEND_SUB: u32 = 2;
pub const ZEND_MUL: u32 = 3;
pub const ZEND_DIV: u32 = 4;
pub const ZEND_MOD: u32 = 5;
pub const ZEND_SL: u32 = 6;
pub const ZEND_SR: u32 = 7;
pub const ZEND_CONCAT: u32 = 8;
pub const ZEND_BW_OR: u32 = 9;
pub const ZEND_BW_AND: u32 = 10;
pub const ZEND_BW_XOR: u32 = 11;
pub const ZEND_BW_NOT: u32 = 12;
pub const ZEND_BOOL_NOT: u32 = 13;
pub const ZEND_BOOL_XOR: u32 = 14;
pub const ZEND_IS_IDENTICAL: u32 = 15;
pub const ZEND_IS_NOT_IDENTICAL: u32 = 16;
pub const ZEND_IS_EQUAL: u32 = 17;
pub const ZEND_IS_NOT_EQUAL: u32 = 18;
pub const ZEND_IS_SMALLER: u32 = 19;
pub const ZEND_IS_SMALLER_OR_EQUAL: u32 = 20;
pub const ZEND_CAST: u32 = 21;
pub const ZEND_QM_ASSIGN: u32 = 22;
pub const ZEND_ASSIGN_ADD: u32 = 23;
pub const ZEND_ASSIGN_SUB: u32 = 24;
pub const ZEND_ASSIGN_MUL: u32 = 25;
pub const ZEND_ASSIGN_DIV: u32 = 26;
pub const ZEND_ASSIGN_MOD: u32 = 27;
pub const ZEND_ASSIGN_SL: u32 = 28;
pub const ZEND_ASSIGN_SR: u32 = 29;
pub const ZEND_ASSIGN_CONCAT: u32 = 30;
pub const ZEND_ASSIGN_BW_OR: u32 = 31;
pub const ZEND_ASSIGN_BW_AND: u32 = 32;
pub const ZEND_ASSIGN_BW_XOR: u32 = 33;
pub const ZEND_PRE_INC: u32 = 34;
pub const ZEND_PRE_DEC: u32 = 35;
pub const ZEND_POST_INC: u32 = 36;
pub const ZEND_POST_DEC: u32 = 37;
pub const ZEND_ASSIGN: u32 = 38;
pub const ZEND_ASSIGN_REF: u32 = 39;
pub const ZEND_ECHO: u32 = 40;
pub const ZEND_GENERATOR_CREATE: u32 = 41;
pub const ZEND_JMP: u32 = 42;
pub const ZEND_JMPZ: u32 = 43;
pub const ZEND_JMPNZ: u32 = 44;
pub const ZEND_JMPZNZ: u32 = 45;
pub const ZEND_JMPZ_EX: u32 = 46;
pub const ZEND_JMPNZ_EX: u32 = 47;
pub const ZEND_CASE: u32 = 48;
pub const ZEND_CHECK_VAR: u32 = 49;
pub const ZEND_SEND_VAR_NO_REF_EX: u32 = 50;
pub const ZEND_MAKE_REF: u32 = 51;
pub const ZEND_BOOL: u32 = 52;
pub const ZEND_FAST_CONCAT: u32 = 53;
pub const ZEND_ROPE_INIT: u32 = 54;
pub const ZEND_ROPE_ADD: u32 = 55;
pub const ZEND_ROPE_END: u32 = 56;
pub const ZEND_BEGIN_SILENCE: u32 = 57;
pub const ZEND_END_SILENCE: u32 = 58;
pub const ZEND_INIT_FCALL_BY_NAME: u32 = 59;
pub const ZEND_DO_FCALL: u32 = 60;
pub const ZEND_INIT_FCALL: u32 = 61;
pub const ZEND_RETURN: u32 = 62;
pub const ZEND_RECV: u32 = 63;
pub const ZEND_RECV_INIT: u32 = 64;
pub const ZEND_SEND_VAL: u32 = 65;
pub const ZEND_SEND_VAR_EX: u32 = 66;
pub const ZEND_SEND_REF: u32 = 67;
pub const ZEND_NEW: u32 = 68;
pub const ZEND_INIT_NS_FCALL_BY_NAME: u32 = 69;
pub const ZEND_FREE: u32 = 70;
pub const ZEND_INIT_ARRAY: u32 = 71;
pub const ZEND_ADD_ARRAY_ELEMENT: u32 = 72;
pub const ZEND_INCLUDE_OR_EVAL: u32 = 73;
pub const ZEND_UNSET_VAR: u32 = 74;
pub const ZEND_UNSET_DIM: u32 = 75;
pub const ZEND_UNSET_OBJ: u32 = 76;
pub const ZEND_FE_RESET_R: u32 = 77;
pub const ZEND_FE_FETCH_R: u32 = 78;
pub const ZEND_EXIT: u32 = 79;
pub const ZEND_FETCH_R: u32 = 80;
pub const ZEND_FETCH_DIM_R: u32 = 81;
pub const ZEND_FETCH_OBJ_R: u32 = 82;
pub const ZEND_FETCH_W: u32 = 83;
pub const ZEND_FETCH_DIM_W: u32 = 84;
pub const ZEND_FETCH_OBJ_W: u32 = 85;
pub const ZEND_FETCH_RW: u32 = 86;
pub const ZEND_FETCH_DIM_RW: u32 = 87;
pub const ZEND_FETCH_OBJ_RW: u32 = 88;
pub const ZEND_FETCH_IS: u32 = 89;
pub const ZEND_FETCH_DIM_IS: u32 = 90;
pub const ZEND_FETCH_OBJ_IS: u32 = 91;
pub const ZEND_FETCH_FUNC_ARG: u32 = 92;
pub const ZEND_FETCH_DIM_FUNC_ARG: u32 = 93;
pub const ZEND_FETCH_OBJ_FUNC_ARG: u32 = 94;
pub const ZEND_FETCH_UNSET: u32 = 95;
pub const ZEND_FETCH_DIM_UNSET: u32 = 96;
pub const ZEND_FETCH_OBJ_UNSET: u32 = 97;
pub const ZEND_FETCH_LIST: u32 = 98;
pub const ZEND_FETCH_CONSTANT: u32 = 99;
pub const ZEND_EXT_STMT: u32 = 101;
pub const ZEND_EXT_FCALL_BEGIN: u32 = 102;
pub const ZEND_EXT_FCALL_END: u32 = 103;
pub const ZEND_EXT_NOP: u32 = 104;
pub const ZEND_TICKS: u32 = 105;
pub const ZEND_SEND_VAR_NO_REF: u32 = 106;
pub const ZEND_CATCH: u32 = 107;
pub const ZEND_THROW: u32 = 108;
pub const ZEND_FETCH_CLASS: u32 = 109;
pub const ZEND_CLONE: u32 = 110;
pub const ZEND_RETURN_BY_REF: u32 = 111;
pub const ZEND_INIT_METHOD_CALL: u32 = 112;
pub const ZEND_INIT_STATIC_METHOD_CALL: u32 = 113;
pub const ZEND_ISSET_ISEMPTY_VAR: u32 = 114;
pub const ZEND_ISSET_ISEMPTY_DIM_OBJ: u32 = 115;
pub const ZEND_SEND_VAL_EX: u32 = 116;
pub const ZEND_SEND_VAR: u32 = 117;
pub const ZEND_INIT_USER_CALL: u32 = 118;
pub const ZEND_SEND_ARRAY: u32 = 119;
pub const ZEND_SEND_USER: u32 = 120;
pub const ZEND_STRLEN: u32 = 121;
pub const ZEND_DEFINED: u32 = 122;
pub const ZEND_TYPE_CHECK: u32 = 123;
pub const ZEND_VERIFY_RETURN_TYPE: u32 = 124;
pub const ZEND_FE_RESET_RW: u32 = 125;
pub const ZEND_FE_FETCH_RW: u32 = 126;
pub const ZEND_FE_FREE: u32 = 127;
pub const ZEND_INIT_DYNAMIC_CALL: u32 = 128;
pub const ZEND_DO_ICALL: u32 = 129;
pub const ZEND_DO_UCALL: u32 = 130;
pub const ZEND_DO_FCALL_BY_NAME: u32 = 131;
pub const ZEND_PRE_INC_OBJ: u32 = 132;
pub const ZEND_PRE_DEC_OBJ: u32 = 133;
pub const ZEND_POST_INC_OBJ: u32 = 134;
pub const ZEND_POST_DEC_OBJ: u32 = 135;
pub const ZEND_ASSIGN_OBJ: u32 = 136;
pub const ZEND_OP_DATA: u32 = 137;
pub const ZEND_INSTANCEOF: u32 = 138;
pub const ZEND_DECLARE_CLASS: u32 = 139;
pub const ZEND_DECLARE_INHERITED_CLASS: u32 = 140;
pub const ZEND_DECLARE_FUNCTION: u32 = 141;
pub const ZEND_YIELD_FROM: u32 = 142;
pub const ZEND_DECLARE_CONST: u32 = 143;
pub const ZEND_ADD_INTERFACE: u32 = 144;
pub const ZEND_DECLARE_INHERITED_CLASS_DELAYED: u32 = 145;
pub const ZEND_VERIFY_ABSTRACT_CLASS: u32 = 146;
pub const ZEND_ASSIGN_DIM: u32 = 147;
pub const ZEND_ISSET_ISEMPTY_PROP_OBJ: u32 = 148;
pub const ZEND_HANDLE_EXCEPTION: u32 = 149;
pub const ZEND_USER_OPCODE: u32 = 150;
pub const ZEND_ASSERT_CHECK: u32 = 151;
pub const ZEND_JMP_SET: u32 = 152;
pub const ZEND_DECLARE_LAMBDA_FUNCTION: u32 = 153;
pub const ZEND_ADD_TRAIT: u32 = 154;
pub const ZEND_BIND_TRAITS: u32 = 155;
pub const ZEND_SEPARATE: u32 = 156;
pub const ZEND_FETCH_CLASS_NAME: u32 = 157;
pub const ZEND_CALL_TRAMPOLINE: u32 = 158;
pub const ZEND_DISCARD_EXCEPTION: u32 = 159;
pub const ZEND_YIELD: u32 = 160;
pub const ZEND_GENERATOR_RETURN: u32 = 161;
pub const ZEND_FAST_CALL: u32 = 162;
pub const ZEND_FAST_RET: u32 = 163;
pub const ZEND_RECV_VARIADIC: u32 = 164;
pub const ZEND_SEND_UNPACK: u32 = 165;
pub const ZEND_POW: u32 = 166;
pub const ZEND_ASSIGN_POW: u32 = 167;
pub const ZEND_BIND_GLOBAL: u32 = 168;
pub const ZEND_COALESCE: u32 = 169;
pub const ZEND_SPACESHIP: u32 = 170;
pub const ZEND_DECLARE_ANON_CLASS: u32 = 171;
pub const ZEND_DECLARE_ANON_INHERITED_CLASS: u32 = 172;
pub const ZEND_FETCH_STATIC_PROP_R: u32 = 173;
pub const ZEND_FETCH_STATIC_PROP_W: u32 = 174;
pub const ZEND_FETCH_STATIC_PROP_RW: u32 = 175;
pub const ZEND_FETCH_STATIC_PROP_IS: u32 = 176;
pub const ZEND_FETCH_STATIC_PROP_FUNC_ARG: u32 = 177;
pub const ZEND_FETCH_STATIC_PROP_UNSET: u32 = 178;
pub const ZEND_UNSET_STATIC_PROP: u32 = 179;
pub const ZEND_ISSET_ISEMPTY_STATIC_PROP: u32 = 180;
pub const ZEND_FETCH_CLASS_CONSTANT: u32 = 181;
pub const ZEND_BIND_LEXICAL: u32 = 182;
pub const ZEND_BIND_STATIC: u32 = 183;
pub const ZEND_FETCH_THIS: u32 = 184;
pub const ZEND_ISSET_ISEMPTY_THIS: u32 = 186;
pub const ZEND_SWITCH_LONG: u32 = 187;
pub const ZEND_SWITCH_STRING: u32 = 188;
pub const ZEND_IN_ARRAY: u32 = 189;
pub const ZEND_COUNT: u32 = 190;
pub const ZEND_GET_CLASS: u32 = 191;
pub const ZEND_GET_CALLED_CLASS: u32 = 192;
pub const ZEND_GET_TYPE: u32 = 193;
pub const ZEND_FUNC_NUM_ARGS: u32 = 194;
pub const ZEND_FUNC_GET_ARGS: u32 = 195;
pub const ZEND_UNSET_CV: u32 = 196;
pub const ZEND_ISSET_ISEMPTY_CV: u32 = 197;
pub const ZEND_VM_LAST_OPCODE: u32 = 197;
pub const ZEND_FETCH_CLASS_DEFAULT: u32 = 0;
pub const ZEND_FETCH_CLASS_SELF: u32 = 1;
pub const ZEND_FETCH_CLASS_PARENT: u32 = 2;
pub const ZEND_FETCH_CLASS_STATIC: u32 = 3;
pub const ZEND_FETCH_CLASS_AUTO: u32 = 4;
pub const ZEND_FETCH_CLASS_INTERFACE: u32 = 5;
pub const ZEND_FETCH_CLASS_TRAIT: u32 = 6;
pub const ZEND_FETCH_CLASS_MASK: u32 = 15;
pub const ZEND_FETCH_CLASS_NO_AUTOLOAD: u32 = 128;
pub const ZEND_FETCH_CLASS_SILENT: u32 = 256;
pub const ZEND_FETCH_CLASS_EXCEPTION: u32 = 512;
pub const ZEND_PARAM_REF: u32 = 1;
pub const ZEND_PARAM_VARIADIC: u32 = 2;
pub const ZEND_NAME_FQ: u32 = 0;
pub const ZEND_NAME_NOT_FQ: u32 = 1;
pub const ZEND_NAME_RELATIVE: u32 = 2;
pub const ZEND_TYPE_NULLABLE: u32 = 256;
pub const ZEND_ARRAY_SYNTAX_LIST: u32 = 1;
pub const ZEND_ARRAY_SYNTAX_LONG: u32 = 2;
pub const ZEND_ARRAY_SYNTAX_SHORT: u32 = 3;
pub const BP_VAR_R: u32 = 0;
pub const BP_VAR_W: u32 = 1;
pub const BP_VAR_RW: u32 = 2;
pub const BP_VAR_IS: u32 = 3;
pub const BP_VAR_FUNC_ARG: u32 = 4;
pub const BP_VAR_UNSET: u32 = 5;
pub const BP_VAR_SHIFT: u32 = 3;
pub const BP_VAR_MASK: u32 = 7;
pub const ZEND_INTERNAL_FUNCTION: u32 = 1;
pub const ZEND_USER_FUNCTION: u32 = 2;
pub const ZEND_OVERLOADED_FUNCTION: u32 = 3;
pub const ZEND_EVAL_CODE: u32 = 4;
pub const ZEND_OVERLOADED_FUNCTION_TEMPORARY: u32 = 5;
pub const ZEND_INTERNAL_CLASS: u32 = 1;
pub const ZEND_USER_CLASS: u32 = 2;
pub const ZEND_EVAL: u32 = 1;
pub const ZEND_INCLUDE: u32 = 2;
pub const ZEND_INCLUDE_ONCE: u32 = 4;
pub const ZEND_REQUIRE: u32 = 8;
pub const ZEND_REQUIRE_ONCE: u32 = 16;
pub const ZEND_CT: u32 = 1;
pub const ZEND_RT: u32 = 2;
pub const ZEND_FETCH_GLOBAL: u32 = 0;
pub const ZEND_FETCH_LOCAL: u32 = 268435456;
pub const ZEND_FETCH_GLOBAL_LOCK: u32 = 1073741824;
pub const ZEND_FETCH_TYPE_MASK: u32 = 1879048192;
pub const ZEND_FETCH_STANDARD: u32 = 0;
pub const ZEND_ISSET: u32 = 33554432;
pub const ZEND_ISEMPTY: u32 = 16777216;
pub const ZEND_ISSET_ISEMPTY_MASK: u32 = 50331648;
pub const ZEND_FETCH_ARG_MASK: u32 = 1048575;
pub const ZEND_FREE_ON_RETURN: u32 = 1;
pub const ZEND_SEND_BY_VAL: u32 = 0;
pub const ZEND_SEND_BY_REF: u32 = 1;
pub const ZEND_SEND_PREFER_REF: u32 = 2;
pub const ZEND_DIM_IS: u32 = 1;
pub const MAX_ARG_FLAG_NUM: u32 = 12;
pub const ZEND_RETURN_VAL: u32 = 0;
pub const ZEND_RETURN_REF: u32 = 1;
pub const ZEND_RETURNS_FUNCTION: u32 = 1;
pub const ZEND_RETURNS_VALUE: u32 = 2;
pub const ZEND_ARRAY_ELEMENT_REF: u32 = 1;
pub const ZEND_ARRAY_NOT_PACKED: u32 = 2;
pub const ZEND_ARRAY_SIZE_SHIFT: u32 = 2;
pub const ZEND_SYMBOL_CLASS: u32 = 1;
pub const ZEND_SYMBOL_FUNCTION: u32 = 2;
pub const ZEND_SYMBOL_CONST: u32 = 4;
pub const ZEND_GOTO: u32 = 253;
pub const ZEND_BRK: u32 = 254;
pub const ZEND_CONT: u32 = 255;
pub const ZEND_CLONE_FUNC_NAME: &'static [u8; 8usize] = b"__clone\0";
pub const ZEND_CONSTRUCTOR_FUNC_NAME: &'static [u8; 12usize] = b"__construct\0";
pub const ZEND_DESTRUCTOR_FUNC_NAME: &'static [u8; 11usize] = b"__destruct\0";
pub const ZEND_GET_FUNC_NAME: &'static [u8; 6usize] = b"__get\0";
pub const ZEND_SET_FUNC_NAME: &'static [u8; 6usize] = b"__set\0";
pub const ZEND_UNSET_FUNC_NAME: &'static [u8; 8usize] = b"__unset\0";
pub const ZEND_ISSET_FUNC_NAME: &'static [u8; 8usize] = b"__isset\0";
pub const ZEND_CALL_FUNC_NAME: &'static [u8; 7usize] = b"__call\0";
pub const ZEND_CALLSTATIC_FUNC_NAME: &'static [u8; 13usize] = b"__callstatic\0";
pub const ZEND_TOSTRING_FUNC_NAME: &'static [u8; 11usize] = b"__tostring\0";
pub const ZEND_AUTOLOAD_FUNC_NAME: &'static [u8; 11usize] = b"__autoload\0";
pub const ZEND_INVOKE_FUNC_NAME: &'static [u8; 9usize] = b"__invoke\0";
pub const ZEND_DEBUGINFO_FUNC_NAME: &'static [u8; 12usize] = b"__debuginfo\0";
pub const ZEND_COMPILE_EXTENDED_INFO: u32 = 1;
pub const ZEND_COMPILE_HANDLE_OP_ARRAY: u32 = 2;
pub const ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS: u32 = 4;
pub const ZEND_COMPILE_IGNORE_INTERNAL_CLASSES: u32 = 8;
pub const ZEND_COMPILE_DELAYED_BINDING: u32 = 16;
pub const ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION: u32 = 32;
pub const ZEND_COMPILE_NO_BUILTIN_STRLEN: u32 = 64;
pub const ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION: u32 = 128;
pub const ZEND_COMPILE_IGNORE_USER_FUNCTIONS: u32 = 256;
pub const ZEND_COMPILE_GUARDS: u32 = 512;
pub const ZEND_COMPILE_NO_BUILTINS: u32 = 1024;
pub const ZEND_COMPILE_DEFAULT: u32 = 2;
pub const ZEND_COMPILE_DEFAULT_FOR_EVAL: u32 = 0;
pub const ZEND_BUILD_TS: &'static [u8; 4usize] = b",TS\0";
pub const ZEND_BUILD_DEBUG: &'static [u8; 7usize] = b",debug\0";
pub const ZEND_MODULE_API_NO: u32 = 20170718;
pub const USING_ZTS: u32 = 1;
pub const MODULE_PERSISTENT: u32 = 1;
pub const MODULE_TEMPORARY: u32 = 2;
pub const MODULE_DEP_REQUIRED: u32 = 1;
pub const MODULE_DEP_CONFLICTS: u32 = 2;
pub const MODULE_DEP_OPTIONAL: u32 = 3;
pub const ZEND_USER_OPCODE_CONTINUE: u32 = 0;
pub const ZEND_USER_OPCODE_RETURN: u32 = 1;
pub const ZEND_USER_OPCODE_DISPATCH: u32 = 2;
pub const ZEND_USER_OPCODE_ENTER: u32 = 3;
pub const ZEND_USER_OPCODE_LEAVE: u32 = 4;
pub const ZEND_USER_OPCODE_DISPATCH_TO: u32 = 256;
pub const ZEND_PARSE_PARAMS_QUIET: u32 = 2;
pub const ZEND_PARSE_PARAMS_THROW: u32 = 4;
pub const IS_CALLABLE_CHECK_SYNTAX_ONLY: u32 = 1;
pub const IS_CALLABLE_CHECK_NO_ACCESS: u32 = 2;
pub const IS_CALLABLE_CHECK_IS_STATIC: u32 = 4;
pub const IS_CALLABLE_CHECK_SILENT: u32 = 8;
pub const IS_CALLABLE_STRICT: u32 = 4;
pub const FAST_ZPP: u32 = 1;
pub const ZPP_ERROR_OK: u32 = 0;
pub const ZPP_ERROR_FAILURE: u32 = 1;
pub const ZPP_ERROR_WRONG_CALLBACK: u32 = 2;
pub const ZPP_ERROR_WRONG_CLASS: u32 = 3;
pub const ZPP_ERROR_WRONG_ARG: u32 = 4;
pub const ZPP_ERROR_WRONG_COUNT: u32 = 5;
pub const PHP_OS_FAMILY: &'static [u8; 7usize] = b"Darwin\0";
pub const PHP_DEBUG: u32 = 1;
pub const PHP_DIR_SEPARATOR: u8 = 47u8;
pub const PHP_EOL: &'static [u8; 2usize] = b"\n\0";
pub const APACHE: u32 = 0;
pub const CONFIGURE_COMMAND : & 'static [ u8 ; 235usize ] = b" './configure'  '--enable-debug' '--enable-embed=static' '--without-iconv' '--disable-libxml' '--disable-dom' '--disable-xml' '--enable-maintainer-zts' '--disable-simplexml' '--disable-xmlwriter' '--disable-xmlreader' '--without-pear'\0" ;
pub const PHP_ADA_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_ADA_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_ADA_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_APACHE_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_APACHE_TARGET: &'static [u8; 1usize] = b"\0";
pub const PHP_FHTTPD_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_FHTTPD_LIB: &'static [u8; 1usize] = b"\0";
pub const PHP_FHTTPD_TARGET: &'static [u8; 1usize] = b"\0";
pub const PHP_CFLAGS: &'static [u8; 40usize] = b"$(CFLAGS_CLEAN) -prefer-non-pic -static\0";
pub const PHP_DBASE_LIB: &'static [u8; 1usize] = b"\0";
pub const PHP_BUILD_DEBUG: &'static [u8; 7usize] = b" -Wall\0";
pub const PHP_GDBM_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_IBASE_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_IBASE_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_IBASE_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_IFX_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_IFX_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_IFX_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_INSTALL_IT : & 'static [ u8 ; 110usize ] = b"$(mkinstalldirs) $(INSTALL_ROOT)$(prefix)/lib; $(INSTALL) -m 0644 libs/libphp7.a $(INSTALL_ROOT)$(prefix)/lib\0" ;
pub const PHP_IODBC_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_IODBC_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_IODBC_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_MSQL_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_MSQL_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_MSQL_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_MYSQL_INCLUDE: &'static [u8; 16usize] = b"@MYSQL_INCLUDE@\0";
pub const PHP_MYSQL_LIBS: &'static [u8; 13usize] = b"@MYSQL_LIBS@\0";
pub const PHP_MYSQL_TYPE: &'static [u8; 20usize] = b"@MYSQL_MODULE_TYPE@\0";
pub const PHP_ODBC_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_ODBC_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_ODBC_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_ODBC_TYPE: &'static [u8; 1usize] = b"\0";
pub const PHP_OCI8_SHARED_LIBADD: &'static [u8; 1usize] = b"\0";
pub const PHP_OCI8_DIR: &'static [u8; 1usize] = b"\0";
pub const PHP_OCI8_ORACLE_VERSION: &'static [u8; 1usize] = b"\0";
pub const PHP_ORACLE_SHARED_LIBADD: &'static [u8; 23usize] = b"@ORACLE_SHARED_LIBADD@\0";
pub const PHP_ORACLE_DIR: &'static [u8; 13usize] = b"@ORACLE_DIR@\0";
pub const PHP_ORACLE_VERSION: &'static [u8; 17usize] = b"@ORACLE_VERSION@\0";
pub const PHP_PGSQL_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_PGSQL_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_PGSQL_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_PROG_SENDMAIL: &'static [u8; 19usize] = b"/usr/sbin/sendmail\0";
pub const PHP_SOLID_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_SOLID_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_EMPRESS_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_EMPRESS_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_SYBASE_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_SYBASE_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_SYBASE_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_DBM_TYPE: &'static [u8; 1usize] = b"\0";
pub const PHP_DBM_LIB: &'static [u8; 1usize] = b"\0";
pub const PHP_LDAP_LFLAGS: &'static [u8; 1usize] = b"\0";
pub const PHP_LDAP_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_LDAP_LIBS: &'static [u8; 1usize] = b"\0";
pub const PHP_BIRDSTEP_INCLUDE: &'static [u8; 1usize] = b"\0";
pub const PHP_BIRDSTEP_LIBS: &'static [u8; 1usize] = b"\0";
pub const PEAR_INSTALLDIR: &'static [u8; 1usize] = b"\0";
pub const PHP_INCLUDE_PATH: &'static [u8; 3usize] = b".:\0";
pub const PHP_EXTENSION_DIR: &'static [u8; 49usize] =
    b"/usr/local/lib/php/extensions/debug-zts-20170718\0";
pub const PHP_PREFIX: &'static [u8; 11usize] = b"/usr/local\0";
pub const PHP_BINDIR: &'static [u8; 15usize] = b"/usr/local/bin\0";
pub const PHP_SBINDIR: &'static [u8; 16usize] = b"/usr/local/sbin\0";
pub const PHP_MANDIR: &'static [u8; 19usize] = b"/usr/local/php/man\0";
pub const PHP_LIBDIR: &'static [u8; 19usize] = b"/usr/local/lib/php\0";
pub const PHP_DATADIR: &'static [u8; 21usize] = b"/usr/local/share/php\0";
pub const PHP_SYSCONFDIR: &'static [u8; 15usize] = b"/usr/local/etc\0";
pub const PHP_LOCALSTATEDIR: &'static [u8; 15usize] = b"/usr/local/var\0";
pub const PHP_CONFIG_FILE_PATH: &'static [u8; 15usize] = b"/usr/local/lib\0";
pub const PHP_CONFIG_FILE_SCAN_DIR: &'static [u8; 1usize] = b"\0";
pub const PHP_SHLIB_SUFFIX: &'static [u8; 3usize] = b"so\0";
pub const PHP_SHLIB_EXT_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &'static [u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: u32 = 1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: u32 = 1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const _PATH_PWD: &'static [u8; 5usize] = b"/etc\0";
pub const _PATH_PASSWD: &'static [u8; 12usize] = b"/etc/passwd\0";
pub const _PASSWD: &'static [u8; 7usize] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &'static [u8; 19usize] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &'static [u8; 10usize] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &'static [u8; 14usize] = b"master.passwd\0";
pub const _PATH_MP_DB: &'static [u8; 12usize] = b"/etc/pwd.db\0";
pub const _MP_DB: &'static [u8; 7usize] = b"pwd.db\0";
pub const _PATH_SMP_DB: &'static [u8; 13usize] = b"/etc/spwd.db\0";
pub const _SMP_DB: &'static [u8; 8usize] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &'static [u8; 19usize] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 262144;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const MINBUCKET: u32 = 4;
pub const MAXALLOCSAVE: u32 = 8192;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const FORMAT_CONV_MAX_PRECISION: u32 = 500;
pub const EXEC_INPUT_BUF: u32 = 4096;
pub const PHP_MIME_TYPE: &'static [u8; 24usize] = b"application/x-httpd-php\0";
pub const _PATH_LOG: &'static [u8; 16usize] = b"/var/run/syslog\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_NETINFO: u32 = 96;
pub const LOG_REMOTEAUTH: u32 = 104;
pub const LOG_INSTALL: u32 = 112;
pub const LOG_RAS: u32 = 120;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_LAUNCHD: u32 = 192;
pub const LOG_NFACILITIES: u32 = 25;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const PHP_OUTPUT_NEWAPI: u32 = 1;
pub const PHP_OUTPUT_HANDLER_WRITE: u32 = 0;
pub const PHP_OUTPUT_HANDLER_START: u32 = 1;
pub const PHP_OUTPUT_HANDLER_CLEAN: u32 = 2;
pub const PHP_OUTPUT_HANDLER_FLUSH: u32 = 4;
pub const PHP_OUTPUT_HANDLER_FINAL: u32 = 8;
pub const PHP_OUTPUT_HANDLER_CONT: u32 = 0;
pub const PHP_OUTPUT_HANDLER_END: u32 = 8;
pub const PHP_OUTPUT_HANDLER_INTERNAL: u32 = 0;
pub const PHP_OUTPUT_HANDLER_USER: u32 = 1;
pub const PHP_OUTPUT_HANDLER_CLEANABLE: u32 = 16;
pub const PHP_OUTPUT_HANDLER_FLUSHABLE: u32 = 32;
pub const PHP_OUTPUT_HANDLER_REMOVABLE: u32 = 64;
pub const PHP_OUTPUT_HANDLER_STDFLAGS: u32 = 112;
pub const PHP_OUTPUT_HANDLER_STARTED: u32 = 4096;
pub const PHP_OUTPUT_HANDLER_DISABLED: u32 = 8192;
pub const PHP_OUTPUT_HANDLER_PROCESSED: u32 = 16384;
pub const PHP_OUTPUT_POP_TRY: u32 = 0;
pub const PHP_OUTPUT_POP_FORCE: u32 = 1;
pub const PHP_OUTPUT_POP_DISCARD: u32 = 16;
pub const PHP_OUTPUT_POP_SILENT: u32 = 256;
pub const PHP_OUTPUT_IMPLICITFLUSH: u32 = 1;
pub const PHP_OUTPUT_DISABLED: u32 = 2;
pub const PHP_OUTPUT_WRITTEN: u32 = 4;
pub const PHP_OUTPUT_SENT: u32 = 8;
pub const PHP_OUTPUT_ACTIVE: u32 = 16;
pub const PHP_OUTPUT_LOCKED: u32 = 32;
pub const PHP_OUTPUT_ACTIVATED: u32 = 1048576;
pub const PHP_OUTPUT_HANDLER_ALIGNTO_SIZE: u32 = 4096;
pub const PHP_OUTPUT_HANDLER_DEFAULT_SIZE: u32 = 16384;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const PHP_STREAM_NOTIFIER_PROGRESS: u32 = 1;
pub const PHP_STREAM_NOTIFY_RESOLVE: u32 = 1;
pub const PHP_STREAM_NOTIFY_CONNECT: u32 = 2;
pub const PHP_STREAM_NOTIFY_AUTH_REQUIRED: u32 = 3;
pub const PHP_STREAM_NOTIFY_MIME_TYPE_IS: u32 = 4;
pub const PHP_STREAM_NOTIFY_FILE_SIZE_IS: u32 = 5;
pub const PHP_STREAM_NOTIFY_REDIRECTED: u32 = 6;
pub const PHP_STREAM_NOTIFY_PROGRESS: u32 = 7;
pub const PHP_STREAM_NOTIFY_COMPLETED: u32 = 8;
pub const PHP_STREAM_NOTIFY_FAILURE: u32 = 9;
pub const PHP_STREAM_NOTIFY_AUTH_RESULT: u32 = 10;
pub const PHP_STREAM_NOTIFY_SEVERITY_INFO: u32 = 0;
pub const PHP_STREAM_NOTIFY_SEVERITY_WARN: u32 = 1;
pub const PHP_STREAM_NOTIFY_SEVERITY_ERR: u32 = 2;
pub const PHP_STREAM_FILTER_READ: u32 = 1;
pub const PHP_STREAM_FILTER_WRITE: u32 = 2;
pub const PHP_STREAM_FILTER_ALL: u32 = 3;
pub const PSFS_FLAG_NORMAL: u32 = 0;
pub const PSFS_FLAG_FLUSH_INC: u32 = 1;
pub const PSFS_FLAG_FLUSH_CLOSE: u32 = 2;
pub const PHP_STREAM_FLAG_NO_SEEK: u32 = 1;
pub const PHP_STREAM_FLAG_NO_BUFFER: u32 = 2;
pub const PHP_STREAM_FLAG_EOL_UNIX: u32 = 0;
pub const PHP_STREAM_FLAG_DETECT_EOL: u32 = 4;
pub const PHP_STREAM_FLAG_EOL_MAC: u32 = 8;
pub const PHP_STREAM_FLAG_AVOID_BLOCKING: u32 = 16;
pub const PHP_STREAM_FLAG_NO_CLOSE: u32 = 32;
pub const PHP_STREAM_FLAG_IS_DIR: u32 = 64;
pub const PHP_STREAM_FLAG_NO_FCLOSE: u32 = 128;
pub const PHP_STREAM_FLAG_WAS_WRITTEN: u32 = 2147483648;
pub const PHP_STREAM_FCLOSE_NONE: u32 = 0;
pub const PHP_STREAM_FCLOSE_FDOPEN: u32 = 1;
pub const PHP_STREAM_FCLOSE_FOPENCOOKIE: u32 = 2;
pub const PHP_STREAM_PERSISTENT_SUCCESS: u32 = 0;
pub const PHP_STREAM_PERSISTENT_FAILURE: u32 = 1;
pub const PHP_STREAM_PERSISTENT_NOT_EXIST: u32 = 2;
pub const PHP_STREAM_FREE_CALL_DTOR: u32 = 1;
pub const PHP_STREAM_FREE_RELEASE_STREAM: u32 = 2;
pub const PHP_STREAM_FREE_PRESERVE_HANDLE: u32 = 4;
pub const PHP_STREAM_FREE_RSRC_DTOR: u32 = 8;
pub const PHP_STREAM_FREE_PERSISTENT: u32 = 16;
pub const PHP_STREAM_FREE_IGNORE_ENCLOSING: u32 = 32;
pub const PHP_STREAM_FREE_KEEP_RSRC: u32 = 64;
pub const PHP_STREAM_FREE_CLOSE: u32 = 3;
pub const PHP_STREAM_FREE_CLOSE_CASTED: u32 = 7;
pub const PHP_STREAM_FREE_CLOSE_PERSISTENT: u32 = 19;
pub const PHP_STREAM_MKDIR_RECURSIVE: u32 = 1;
pub const PHP_STREAM_URL_STAT_LINK: u32 = 1;
pub const PHP_STREAM_URL_STAT_QUIET: u32 = 2;
pub const PHP_STREAM_URL_STAT_NOCACHE: u32 = 4;
pub const PHP_STREAM_OPTION_BLOCKING: u32 = 1;
pub const PHP_STREAM_OPTION_READ_BUFFER: u32 = 2;
pub const PHP_STREAM_OPTION_WRITE_BUFFER: u32 = 3;
pub const PHP_STREAM_BUFFER_NONE: u32 = 0;
pub const PHP_STREAM_BUFFER_LINE: u32 = 1;
pub const PHP_STREAM_BUFFER_FULL: u32 = 2;
pub const PHP_STREAM_OPTION_READ_TIMEOUT: u32 = 4;
pub const PHP_STREAM_OPTION_SET_CHUNK_SIZE: u32 = 5;
pub const PHP_STREAM_OPTION_LOCKING: u32 = 6;
pub const PHP_STREAM_LOCK_SUPPORTED: u32 = 1;
pub const PHP_STREAM_OPTION_XPORT_API: u32 = 7;
pub const PHP_STREAM_OPTION_CRYPTO_API: u32 = 8;
pub const PHP_STREAM_OPTION_MMAP_API: u32 = 9;
pub const PHP_STREAM_OPTION_TRUNCATE_API: u32 = 10;
pub const PHP_STREAM_TRUNCATE_SUPPORTED: u32 = 0;
pub const PHP_STREAM_TRUNCATE_SET_SIZE: u32 = 1;
pub const PHP_STREAM_OPTION_META_DATA_API: u32 = 11;
pub const PHP_STREAM_OPTION_CHECK_LIVENESS: u32 = 12;
pub const PHP_STREAM_OPTION_PIPE_BLOCKING: u32 = 13;
pub const PHP_STREAM_OPTION_RETURN_OK: u32 = 0;
pub const PHP_STREAM_OPTION_RETURN_ERR: i32 = -1;
pub const PHP_STREAM_OPTION_RETURN_NOTIMPL: i32 = -2;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_MASTER_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_MAX: u32 = 40;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_MAX: u32 = 40;
pub const NET_MAXID: u32 = 40;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_MAXID: u32 = 10;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const STREAM_XPORT_CLIENT: u32 = 0;
pub const STREAM_XPORT_SERVER: u32 = 1;
pub const STREAM_XPORT_CONNECT: u32 = 2;
pub const STREAM_XPORT_BIND: u32 = 4;
pub const STREAM_XPORT_LISTEN: u32 = 8;
pub const STREAM_XPORT_CONNECT_ASYNC: u32 = 16;
pub const PHP_STREAM_MMAP_ALL: u32 = 0;
pub const PHP_STREAM_AS_STDIO: u32 = 0;
pub const PHP_STREAM_AS_FD: u32 = 1;
pub const PHP_STREAM_AS_SOCKETD: u32 = 2;
pub const PHP_STREAM_AS_FD_FOR_SELECT: u32 = 3;
pub const PHP_STREAM_CAST_TRY_HARD: u32 = 2147483648;
pub const PHP_STREAM_CAST_RELEASE: u32 = 1073741824;
pub const PHP_STREAM_CAST_INTERNAL: u32 = 536870912;
pub const PHP_STREAM_CAST_MASK: u32 = 3758096384;
pub const IGNORE_PATH: u32 = 0;
pub const USE_PATH: u32 = 1;
pub const IGNORE_URL: u32 = 2;
pub const REPORT_ERRORS: u32 = 8;
pub const STREAM_MUST_SEEK: u32 = 16;
pub const STREAM_WILL_CAST: u32 = 32;
pub const STREAM_LOCATE_WRAPPERS_ONLY: u32 = 64;
pub const STREAM_OPEN_FOR_INCLUDE: u32 = 128;
pub const STREAM_USE_URL: u32 = 256;
pub const STREAM_ONLY_GET_HEADERS: u32 = 512;
pub const STREAM_DISABLE_OPEN_BASEDIR: u32 = 1024;
pub const STREAM_OPEN_PERSISTENT: u32 = 2048;
pub const STREAM_USE_GLOB_DIR_OPEN: u32 = 4096;
pub const STREAM_DISABLE_URL_PROTECTION: u32 = 8192;
pub const STREAM_ASSUME_REALPATH: u32 = 16384;
pub const STREAM_USE_BLOCKING_PIPE: u32 = 32768;
pub const IGNORE_URL_WIN: u32 = 0;
pub const PHP_STREAM_UNCHANGED: u32 = 0;
pub const PHP_STREAM_RELEASED: u32 = 1;
pub const PHP_STREAM_FAILED: u32 = 2;
pub const PHP_STREAM_CRITICAL: u32 = 3;
pub const PHP_STREAM_NO_PREFERENCE: u32 = 0;
pub const PHP_STREAM_PREFER_STDIO: u32 = 1;
pub const PHP_STREAM_FORCE_CONVERSION: u32 = 2;
pub const PHP_STREAM_IS_URL: u32 = 1;
pub const PHP_STREAM_META_TOUCH: u32 = 1;
pub const PHP_STREAM_META_OWNER_NAME: u32 = 2;
pub const PHP_STREAM_META_OWNER: u32 = 3;
pub const PHP_STREAM_META_GROUP_NAME: u32 = 4;
pub const PHP_STREAM_META_GROUP: u32 = 5;
pub const PHP_STREAM_META_ACCESS: u32 = 6;
pub const PHP_STREAM_MAX_MEM: u32 = 2097152;
pub const TEMP_STREAM_DEFAULT: u32 = 0;
pub const TEMP_STREAM_READONLY: u32 = 1;
pub const TEMP_STREAM_TAKE_BUFFER: u32 = 2;
pub const PHP_DISPLAY_ERRORS_STDOUT: u32 = 1;
pub const PHP_DISPLAY_ERRORS_STDERR: u32 = 2;
pub const TRACK_VARS_POST: u32 = 0;
pub const TRACK_VARS_GET: u32 = 1;
pub const TRACK_VARS_COOKIE: u32 = 2;
pub const TRACK_VARS_SERVER: u32 = 3;
pub const TRACK_VARS_ENV: u32 = 4;
pub const TRACK_VARS_FILES: u32 = 5;
pub const TRACK_VARS_REQUEST: u32 = 6;
pub const ZEND_INI_USER: u32 = 1;
pub const ZEND_INI_PERDIR: u32 = 2;
pub const ZEND_INI_SYSTEM: u32 = 4;
pub const ZEND_INI_ALL: u32 = 7;
pub const ZEND_INI_DISPLAY_ORIG: u32 = 1;
pub const ZEND_INI_DISPLAY_ACTIVE: u32 = 2;
pub const ZEND_INI_STAGE_STARTUP: u32 = 1;
pub const ZEND_INI_STAGE_SHUTDOWN: u32 = 2;
pub const ZEND_INI_STAGE_ACTIVATE: u32 = 4;
pub const ZEND_INI_STAGE_DEACTIVATE: u32 = 8;
pub const ZEND_INI_STAGE_RUNTIME: u32 = 16;
pub const ZEND_INI_STAGE_HTACCESS: u32 = 32;
pub const ZEND_INI_PARSER_ENTRY: u32 = 1;
pub const ZEND_INI_PARSER_SECTION: u32 = 2;
pub const ZEND_INI_PARSER_POP_ENTRY: u32 = 3;
pub const PHP_INI_USER: u32 = 1;
pub const PHP_INI_PERDIR: u32 = 2;
pub const PHP_INI_SYSTEM: u32 = 4;
pub const PHP_INI_ALL: u32 = 7;
pub const PHP_INI_DISPLAY_ORIG: u32 = 1;
pub const PHP_INI_DISPLAY_ACTIVE: u32 = 2;
pub const PHP_INI_STAGE_STARTUP: u32 = 1;
pub const PHP_INI_STAGE_SHUTDOWN: u32 = 2;
pub const PHP_INI_STAGE_ACTIVATE: u32 = 4;
pub const PHP_INI_STAGE_DEACTIVATE: u32 = 8;
pub const PHP_INI_STAGE_RUNTIME: u32 = 16;
pub const PHP_INI_STAGE_HTACCESS: u32 = 32;
pub const TSRM_ALLOCA_MAX_SIZE: u32 = 4096;
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const DEFAULT_SLASH: u8 = 47u8;
pub const DEFAULT_DIR_SEPARATOR: u8 = 58u8;
pub const CWD_EXPAND: u32 = 0;
pub const CWD_FILEPATH: u32 = 1;
pub const CWD_REALPATH: u32 = 2;
pub const REALPATH_CACHE_TTL: u32 = 120;
pub const REALPATH_CACHE_SIZE: u32 = 0;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFREG: u32 = 32768;
pub const S_IXROOT: u32 = 73;
pub const CONST_CS: u32 = 1;
pub const CONST_PERSISTENT: u32 = 2;
pub const CONST_CT_SUBST: u32 = 4;
pub const PHP_USER_CONSTANT: u32 = 2147483647;
pub const PHP_CONNECTION_NORMAL: u32 = 0;
pub const PHP_CONNECTION_ABORTED: u32 = 1;
pub const PHP_CONNECTION_TIMEOUT: u32 = 2;
pub const HAVE_LOCALTIME: u32 = 1;
pub const HAVE_GMTIME: u32 = 1;
pub const HAVE_ASCTIME: u32 = 1;
pub const HAVE_CTIME: u32 = 1;
pub const SAPI_OPTION_NO_CHDIR: u32 = 1;
pub const SAPI_POST_BLOCK_SIZE: u32 = 16384;
pub const SAPI_HEADER_ADD: u32 = 1;
pub const SAPI_HEADER_SENT_SUCCESSFULLY: u32 = 1;
pub const SAPI_HEADER_DO_SEND: u32 = 2;
pub const SAPI_HEADER_SEND_FAILED: u32 = 3;
pub const SAPI_DEFAULT_MIMETYPE: &'static [u8; 10usize] = b"text/html\0";
pub const SAPI_DEFAULT_CHARSET: &'static [u8; 6usize] = b"UTF-8\0";
pub const SAPI_PHP_VERSION_HEADER: &'static [u8; 25usize] = b"X-Powered-By: PHP/7.2.12\0";
pub const PARSE_POST: u32 = 0;
pub const PARSE_GET: u32 = 1;
pub const PARSE_COOKIE: u32 = 2;
pub const PARSE_STRING: u32 = 3;
pub const PARSE_ENV: u32 = 4;
pub const PARSE_SERVER: u32 = 5;
pub const PARSE_SESSION: u32 = 6;
pub const NUM_TRACK_VARS: u32 = 6;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
impl Default for __darwin_zmm_reg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_i386_float_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
impl Default for __darwin_i386_avx_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
impl Default for __darwin_i386_avx512_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_x86_float_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
impl Default for __darwin_x86_avx_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
impl Default for __darwin_x86_avx512_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__ss as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__fs as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__fs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
impl Default for __darwin_sigaltstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
impl Default for __darwin_ucontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl Default for sigval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
impl Default for sigevent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
impl Default for __siginfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
impl Default for __sigaction_u {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
impl Default for __sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
impl Default for sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
impl Default for sigvec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
impl Default for sigstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_signal"]
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
            >,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_unused: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_unused as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_unused)
        )
    );
}
pub type rusage_info_current = rusage_info_v4;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_getpriority"]
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getiopolicy_np"]
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getrlimit"]
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getrusage"]
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setpriority"]
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setiopolicy_np"]
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setrlimit"]
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
impl Default for wait {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_wait"]
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_waitpid"]
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_waitid"]
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wait3"]
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_wait4"]
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_alloca"]
    pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}___mb_cur_max"]
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_abort"]
    pub fn abort();
}
extern "C" {
    #[link_name = "\u{1}_abs"]
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atexit"]
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atof"]
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atoi"]
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atol"]
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_atoll"]
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_bsearch"]
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_calloc"]
    pub fn calloc(__count: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_div"]
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    #[link_name = "\u{1}_exit"]
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_free"]
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_getenv"]
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_labs"]
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ldiv"]
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_llabs"]
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_lldiv"]
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_malloc"]
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mblen"]
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mbstowcs"]
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_mbtowc"]
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_posix_memalign"]
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_qsort"]
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_rand"]
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realloc"]
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_srand"]
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_strtod"]
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_strtof"]
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_strtol"]
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_strtold"]
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_strtoll"]
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_strtoul"]
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtoull"]
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_system"]
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wcstombs"]
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_wctomb"]
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__Exit"]
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_a64l"]
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_drand48"]
    pub fn drand48() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ecvt"]
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_erand48"]
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fcvt"]
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_gcvt"]
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getsubopt"]
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_grantpt"]
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_initstate"]
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_jrand48"]
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_l64a"]
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_lcong48"]
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    #[link_name = "\u{1}_lrand48"]
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_mktemp"]
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mkstemp"]
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mrand48"]
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_nrand48"]
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_posix_openpt"]
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ptsname"]
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ptsname_r"]
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putenv"]
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_random"]
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_rand_r"]
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_seed48"]
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    #[link_name = "\u{1}_setenv"]
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setkey"]
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setstate"]
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_srand48"]
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_srandom"]
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_unlockpt"]
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unsetenv"]
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    #[link_name = "\u{1}_arc4random"]
    pub fn arc4random() -> u32;
}
extern "C" {
    #[link_name = "\u{1}_arc4random_addrandom"]
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_arc4random_buf"]
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    #[link_name = "\u{1}_arc4random_stir"]
    pub fn arc4random_stir();
}
extern "C" {
    #[link_name = "\u{1}_arc4random_uniform"]
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_atexit_b"]
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bsearch_b"]
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_cgetcap"]
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_cgetclose"]
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetent"]
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetfirst"]
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetmatch"]
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetnext"]
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetnum"]
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetset"]
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetstr"]
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetustr"]
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_devname"]
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_devname_r"]
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getbsize"]
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getloadavg"]
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getprogname"]
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_heapsort"]
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_heapsort_b"]
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mergesort"]
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mergesort_b"]
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_psort"]
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_psort_b"]
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_psort_r"]
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_qsort_b"]
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_qsort_r"]
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_radixsort"]
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setprogname"]
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_sradixsort"]
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sranddev"]
    pub fn sranddev();
}
extern "C" {
    #[link_name = "\u{1}_srandomdev"]
    pub fn srandomdev();
}
extern "C" {
    #[link_name = "\u{1}_reallocf"]
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strtoq"]
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_strtouq"]
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_suboptarg"]
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_valloc"]
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_pselect"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memchr"]
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memcmp"]
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memcpy"]
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memmove"]
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset"]
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strcat"]
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strchr"]
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcmp"]
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcoll"]
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcpy"]
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcspn"]
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strerror"]
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlen"]
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strncat"]
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strncmp"]
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncpy"]
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strpbrk"]
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strrchr"]
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strspn"]
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strstr"]
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strtok"]
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strxfrm"]
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtok_r"]
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strdup"]
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memccpy"]
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_stpcpy"]
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_stpncpy"]
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strndup"]
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnlen"]
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strsignal"]
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memset_s"]
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    #[link_name = "\u{1}_memmem"]
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern4"]
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern8"]
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern16"]
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_strcasestr"]
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnstr"]
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlcat"]
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strlcpy"]
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strmode"]
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_strsep"]
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_swab"]
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    #[link_name = "\u{1}_timingsafe_bcmp"]
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcmp"]
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcopy"]
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_bzero"]
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    #[link_name = "\u{1}_index"]
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_rindex"]
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ffs"]
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcasecmp"]
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncasecmp"]
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsl"]
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsll"]
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fls"]
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsl"]
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsll"]
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    #[link_name = "\u{1}___math_errhandling"]
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyf"]
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyd"]
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassify"]
    pub fn __fpclassify(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_acosf"]
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acos"]
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acosl"]
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinf"]
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asin"]
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinl"]
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanf"]
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan"]
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanl"]
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atan2f"]
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan2"]
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atan2l"]
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cosf"]
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cos"]
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cosl"]
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinf"]
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sin"]
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinl"]
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanf"]
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tan"]
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanl"]
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acoshf"]
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acosh"]
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acoshl"]
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinhf"]
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asinh"]
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinhl"]
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanhf"]
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atanh"]
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanhl"]
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_coshf"]
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cosh"]
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_coshl"]
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinhf"]
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sinh"]
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinhl"]
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanhf"]
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tanh"]
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanhl"]
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expf"]
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp"]
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expl"]
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_exp2f"]
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp2"]
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_exp2l"]
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expm1f"]
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_expm1"]
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expm1l"]
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logf"]
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log"]
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logl"]
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log10f"]
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log10"]
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log10l"]
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log2f"]
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log2"]
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log2l"]
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log1pf"]
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log1p"]
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log1pl"]
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logbf"]
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_logb"]
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logbl"]
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_modff"]
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_modf"]
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_modfl"]
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ldexpf"]
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ldexp"]
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ldexpl"]
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_frexpf"]
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_frexp"]
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_frexpl"]
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ilogbf"]
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogb"]
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogbl"]
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scalbnf"]
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbn"]
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalbnl"]
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalblnf"]
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbln"]
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalblnl"]
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fabsf"]
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fabs"]
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fabsl"]
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cbrtf"]
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cbrt"]
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cbrtl"]
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_hypotf"]
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_hypot"]
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_hypotl"]
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_powf"]
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_pow"]
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_powl"]
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sqrtf"]
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sqrt"]
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sqrtl"]
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erff"]
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erf"]
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfl"]
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfcf"]
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erfc"]
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfcl"]
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lgammaf"]
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_lgamma"]
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lgammal"]
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tgammaf"]
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tgamma"]
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tgammal"]
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ceilf"]
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ceil"]
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ceill"]
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_floorf"]
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_floor"]
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_floorl"]
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintf"]
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nearbyint"]
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintl"]
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_rintf"]
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_rint"]
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_rintl"]
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lrintf"]
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrint"]
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrintl"]
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundf"]
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_round"]
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_roundl"]
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lroundf"]
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lround"]
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lroundl"]
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_llrintf"]
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrint"]
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrintl"]
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundf"]
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llround"]
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundl"]
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_truncf"]
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_trunc"]
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_truncl"]
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmodf"]
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmod"]
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmodl"]
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remainderf"]
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remainder"]
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remainderl"]
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remquof"]
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remquo"]
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remquol"]
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_copysignf"]
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_copysign"]
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_copysignl"]
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nanf"]
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nan"]
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nanl"]
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nextafterf"]
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nextafter"]
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nextafterl"]
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nexttoward"]
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardf"]
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardl"]
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fdimf"]
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fdim"]
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fdiml"]
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaxf"]
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmax"]
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaxl"]
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fminf"]
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmin"]
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fminl"]
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaf"]
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fma"]
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmal"]
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___inff"]
    pub fn __inff() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___inf"]
    pub fn __inf() -> f64;
}
extern "C" {
    #[link_name = "\u{1}___infl"]
    pub fn __infl() -> f64;
}
extern "C" {
    #[link_name = "\u{1}___nan"]
    pub fn __nan() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10f"]
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10"]
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___cospif"]
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___cospi"]
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___sinpif"]
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___sinpi"]
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___tanpif"]
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___tanpi"]
    pub fn __tanpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j0"]
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j1"]
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_jn"]
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y0"]
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y1"]
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_yn"]
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalb"]
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rinttol"]
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundtol"]
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_drem"]
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_finite"]
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gamma"]
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_significand"]
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
impl Default for exception {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_matherr"]
    pub fn matherr(arg1: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_imaxabs"]
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_imaxdiv"]
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoimax"]
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoumax"]
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoimax"]
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoumax"]
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type tsrm_intptr_t = isize;
pub type tsrm_uintptr_t = usize;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        8usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).__opaque as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__opaque)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_sched_yield"]
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sched_get_priority_min"]
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sched_get_priority_max"]
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_asctime"]
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_clock"]
    pub fn clock() -> clock_t;
}
extern "C" {
    #[link_name = "\u{1}_ctime"]
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_difftime"]
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_getdate"]
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_gmtime"]
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime"]
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_mktime"]
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_strftime"]
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strptime"]
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_time"]
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzset"]
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}_asctime_r"]
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ctime_r"]
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_gmtime_r"]
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime_r"]
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_posix2time"]
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzsetwall"]
    pub fn tzsetwall();
}
extern "C" {
    #[link_name = "\u{1}_time2posix"]
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timelocal"]
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timegm"]
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_nanosleep"]
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = u32;
extern "C" {
    #[link_name = "\u{1}_clock_getres"]
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime"]
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime_nsec_np"]
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    #[link_name = "\u{1}_clock_settime"]
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
pub const QOS_CLASS_USER_INTERACTIVE: _bindgen_ty_1 = 33;
pub const QOS_CLASS_USER_INITIATED: _bindgen_ty_1 = 25;
pub const QOS_CLASS_DEFAULT: _bindgen_ty_1 = 21;
pub const QOS_CLASS_UTILITY: _bindgen_ty_1 = 17;
pub const QOS_CLASS_BACKGROUND: _bindgen_ty_1 = 9;
pub const QOS_CLASS_UNSPECIFIED: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = u32;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}_qos_class_self"]
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    #[link_name = "\u{1}_qos_class_main"]
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_set_qos_class_np"]
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_get_qos_class_np"]
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_set_qos_class_self_np"]
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_get_qos_class_np"]
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    #[link_name = "\u{1}_pthread_override_qos_class_start_np"]
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    #[link_name = "\u{1}_pthread_override_qos_class_end_np"]
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    #[link_name = "\u{1}_pthread_atfork"]
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_destroy"]
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getdetachstate"]
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getguardsize"]
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getinheritsched"]
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getschedparam"]
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getschedpolicy"]
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getscope"]
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getstack"]
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getstackaddr"]
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_getstacksize"]
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_init"]
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setdetachstate"]
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setguardsize"]
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setinheritsched"]
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setschedparam"]
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setschedpolicy"]
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setscope"]
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setstack"]
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setstackaddr"]
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_attr_setstacksize"]
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cancel"]
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_broadcast"]
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_destroy"]
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_init"]
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_signal"]
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_timedwait"]
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_wait"]
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_condattr_destroy"]
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_condattr_init"]
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_condattr_getpshared"]
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_condattr_setpshared"]
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_create"]
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_detach"]
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_equal"]
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_exit"]
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_pthread_getconcurrency"]
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_getschedparam"]
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_getspecific"]
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_pthread_join"]
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_key_create"]
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_key_delete"]
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_destroy"]
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_getprioceiling"]
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_init"]
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_lock"]
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_setprioceiling"]
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_trylock"]
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutex_unlock"]
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_destroy"]
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_getprioceiling"]
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_getprotocol"]
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_getpshared"]
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_gettype"]
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_init"]
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_setprioceiling"]
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_setprotocol"]
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_setpshared"]
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mutexattr_settype"]
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_once"]
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_destroy"]
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_init"]
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_rdlock"]
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_tryrdlock"]
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_trywrlock"]
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_wrlock"]
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlock_unlock"]
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlockattr_destroy"]
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlockattr_getpshared"]
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlockattr_init"]
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_rwlockattr_setpshared"]
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_self"]
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setcancelstate"]
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setcanceltype"]
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setconcurrency"]
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setschedparam"]
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setspecific"]
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_testcancel"]
    pub fn pthread_testcancel();
}
extern "C" {
    #[link_name = "\u{1}_pthread_is_threaded_np"]
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_threadid_np"]
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_getname_np"]
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setname_np"]
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_main_np"]
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_mach_thread_np"]
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    #[link_name = "\u{1}_pthread_get_stacksize_np"]
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_pthread_get_stackaddr_np"]
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_signal_thread_np"]
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_cond_timedwait_relative_np"]
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_create_suspended_np"]
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_kill"]
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_from_mach_thread_np"]
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    #[link_name = "\u{1}_pthread_sigmask"]
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_yield_np"]
    pub fn pthread_yield_np();
}
pub type ts_rsrc_id = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_sys_signame"]
    pub static mut sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    #[link_name = "\u{1}_sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    #[link_name = "\u{1}_raise"]
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bsd_signal"]
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
            >,
        ),
    >;
}
extern "C" {
    #[link_name = "\u{1}_kill"]
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_killpg"]
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigaction"]
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigaddset"]
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigaltstack"]
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigdelset"]
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigemptyset"]
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigfillset"]
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sighold"]
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigignore"]
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_siginterrupt"]
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigismember"]
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigpause"]
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigpending"]
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigprocmask"]
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigrelse"]
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigset"]
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
            >,
        ),
    >;
}
extern "C" {
    #[link_name = "\u{1}_sigsuspend"]
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigwait"]
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_psignal"]
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_sigblock"]
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigsetmask"]
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sigvec"]
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type ts_allocate_ctor =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type ts_allocate_dtor =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    #[link_name = "\u{1}_tsrm_startup"]
    pub fn tsrm_startup(
        expected_threads: ::std::os::raw::c_int,
        expected_resources: ::std::os::raw::c_int,
        debug_level: ::std::os::raw::c_int,
        debug_filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_shutdown"]
    pub fn tsrm_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_ts_allocate_id"]
    pub fn ts_allocate_id(
        rsrc_id: *mut ts_rsrc_id,
        size: usize,
        ctor: ts_allocate_ctor,
        dtor: ts_allocate_dtor,
    ) -> ts_rsrc_id;
}
extern "C" {
    #[link_name = "\u{1}_ts_resource_ex"]
    pub fn ts_resource_ex(id: ts_rsrc_id, th_id: *mut pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ts_free_thread"]
    pub fn ts_free_thread();
}
extern "C" {
    #[link_name = "\u{1}_ts_free_worker_threads"]
    pub fn ts_free_worker_threads();
}
extern "C" {
    #[link_name = "\u{1}_ts_free_id"]
    pub fn ts_free_id(id: ts_rsrc_id);
}
pub type tsrm_thread_begin_func_t =
    ::std::option::Option<unsafe extern "C" fn(thread_id: pthread_t)>;
pub type tsrm_thread_end_func_t = ::std::option::Option<unsafe extern "C" fn(thread_id: pthread_t)>;
pub type tsrm_shutdown_func_t = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_tsrm_error"]
    pub fn tsrm_error(
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_error_set"]
    pub fn tsrm_error_set(
        level: ::std::os::raw::c_int,
        debug_filename: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_tsrm_thread_id"]
    pub fn tsrm_thread_id() -> pthread_t;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_mutex_alloc"]
    pub fn tsrm_mutex_alloc() -> *mut pthread_mutex_t;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_mutex_free"]
    pub fn tsrm_mutex_free(mutexp: *mut pthread_mutex_t);
}
extern "C" {
    #[link_name = "\u{1}_tsrm_mutex_lock"]
    pub fn tsrm_mutex_lock(mutexp: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_mutex_unlock"]
    pub fn tsrm_mutex_unlock(mutexp: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_sigmask"]
    pub fn tsrm_sigmask(
        how: ::std::os::raw::c_int,
        set: *const sigset_t,
        oldset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_set_new_thread_begin_handler"]
    pub fn tsrm_set_new_thread_begin_handler(
        new_thread_begin_handler: tsrm_thread_begin_func_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_set_new_thread_end_handler"]
    pub fn tsrm_set_new_thread_end_handler(
        new_thread_end_handler: tsrm_thread_end_func_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_set_shutdown_handler"]
    pub fn tsrm_set_shutdown_handler(
        shutdown_handler: tsrm_shutdown_func_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_new_interpreter_context"]
    pub fn tsrm_new_interpreter_context() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_set_interpreter_context"]
    pub fn tsrm_set_interpreter_context(
        new_ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_free_interpreter_context"]
    pub fn tsrm_free_interpreter_context(context: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_tsrm_get_ls_cache"]
    pub fn tsrm_get_ls_cache() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_is_main_thread"]
    pub fn tsrm_is_main_thread() -> u8;
}
pub type va_list = __darwin_va_list;
extern "C" {
    #[link_name = "\u{1}_renameat"]
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renamex_np"]
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renameatx_np"]
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
impl Default for __sbuf {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
impl Default for __sFILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "\u{1}___stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_clearerr"]
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_fclose"]
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_feof"]
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ferror"]
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflush"]
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetc"]
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetpos"]
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgets"]
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fprintf"]
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputc"]
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputs"]
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_freopen"]
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fscanf"]
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fseek"]
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetpos"]
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftell"]
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_getc"]
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gets"]
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_perror"]
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_printf"]
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc"]
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar"]
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_puts"]
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_remove"]
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewind"]
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_scanf"]
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuf"]
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setvbuf"]
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sprintf"]
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sscanf"]
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_tmpnam"]
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ungetc"]
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfprintf"]
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vprintf"]
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsprintf"]
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid"]
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fdopen"]
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fileno"]
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pclose"]
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_popen"]
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___srget"]
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___svfscanf"]
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___swbuf"]
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flockfile"]
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_ftrylockfile"]
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funlockfile"]
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_getc_unlocked"]
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc_unlocked"]
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar_unlocked"]
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getw"]
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putw"]
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftello"]
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_snprintf"]
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfscanf"]
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vscanf"]
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsnprintf"]
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsscanf"]
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dprintf"]
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vdprintf"]
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdelim"]
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_getline"]
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_fmemopen"]
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_open_memstream"]
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_asprintf"]
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid_r"]
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fgetln"]
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fmtcheck"]
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fpurge"]
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuffer"]
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlinebuf"]
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vasprintf"]
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zopen"]
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_funopen"]
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___assert_rtn"]
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}___eprintf"]
    pub fn __eprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dl_info() {
    assert_eq!(
        ::std::mem::size_of::<dl_info>(),
        32usize,
        concat!("Size of: ", stringify!(dl_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dl_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dl_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_fbase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_fbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_sname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_saddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_saddr)
        )
    );
}
impl Default for dl_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Dl_info = dl_info;
extern "C" {
    #[link_name = "\u{1}_dladdr"]
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dlclose"]
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dlerror"]
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_dlopen"]
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dlsym"]
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dlopen_preflight"]
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
pub type zend_long = i64;
pub type zend_ulong = u64;
pub type zend_off_t = i64;
pub const long_min_digits: &'static [u8; 20usize] = b"9223372036854775808\0";
pub type zend_bool = ::std::os::raw::c_uchar;
pub type zend_uchar = ::std::os::raw::c_uchar;
pub const ZEND_RESULT_CODE_SUCCESS: ZEND_RESULT_CODE = 0;
pub const ZEND_RESULT_CODE_FAILURE: ZEND_RESULT_CODE = -1;
pub type ZEND_RESULT_CODE = i32;
pub type zend_intptr_t = isize;
pub type zend_uintptr_t = usize;
pub type zend_object_handlers = _zend_object_handlers;
pub type zend_class_entry = _zend_class_entry;
pub type zend_function = _zend_function;
pub type zend_execute_data = _zend_execute_data;
pub type zval = _zval_struct;
pub type zend_refcounted = _zend_refcounted;
pub type zend_string = _zend_string;
pub type zend_array = _zend_array;
pub type zend_object = _zend_object;
pub type zend_resource = _zend_resource;
pub type zend_reference = _zend_reference;
pub type zend_ast_ref = _zend_ast_ref;
pub type zend_ast = _zend_ast;
pub type compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
pub type swap_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
>;
pub type sort_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: compare_func_t,
        arg5: swap_func_t,
    ),
>;
pub type dtor_func_t = ::std::option::Option<unsafe extern "C" fn(pDest: *mut zval)>;
pub type copy_ctor_func_t = ::std::option::Option<unsafe extern "C" fn(pElement: *mut zval)>;
pub type zend_type = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_value {
    pub lval: zend_long,
    pub dval: f64,
    pub counted: *mut zend_refcounted,
    pub str: *mut zend_string,
    pub arr: *mut zend_array,
    pub obj: *mut zend_object,
    pub res: *mut zend_resource,
    pub ref_: *mut zend_reference,
    pub ast: *mut zend_ast_ref,
    pub zv: *mut zval,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ce: *mut zend_class_entry,
    pub func: *mut zend_function,
    pub ww: _zend_value__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_value__bindgen_ty_1 {
    pub w1: u32,
    pub w2: u32,
}
#[test]
fn bindgen_test_layout__zend_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value__bindgen_ty_1>())).w1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value__bindgen_ty_1>())).w2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w2)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_value() {
    assert_eq!(
        ::std::mem::size_of::<_zend_value>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).lval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(lval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).dval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(dval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).counted as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(counted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).arr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).zv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(zv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ce as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ww as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ww)
        )
    );
}
impl Default for _zend_value {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_value = _zend_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct {
    pub value: zend_value,
    pub u1: _zval_struct__bindgen_ty_1,
    pub u2: _zval_struct__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1 {
    pub v: _zval_struct__bindgen_ty_1__bindgen_ty_1,
    pub type_info: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zval_struct__bindgen_ty_1__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub type_flags: zend_uchar,
    pub const_flags: zend_uchar,
    pub reserved: zend_uchar,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).type_flags
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).const_flags
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(const_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1>())).type_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(type_info)
        )
    );
}
impl Default for _zval_struct__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_2 {
    pub next: u32,
    pub cache_slot: u32,
    pub lineno: u32,
    pub num_args: u32,
    pub fe_pos: u32,
    pub fe_iter_idx: u32,
    pub access_flags: u32,
    pub property_guard: u32,
    pub extra: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).cache_slot as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(cache_slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).lineno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).num_args as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).fe_pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).fe_iter_idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_iter_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).access_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).property_guard as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(property_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).extra as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for _zval_struct__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zval_struct() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct>(),
        16usize,
        concat!("Size of: ", stringify!(_zval_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_zval_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).u1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(u1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).u2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(u2)
        )
    );
}
impl Default for _zval_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted_h {
    pub refcount: u32,
    pub u: _zend_refcounted_h__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_refcounted_h__bindgen_ty_1 {
    pub v: _zend_refcounted_h__bindgen_ty_1__bindgen_ty_1,
    pub type_info: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_refcounted_h__bindgen_ty_1__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub flags: zend_uchar,
    pub gc_info: u16,
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).flags
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).gc_info
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gc_info)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_refcounted_h__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1>())).v as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1>())).type_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(type_info)
        )
    );
}
impl Default for _zend_refcounted_h__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_refcounted_h() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted_h>())).refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted_h>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(u)
        )
    );
}
impl Default for _zend_refcounted_h {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_refcounted_h = _zend_refcounted_h;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_refcounted() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted),
            "::",
            stringify!(gc)
        )
    );
}
impl Default for _zend_refcounted {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_string {
    pub gc: zend_refcounted_h,
    pub h: zend_ulong,
    pub len: usize,
    pub val: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_string() {
    assert_eq!(
        ::std::mem::size_of::<_zend_string>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_string))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).h as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(val)
        )
    );
}
impl Default for _zend_string {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Bucket {
    pub val: zval,
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__Bucket() {
    assert_eq!(
        ::std::mem::size_of::<_Bucket>(),
        32usize,
        concat!("Size of: ", stringify!(_Bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<_Bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_Bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).h as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(key)
        )
    );
}
impl Default for _Bucket {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Bucket = _Bucket;
pub type HashTable = _zend_array;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_array {
    pub gc: zend_refcounted_h,
    pub u: _zend_array__bindgen_ty_1,
    pub nTableMask: u32,
    pub arData: *mut Bucket,
    pub nNumUsed: u32,
    pub nNumOfElements: u32,
    pub nTableSize: u32,
    pub nInternalPointer: u32,
    pub nNextFreeElement: zend_long,
    pub pDestructor: dtor_func_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_1 {
    pub v: _zend_array__bindgen_ty_1__bindgen_ty_1,
    pub flags: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_array__bindgen_ty_1__bindgen_ty_1 {
    pub flags: zend_uchar,
    pub nApplyCount: zend_uchar,
    pub nIteratorsCount: zend_uchar,
    pub consistency: zend_uchar,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).nApplyCount
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nApplyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).nIteratorsCount
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nIteratorsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).consistency
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(consistency)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array__bindgen_ty_1>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array__bindgen_ty_1>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for _zend_array__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_array() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_array))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nTableMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).arData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(arData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNumUsed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNumOfElements as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumOfElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nTableSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nInternalPointer as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nInternalPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNextFreeElement as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNextFreeElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).pDestructor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(pDestructor)
        )
    );
}
impl Default for _zend_array {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type HashPosition = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HashTableIterator {
    pub ht: *mut HashTable,
    pub pos: HashPosition,
}
#[test]
fn bindgen_test_layout__HashTableIterator() {
    assert_eq!(
        ::std::mem::size_of::<_HashTableIterator>(),
        16usize,
        concat!("Size of: ", stringify!(_HashTableIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<_HashTableIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_HashTableIterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HashTableIterator>())).ht as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HashTableIterator>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(pos)
        )
    );
}
impl Default for _HashTableIterator {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type HashTableIterator = _HashTableIterator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object {
    pub gc: zend_refcounted_h,
    pub handle: u32,
    pub ce: *mut zend_class_entry,
    pub handlers: *const zend_object_handlers,
    pub properties: *mut HashTable,
    pub properties_table: [zval; 1usize],
}
#[test]
fn bindgen_test_layout__zend_object() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).ce as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).handlers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).properties as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).properties_table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties_table)
        )
    );
}
impl Default for _zend_object {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_resource {
    pub gc: zend_refcounted_h,
    pub handle: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_resource() {
    assert_eq!(
        ::std::mem::size_of::<_zend_resource>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_resource))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_resource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for _zend_resource {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_reference {
    pub gc: zend_refcounted_h,
    pub val: zval,
}
#[test]
fn bindgen_test_layout__zend_reference() {
    assert_eq!(
        ::std::mem::size_of::<_zend_reference>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_reference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_reference>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_reference>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(val)
        )
    );
}
impl Default for _zend_reference {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_ref {
    pub gc: zend_refcounted_h,
    pub ast: *mut zend_ast,
}
#[test]
fn bindgen_test_layout__zend_ast_ref() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_ref>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ast_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_ref>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_ref),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_ref>())).ast as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_ref),
            "::",
            stringify!(ast)
        )
    );
}
impl Default for _zend_ast_ref {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_leak_info {
    pub addr: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub filename: *const ::std::os::raw::c_char,
    pub orig_filename: *const ::std::os::raw::c_char,
    pub lineno: u32,
    pub orig_lineno: u32,
}
#[test]
fn bindgen_test_layout__zend_leak_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_leak_info>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_leak_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_leak_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_leak_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).orig_filename as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(orig_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).lineno as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_leak_info>())).orig_lineno as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(orig_lineno)
        )
    );
}
impl Default for _zend_leak_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_leak_info = _zend_leak_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_debug_info {
    pub size: usize,
    pub filename: *const ::std::os::raw::c_char,
    pub orig_filename: *const ::std::os::raw::c_char,
    pub lineno: u32,
    pub orig_lineno: u32,
}
#[test]
fn bindgen_test_layout__zend_mm_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_mm_debug_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_mm_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mm_debug_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mm_debug_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_debug_info>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_debug_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_debug_info>())).filename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_debug_info),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_mm_debug_info>())).orig_filename as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_debug_info),
            "::",
            stringify!(orig_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_debug_info>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_debug_info),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_debug_info>())).orig_lineno as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_debug_info),
            "::",
            stringify!(orig_lineno)
        )
    );
}
impl Default for _zend_mm_debug_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_mm_debug_info = _zend_mm_debug_info;
extern "C" {
    #[link_name = "\u{1}_zend_strndup"]
    pub fn zend_strndup(
        s: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__emalloc"]
    pub fn _emalloc(
        size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__safe_emalloc"]
    pub fn _safe_emalloc(
        nmemb: usize,
        size: usize,
        offset: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__safe_malloc"]
    pub fn _safe_malloc(nmemb: usize, size: usize, offset: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__efree"]
    pub fn _efree(
        ptr: *mut ::std::os::raw::c_void,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__ecalloc"]
    pub fn _ecalloc(
        nmemb: usize,
        size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__erealloc"]
    pub fn _erealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__erealloc2"]
    pub fn _erealloc2(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        copy_size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__safe_erealloc"]
    pub fn _safe_erealloc(
        ptr: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        offset: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__safe_realloc"]
    pub fn _safe_realloc(
        ptr: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__estrdup"]
    pub fn _estrdup(
        s: *const ::std::os::raw::c_char,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__estrndup"]
    pub fn _estrndup(
        s: *const ::std::os::raw::c_char,
        length: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__zend_mem_block_size"]
    pub fn _zend_mem_block_size(
        ptr: *mut ::std::os::raw::c_void,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}___zend_malloc"]
    pub fn __zend_malloc(len: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}___zend_calloc"]
    pub fn __zend_calloc(nmemb: usize, len: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}___zend_realloc"]
    pub fn __zend_realloc(
        p: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_memory_limit"]
    pub fn zend_set_memory_limit(memory_limit: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_start_memory_manager"]
    pub fn start_memory_manager();
}
extern "C" {
    #[link_name = "\u{1}_shutdown_memory_manager"]
    pub fn shutdown_memory_manager(
        silent: ::std::os::raw::c_int,
        full_shutdown: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_is_zend_mm"]
    pub fn is_zend_mm() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_memory_usage"]
    pub fn zend_memory_usage(real_usage: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_memory_peak_usage"]
    pub fn zend_memory_peak_usage(real_usage: ::std::os::raw::c_int) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_heap {
    _unused: [u8; 0],
}
pub type zend_mm_heap = _zend_mm_heap;
extern "C" {
    #[link_name = "\u{1}_zend_mm_startup"]
    pub fn zend_mm_startup() -> *mut zend_mm_heap;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_shutdown"]
    pub fn zend_mm_shutdown(
        heap: *mut zend_mm_heap,
        full_shutdown: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__zend_mm_alloc"]
    pub fn _zend_mm_alloc(
        heap: *mut zend_mm_heap,
        size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__zend_mm_free"]
    pub fn _zend_mm_free(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zend_mm_realloc"]
    pub fn _zend_mm_realloc(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__zend_mm_realloc2"]
    pub fn _zend_mm_realloc2(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        size: usize,
        copy_size: usize,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__zend_mm_block_size"]
    pub fn _zend_mm_block_size(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_set_heap"]
    pub fn zend_mm_set_heap(new_heap: *mut zend_mm_heap) -> *mut zend_mm_heap;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_get_heap"]
    pub fn zend_mm_get_heap() -> *mut zend_mm_heap;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_gc"]
    pub fn zend_mm_gc(heap: *mut zend_mm_heap) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_is_custom_heap"]
    pub fn zend_mm_is_custom_heap(new_heap: *mut zend_mm_heap) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_set_custom_handlers"]
    pub fn zend_mm_set_custom_handlers(
        heap: *mut zend_mm_heap,
        _malloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        _free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        _realloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)
                -> *mut ::std::os::raw::c_void,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_get_custom_handlers"]
    pub fn zend_mm_get_custom_handlers(
        heap: *mut zend_mm_heap,
        _malloc: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        _free: *mut ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        _realloc: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize)
                -> *mut ::std::os::raw::c_void,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_set_custom_debug_handlers"]
    pub fn zend_mm_set_custom_debug_handlers(
        heap: *mut zend_mm_heap,
        _malloc: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                __zend_filename: *const ::std::os::raw::c_char,
                __zend_lineno: u32,
                __zend_orig_filename: *const ::std::os::raw::c_char,
                __zend_orig_lineno: u32,
            ) -> *mut ::std::os::raw::c_void,
        >,
        _free: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                __zend_filename: *const ::std::os::raw::c_char,
                __zend_lineno: u32,
                __zend_orig_filename: *const ::std::os::raw::c_char,
                __zend_orig_lineno: u32,
            ),
        >,
        _realloc: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                __zend_filename: *const ::std::os::raw::c_char,
                __zend_lineno: u32,
                __zend_orig_filename: *const ::std::os::raw::c_char,
                __zend_orig_lineno: u32,
            ) -> *mut ::std::os::raw::c_void,
        >,
    );
}
pub type zend_mm_storage = _zend_mm_storage;
pub type zend_mm_chunk_alloc_t = ::std::option::Option<
    unsafe extern "C" fn(storage: *mut zend_mm_storage, size: usize, alignment: usize)
        -> *mut ::std::os::raw::c_void,
>;
pub type zend_mm_chunk_free_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        size: usize,
    ),
>;
pub type zend_mm_chunk_truncate_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        old_size: usize,
        new_size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_mm_chunk_extend_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        old_size: usize,
        new_size: usize,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_handlers {
    pub chunk_alloc: zend_mm_chunk_alloc_t,
    pub chunk_free: zend_mm_chunk_free_t,
    pub chunk_truncate: zend_mm_chunk_truncate_t,
    pub chunk_extend: zend_mm_chunk_extend_t,
}
#[test]
fn bindgen_test_layout__zend_mm_handlers() {
    assert_eq!(
        ::std::mem::size_of::<_zend_mm_handlers>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_mm_handlers))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mm_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mm_handlers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_handlers>())).chunk_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_handlers>())).chunk_free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_mm_handlers>())).chunk_truncate as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_handlers>())).chunk_extend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_extend)
        )
    );
}
impl Default for _zend_mm_handlers {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_mm_handlers = _zend_mm_handlers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_storage {
    pub handlers: zend_mm_handlers,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_mm_storage() {
    assert_eq!(
        ::std::mem::size_of::<_zend_mm_storage>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_mm_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mm_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mm_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_storage>())).handlers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_storage),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mm_storage>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_storage),
            "::",
            stringify!(data)
        )
    );
}
impl Default for _zend_mm_storage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_get_storage"]
    pub fn zend_mm_get_storage(heap: *mut zend_mm_heap) -> *mut zend_mm_storage;
}
extern "C" {
    #[link_name = "\u{1}_zend_mm_startup_ex"]
    pub fn zend_mm_startup_ex(
        handlers: *const zend_mm_handlers,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
    ) -> *mut zend_mm_heap;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_llist_element {
    pub next: *mut _zend_llist_element,
    pub prev: *mut _zend_llist_element,
    pub data: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_llist_element() {
    assert_eq!(
        ::std::mem::size_of::<_zend_llist_element>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_llist_element))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_llist_element>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_llist_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist_element>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist_element>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist_element>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(data)
        )
    );
}
impl Default for _zend_llist_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_llist_element = _zend_llist_element;
pub type llist_dtor_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type llist_compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut *const zend_llist_element,
        arg2: *mut *const zend_llist_element,
    ) -> ::std::os::raw::c_int,
>;
pub type llist_apply_with_args_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        num_args: ::std::os::raw::c_int,
        args: *mut __va_list_tag,
    ),
>;
pub type llist_apply_with_arg_func_t = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, arg: *mut ::std::os::raw::c_void),
>;
pub type llist_apply_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_llist {
    pub head: *mut zend_llist_element,
    pub tail: *mut zend_llist_element,
    pub count: usize,
    pub size: usize,
    pub dtor: llist_dtor_func_t,
    pub persistent: ::std::os::raw::c_uchar,
    pub traverse_ptr: *mut zend_llist_element,
}
#[test]
fn bindgen_test_layout__zend_llist() {
    assert_eq!(
        ::std::mem::size_of::<_zend_llist>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_llist))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_llist>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_llist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).tail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).dtor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).persistent as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(persistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_llist>())).traverse_ptr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(traverse_ptr)
        )
    );
}
impl Default for _zend_llist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_llist = _zend_llist;
pub type zend_llist_position = *mut zend_llist_element;
extern "C" {
    #[link_name = "\u{1}_zend_llist_init"]
    pub fn zend_llist_init(
        l: *mut zend_llist,
        size: usize,
        dtor: llist_dtor_func_t,
        persistent: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_add_element"]
    pub fn zend_llist_add_element(l: *mut zend_llist, element: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_prepend_element"]
    pub fn zend_llist_prepend_element(l: *mut zend_llist, element: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_del_element"]
    pub fn zend_llist_del_element(
        l: *mut zend_llist,
        element: *mut ::std::os::raw::c_void,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                element1: *mut ::std::os::raw::c_void,
                element2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_destroy"]
    pub fn zend_llist_destroy(l: *mut zend_llist);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_clean"]
    pub fn zend_llist_clean(l: *mut zend_llist);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_remove_tail"]
    pub fn zend_llist_remove_tail(l: *mut zend_llist);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_copy"]
    pub fn zend_llist_copy(dst: *mut zend_llist, src: *mut zend_llist);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_apply"]
    pub fn zend_llist_apply(l: *mut zend_llist, func: llist_apply_func_t);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_apply_with_del"]
    pub fn zend_llist_apply_with_del(
        l: *mut zend_llist,
        func: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_apply_with_argument"]
    pub fn zend_llist_apply_with_argument(
        l: *mut zend_llist,
        func: llist_apply_with_arg_func_t,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_apply_with_arguments"]
    pub fn zend_llist_apply_with_arguments(
        l: *mut zend_llist,
        func: llist_apply_with_args_func_t,
        num_args: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_count"]
    pub fn zend_llist_count(l: *mut zend_llist) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_sort"]
    pub fn zend_llist_sort(l: *mut zend_llist, comp_func: llist_compare_func_t);
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_get_first_ex"]
    pub fn zend_llist_get_first_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_get_last_ex"]
    pub fn zend_llist_get_last_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_get_next_ex"]
    pub fn zend_llist_get_next_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_llist_get_prev_ex"]
    pub fn zend_llist_get_prev_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
pub type zend_string_copy_storage_func_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type zend_new_interned_string_func_t =
    ::std::option::Option<unsafe extern "C" fn(str: *mut zend_string) -> *mut zend_string>;
extern "C" {
    #[link_name = "\u{1}_zend_new_interned_string"]
    pub static mut zend_new_interned_string: zend_new_interned_string_func_t;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_func"]
    pub fn zend_hash_func(str: *const ::std::os::raw::c_char, len: usize) -> zend_ulong;
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_init"]
    pub fn zend_interned_strings_init();
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_dtor"]
    pub fn zend_interned_strings_dtor();
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_activate"]
    pub fn zend_interned_strings_activate();
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_deactivate"]
    pub fn zend_interned_strings_deactivate();
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_string_find_permanent"]
    pub fn zend_interned_string_find_permanent(str: *mut zend_string) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_set_request_storage_handler"]
    pub fn zend_interned_strings_set_request_storage_handler(
        handler: zend_new_interned_string_func_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_set_permanent_storage_copy_handler"]
    pub fn zend_interned_strings_set_permanent_storage_copy_handler(
        handler: zend_string_copy_storage_func_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_interned_strings_switch_storage"]
    pub fn zend_interned_strings_switch_storage();
}
extern "C" {
    #[link_name = "\u{1}_zend_empty_string"]
    pub static mut zend_empty_string: *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_one_char_string"]
    pub static mut zend_one_char_string: [*mut zend_string; 256usize];
}
extern "C" {
    #[link_name = "\u{1}_zend_known_strings"]
    pub static mut zend_known_strings: *mut *mut zend_string;
}
pub const _zend_known_string_id_ZEND_STR_FILE: _zend_known_string_id = 0;
pub const _zend_known_string_id_ZEND_STR_LINE: _zend_known_string_id = 1;
pub const _zend_known_string_id_ZEND_STR_FUNCTION: _zend_known_string_id = 2;
pub const _zend_known_string_id_ZEND_STR_CLASS: _zend_known_string_id = 3;
pub const _zend_known_string_id_ZEND_STR_OBJECT: _zend_known_string_id = 4;
pub const _zend_known_string_id_ZEND_STR_TYPE: _zend_known_string_id = 5;
pub const _zend_known_string_id_ZEND_STR_OBJECT_OPERATOR: _zend_known_string_id = 6;
pub const _zend_known_string_id_ZEND_STR_PAAMAYIM_NEKUDOTAYIM: _zend_known_string_id = 7;
pub const _zend_known_string_id_ZEND_STR_ARGS: _zend_known_string_id = 8;
pub const _zend_known_string_id_ZEND_STR_UNKNOWN: _zend_known_string_id = 9;
pub const _zend_known_string_id_ZEND_STR_EVAL: _zend_known_string_id = 10;
pub const _zend_known_string_id_ZEND_STR_INCLUDE: _zend_known_string_id = 11;
pub const _zend_known_string_id_ZEND_STR_REQUIRE: _zend_known_string_id = 12;
pub const _zend_known_string_id_ZEND_STR_INCLUDE_ONCE: _zend_known_string_id = 13;
pub const _zend_known_string_id_ZEND_STR_REQUIRE_ONCE: _zend_known_string_id = 14;
pub const _zend_known_string_id_ZEND_STR_SCALAR: _zend_known_string_id = 15;
pub const _zend_known_string_id_ZEND_STR_ERROR_REPORTING: _zend_known_string_id = 16;
pub const _zend_known_string_id_ZEND_STR_STATIC: _zend_known_string_id = 17;
pub const _zend_known_string_id_ZEND_STR_THIS: _zend_known_string_id = 18;
pub const _zend_known_string_id_ZEND_STR_VALUE: _zend_known_string_id = 19;
pub const _zend_known_string_id_ZEND_STR_KEY: _zend_known_string_id = 20;
pub const _zend_known_string_id_ZEND_STR_MAGIC_AUTOLOAD: _zend_known_string_id = 21;
pub const _zend_known_string_id_ZEND_STR_MAGIC_INVOKE: _zend_known_string_id = 22;
pub const _zend_known_string_id_ZEND_STR_PREVIOUS: _zend_known_string_id = 23;
pub const _zend_known_string_id_ZEND_STR_CODE: _zend_known_string_id = 24;
pub const _zend_known_string_id_ZEND_STR_MESSAGE: _zend_known_string_id = 25;
pub const _zend_known_string_id_ZEND_STR_SEVERITY: _zend_known_string_id = 26;
pub const _zend_known_string_id_ZEND_STR_STRING: _zend_known_string_id = 27;
pub const _zend_known_string_id_ZEND_STR_TRACE: _zend_known_string_id = 28;
pub const _zend_known_string_id_ZEND_STR_SCHEME: _zend_known_string_id = 29;
pub const _zend_known_string_id_ZEND_STR_HOST: _zend_known_string_id = 30;
pub const _zend_known_string_id_ZEND_STR_PORT: _zend_known_string_id = 31;
pub const _zend_known_string_id_ZEND_STR_USER: _zend_known_string_id = 32;
pub const _zend_known_string_id_ZEND_STR_PASS: _zend_known_string_id = 33;
pub const _zend_known_string_id_ZEND_STR_PATH: _zend_known_string_id = 34;
pub const _zend_known_string_id_ZEND_STR_QUERY: _zend_known_string_id = 35;
pub const _zend_known_string_id_ZEND_STR_FRAGMENT: _zend_known_string_id = 36;
pub const _zend_known_string_id_ZEND_STR_NULL: _zend_known_string_id = 37;
pub const _zend_known_string_id_ZEND_STR_BOOLEAN: _zend_known_string_id = 38;
pub const _zend_known_string_id_ZEND_STR_INTEGER: _zend_known_string_id = 39;
pub const _zend_known_string_id_ZEND_STR_DOUBLE: _zend_known_string_id = 40;
pub const _zend_known_string_id_ZEND_STR_ARRAY: _zend_known_string_id = 41;
pub const _zend_known_string_id_ZEND_STR_RESOURCE: _zend_known_string_id = 42;
pub const _zend_known_string_id_ZEND_STR_CLOSED_RESOURCE: _zend_known_string_id = 43;
pub const _zend_known_string_id_ZEND_STR_LAST_KNOWN: _zend_known_string_id = 44;
pub type _zend_known_string_id = u32;
pub use self::_zend_known_string_id as zend_known_string_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_hash_key {
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_hash_key() {
    assert_eq!(
        ::std::mem::size_of::<_zend_hash_key>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_hash_key))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_hash_key>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_hash_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_hash_key>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_hash_key),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_hash_key>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_hash_key),
            "::",
            stringify!(key)
        )
    );
}
impl Default for _zend_hash_key {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_hash_key = _zend_hash_key;
pub type merge_checker_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        target_ht: *mut HashTable,
        source_data: *mut zval,
        hash_key: *mut zend_hash_key,
        pParam: *mut ::std::os::raw::c_void,
    ) -> zend_bool,
>;
extern "C" {
    #[link_name = "\u{1}__zend_hash_init"]
    pub fn _zend_hash_init(
        ht: *mut HashTable,
        nSize: u32,
        pDestructor: dtor_func_t,
        persistent: zend_bool,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_init_ex"]
    pub fn _zend_hash_init_ex(
        ht: *mut HashTable,
        nSize: u32,
        pDestructor: dtor_func_t,
        persistent: zend_bool,
        bApplyProtection: zend_bool,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_destroy"]
    pub fn zend_hash_destroy(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_clean"]
    pub fn zend_hash_clean(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_real_init"]
    pub fn zend_hash_real_init(ht: *mut HashTable, packed: zend_bool);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_packed_to_hash"]
    pub fn zend_hash_packed_to_hash(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_to_packed"]
    pub fn zend_hash_to_packed(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_extend"]
    pub fn zend_hash_extend(ht: *mut HashTable, nSize: u32, packed: zend_bool);
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_add_or_update"]
    pub fn _zend_hash_add_or_update(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        flag: u32,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_update"]
    pub fn _zend_hash_update(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_update_ind"]
    pub fn _zend_hash_update_ind(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_add"]
    pub fn _zend_hash_add(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_add_new"]
    pub fn _zend_hash_add_new(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_str_add_or_update"]
    pub fn _zend_hash_str_add_or_update(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        flag: u32,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_str_update"]
    pub fn _zend_hash_str_update(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_str_update_ind"]
    pub fn _zend_hash_str_update_ind(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_str_add"]
    pub fn _zend_hash_str_add(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_str_add_new"]
    pub fn _zend_hash_str_add_new(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_index_add_or_update"]
    pub fn _zend_hash_index_add_or_update(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
        flag: u32,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_index_add"]
    pub fn _zend_hash_index_add(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_index_add_new"]
    pub fn _zend_hash_index_add_new(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_index_update"]
    pub fn _zend_hash_index_update(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_next_index_insert"]
    pub fn _zend_hash_next_index_insert(
        ht: *mut HashTable,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_next_index_insert_new"]
    pub fn _zend_hash_next_index_insert_new(
        ht: *mut HashTable,
        pData: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_index_add_empty_element"]
    pub fn zend_hash_index_add_empty_element(ht: *mut HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_add_empty_element"]
    pub fn zend_hash_add_empty_element(ht: *mut HashTable, key: *mut zend_string) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_str_add_empty_element"]
    pub fn zend_hash_str_add_empty_element(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zval;
}
pub type apply_func_t =
    ::std::option::Option<unsafe extern "C" fn(pDest: *mut zval) -> ::std::os::raw::c_int>;
pub type apply_func_arg_t = ::std::option::Option<
    unsafe extern "C" fn(pDest: *mut zval, argument: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
pub type apply_func_args_t = ::std::option::Option<
    unsafe extern "C" fn(
        pDest: *mut zval,
        num_args: ::std::os::raw::c_int,
        args: *mut __va_list_tag,
        hash_key: *mut zend_hash_key,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_zend_hash_graceful_destroy"]
    pub fn zend_hash_graceful_destroy(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_graceful_reverse_destroy"]
    pub fn zend_hash_graceful_reverse_destroy(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_apply"]
    pub fn zend_hash_apply(ht: *mut HashTable, apply_func: apply_func_t);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_apply_with_argument"]
    pub fn zend_hash_apply_with_argument(
        ht: *mut HashTable,
        apply_func: apply_func_arg_t,
        arg1: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_apply_with_arguments"]
    pub fn zend_hash_apply_with_arguments(
        ht: *mut HashTable,
        apply_func: apply_func_args_t,
        arg1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_reverse_apply"]
    pub fn zend_hash_reverse_apply(ht: *mut HashTable, apply_func: apply_func_t);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_del"]
    pub fn zend_hash_del(ht: *mut HashTable, key: *mut zend_string) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_del_ind"]
    pub fn zend_hash_del_ind(ht: *mut HashTable, key: *mut zend_string) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_str_del"]
    pub fn zend_hash_str_del(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_str_del_ind"]
    pub fn zend_hash_str_del_ind(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_index_del"]
    pub fn zend_hash_index_del(ht: *mut HashTable, h: zend_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_del_bucket"]
    pub fn zend_hash_del_bucket(ht: *mut HashTable, p: *mut Bucket);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_find"]
    pub fn zend_hash_find(ht: *const HashTable, key: *mut zend_string) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_str_find"]
    pub fn zend_hash_str_find(
        ht: *const HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_index_find"]
    pub fn zend_hash_index_find(ht: *const HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_index_find"]
    pub fn _zend_hash_index_find(ht: *const HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_exists"]
    pub fn zend_hash_exists(ht: *const HashTable, key: *mut zend_string) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_str_exists"]
    pub fn zend_hash_str_exists(
        ht: *const HashTable,
        str: *const ::std::os::raw::c_char,
        len: usize,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_index_exists"]
    pub fn zend_hash_index_exists(ht: *const HashTable, h: zend_ulong) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_move_forward_ex"]
    pub fn zend_hash_move_forward_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_move_backwards_ex"]
    pub fn zend_hash_move_backwards_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_get_current_key_ex"]
    pub fn zend_hash_get_current_key_ex(
        ht: *const HashTable,
        str_index: *mut *mut zend_string,
        num_index: *mut zend_ulong,
        pos: *mut HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_get_current_key_zval_ex"]
    pub fn zend_hash_get_current_key_zval_ex(
        ht: *const HashTable,
        key: *mut zval,
        pos: *mut HashPosition,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_get_current_key_type_ex"]
    pub fn zend_hash_get_current_key_type_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_get_current_data_ex"]
    pub fn zend_hash_get_current_data_ex(ht: *mut HashTable, pos: *mut HashPosition) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_internal_pointer_reset_ex"]
    pub fn zend_hash_internal_pointer_reset_ex(ht: *mut HashTable, pos: *mut HashPosition);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_internal_pointer_end_ex"]
    pub fn zend_hash_internal_pointer_end_ex(ht: *mut HashTable, pos: *mut HashPosition);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_copy"]
    pub fn zend_hash_copy(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
    );
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_merge"]
    pub fn _zend_hash_merge(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
        overwrite: zend_bool,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_merge_ex"]
    pub fn zend_hash_merge_ex(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
        pMergeSource: merge_checker_func_t,
        pParam: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_bucket_swap"]
    pub fn zend_hash_bucket_swap(p: *mut Bucket, q: *mut Bucket);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_bucket_renum_swap"]
    pub fn zend_hash_bucket_renum_swap(p: *mut Bucket, q: *mut Bucket);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_bucket_packed_swap"]
    pub fn zend_hash_bucket_packed_swap(p: *mut Bucket, q: *mut Bucket);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_compare"]
    pub fn zend_hash_compare(
        ht1: *mut HashTable,
        ht2: *mut HashTable,
        compar: compare_func_t,
        ordered: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_sort_ex"]
    pub fn zend_hash_sort_ex(
        ht: *mut HashTable,
        sort_func: sort_func_t,
        compare_func: compare_func_t,
        renumber: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_minmax"]
    pub fn zend_hash_minmax(ht: *const HashTable, compar: compare_func_t, flag: u32) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_rehash"]
    pub fn zend_hash_rehash(ht: *mut HashTable) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_array_count"]
    pub fn zend_array_count(ht: *mut HashTable) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_array_dup"]
    pub fn zend_array_dup(source: *mut HashTable) -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_zend_array_destroy"]
    pub fn zend_array_destroy(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_symtable_clean"]
    pub fn zend_symtable_clean(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_symtable_to_proptable"]
    pub fn zend_symtable_to_proptable(ht: *mut HashTable) -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_zend_proptable_to_symtable"]
    pub fn zend_proptable_to_symtable(
        ht: *mut HashTable,
        always_duplicate: zend_bool,
    ) -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}__zend_handle_numeric_str_ex"]
    pub fn _zend_handle_numeric_str_ex(
        key: *const ::std::os::raw::c_char,
        length: usize,
        idx: *mut zend_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_iterator_add"]
    pub fn zend_hash_iterator_add(ht: *mut HashTable, pos: HashPosition) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_iterator_pos"]
    pub fn zend_hash_iterator_pos(idx: u32, ht: *mut HashTable) -> HashPosition;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_iterator_pos_ex"]
    pub fn zend_hash_iterator_pos_ex(idx: u32, array: *mut zval) -> HashPosition;
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_iterator_del"]
    pub fn zend_hash_iterator_del(idx: u32);
}
extern "C" {
    #[link_name = "\u{1}_zend_hash_iterators_lower_pos"]
    pub fn zend_hash_iterators_lower_pos(ht: *mut HashTable, start: HashPosition) -> HashPosition;
}
extern "C" {
    #[link_name = "\u{1}__zend_hash_iterators_update"]
    pub fn _zend_hash_iterators_update(ht: *mut HashTable, from: HashPosition, to: HashPosition);
}
pub const _zend_ast_kind_ZEND_AST_ZVAL: _zend_ast_kind = 64;
pub const _zend_ast_kind_ZEND_AST_ZNODE: _zend_ast_kind = 65;
pub const _zend_ast_kind_ZEND_AST_FUNC_DECL: _zend_ast_kind = 66;
pub const _zend_ast_kind_ZEND_AST_CLOSURE: _zend_ast_kind = 67;
pub const _zend_ast_kind_ZEND_AST_METHOD: _zend_ast_kind = 68;
pub const _zend_ast_kind_ZEND_AST_CLASS: _zend_ast_kind = 69;
pub const _zend_ast_kind_ZEND_AST_ARG_LIST: _zend_ast_kind = 128;
pub const _zend_ast_kind_ZEND_AST_ARRAY: _zend_ast_kind = 129;
pub const _zend_ast_kind_ZEND_AST_ENCAPS_LIST: _zend_ast_kind = 130;
pub const _zend_ast_kind_ZEND_AST_EXPR_LIST: _zend_ast_kind = 131;
pub const _zend_ast_kind_ZEND_AST_STMT_LIST: _zend_ast_kind = 132;
pub const _zend_ast_kind_ZEND_AST_IF: _zend_ast_kind = 133;
pub const _zend_ast_kind_ZEND_AST_SWITCH_LIST: _zend_ast_kind = 134;
pub const _zend_ast_kind_ZEND_AST_CATCH_LIST: _zend_ast_kind = 135;
pub const _zend_ast_kind_ZEND_AST_PARAM_LIST: _zend_ast_kind = 136;
pub const _zend_ast_kind_ZEND_AST_CLOSURE_USES: _zend_ast_kind = 137;
pub const _zend_ast_kind_ZEND_AST_PROP_DECL: _zend_ast_kind = 138;
pub const _zend_ast_kind_ZEND_AST_CONST_DECL: _zend_ast_kind = 139;
pub const _zend_ast_kind_ZEND_AST_CLASS_CONST_DECL: _zend_ast_kind = 140;
pub const _zend_ast_kind_ZEND_AST_NAME_LIST: _zend_ast_kind = 141;
pub const _zend_ast_kind_ZEND_AST_TRAIT_ADAPTATIONS: _zend_ast_kind = 142;
pub const _zend_ast_kind_ZEND_AST_USE: _zend_ast_kind = 143;
pub const _zend_ast_kind_ZEND_AST_MAGIC_CONST: _zend_ast_kind = 0;
pub const _zend_ast_kind_ZEND_AST_TYPE: _zend_ast_kind = 1;
pub const _zend_ast_kind_ZEND_AST_VAR: _zend_ast_kind = 256;
pub const _zend_ast_kind_ZEND_AST_CONST: _zend_ast_kind = 257;
pub const _zend_ast_kind_ZEND_AST_UNPACK: _zend_ast_kind = 258;
pub const _zend_ast_kind_ZEND_AST_UNARY_PLUS: _zend_ast_kind = 259;
pub const _zend_ast_kind_ZEND_AST_UNARY_MINUS: _zend_ast_kind = 260;
pub const _zend_ast_kind_ZEND_AST_CAST: _zend_ast_kind = 261;
pub const _zend_ast_kind_ZEND_AST_EMPTY: _zend_ast_kind = 262;
pub const _zend_ast_kind_ZEND_AST_ISSET: _zend_ast_kind = 263;
pub const _zend_ast_kind_ZEND_AST_SILENCE: _zend_ast_kind = 264;
pub const _zend_ast_kind_ZEND_AST_SHELL_EXEC: _zend_ast_kind = 265;
pub const _zend_ast_kind_ZEND_AST_CLONE: _zend_ast_kind = 266;
pub const _zend_ast_kind_ZEND_AST_EXIT: _zend_ast_kind = 267;
pub const _zend_ast_kind_ZEND_AST_PRINT: _zend_ast_kind = 268;
pub const _zend_ast_kind_ZEND_AST_INCLUDE_OR_EVAL: _zend_ast_kind = 269;
pub const _zend_ast_kind_ZEND_AST_UNARY_OP: _zend_ast_kind = 270;
pub const _zend_ast_kind_ZEND_AST_PRE_INC: _zend_ast_kind = 271;
pub const _zend_ast_kind_ZEND_AST_PRE_DEC: _zend_ast_kind = 272;
pub const _zend_ast_kind_ZEND_AST_POST_INC: _zend_ast_kind = 273;
pub const _zend_ast_kind_ZEND_AST_POST_DEC: _zend_ast_kind = 274;
pub const _zend_ast_kind_ZEND_AST_YIELD_FROM: _zend_ast_kind = 275;
pub const _zend_ast_kind_ZEND_AST_GLOBAL: _zend_ast_kind = 276;
pub const _zend_ast_kind_ZEND_AST_UNSET: _zend_ast_kind = 277;
pub const _zend_ast_kind_ZEND_AST_RETURN: _zend_ast_kind = 278;
pub const _zend_ast_kind_ZEND_AST_LABEL: _zend_ast_kind = 279;
pub const _zend_ast_kind_ZEND_AST_REF: _zend_ast_kind = 280;
pub const _zend_ast_kind_ZEND_AST_HALT_COMPILER: _zend_ast_kind = 281;
pub const _zend_ast_kind_ZEND_AST_ECHO: _zend_ast_kind = 282;
pub const _zend_ast_kind_ZEND_AST_THROW: _zend_ast_kind = 283;
pub const _zend_ast_kind_ZEND_AST_GOTO: _zend_ast_kind = 284;
pub const _zend_ast_kind_ZEND_AST_BREAK: _zend_ast_kind = 285;
pub const _zend_ast_kind_ZEND_AST_CONTINUE: _zend_ast_kind = 286;
pub const _zend_ast_kind_ZEND_AST_DIM: _zend_ast_kind = 512;
pub const _zend_ast_kind_ZEND_AST_PROP: _zend_ast_kind = 513;
pub const _zend_ast_kind_ZEND_AST_STATIC_PROP: _zend_ast_kind = 514;
pub const _zend_ast_kind_ZEND_AST_CALL: _zend_ast_kind = 515;
pub const _zend_ast_kind_ZEND_AST_CLASS_CONST: _zend_ast_kind = 516;
pub const _zend_ast_kind_ZEND_AST_ASSIGN: _zend_ast_kind = 517;
pub const _zend_ast_kind_ZEND_AST_ASSIGN_REF: _zend_ast_kind = 518;
pub const _zend_ast_kind_ZEND_AST_ASSIGN_OP: _zend_ast_kind = 519;
pub const _zend_ast_kind_ZEND_AST_BINARY_OP: _zend_ast_kind = 520;
pub const _zend_ast_kind_ZEND_AST_GREATER: _zend_ast_kind = 521;
pub const _zend_ast_kind_ZEND_AST_GREATER_EQUAL: _zend_ast_kind = 522;
pub const _zend_ast_kind_ZEND_AST_AND: _zend_ast_kind = 523;
pub const _zend_ast_kind_ZEND_AST_OR: _zend_ast_kind = 524;
pub const _zend_ast_kind_ZEND_AST_ARRAY_ELEM: _zend_ast_kind = 525;
pub const _zend_ast_kind_ZEND_AST_NEW: _zend_ast_kind = 526;
pub const _zend_ast_kind_ZEND_AST_INSTANCEOF: _zend_ast_kind = 527;
pub const _zend_ast_kind_ZEND_AST_YIELD: _zend_ast_kind = 528;
pub const _zend_ast_kind_ZEND_AST_COALESCE: _zend_ast_kind = 529;
pub const _zend_ast_kind_ZEND_AST_STATIC: _zend_ast_kind = 530;
pub const _zend_ast_kind_ZEND_AST_WHILE: _zend_ast_kind = 531;
pub const _zend_ast_kind_ZEND_AST_DO_WHILE: _zend_ast_kind = 532;
pub const _zend_ast_kind_ZEND_AST_IF_ELEM: _zend_ast_kind = 533;
pub const _zend_ast_kind_ZEND_AST_SWITCH: _zend_ast_kind = 534;
pub const _zend_ast_kind_ZEND_AST_SWITCH_CASE: _zend_ast_kind = 535;
pub const _zend_ast_kind_ZEND_AST_DECLARE: _zend_ast_kind = 536;
pub const _zend_ast_kind_ZEND_AST_USE_TRAIT: _zend_ast_kind = 537;
pub const _zend_ast_kind_ZEND_AST_TRAIT_PRECEDENCE: _zend_ast_kind = 538;
pub const _zend_ast_kind_ZEND_AST_METHOD_REFERENCE: _zend_ast_kind = 539;
pub const _zend_ast_kind_ZEND_AST_NAMESPACE: _zend_ast_kind = 540;
pub const _zend_ast_kind_ZEND_AST_USE_ELEM: _zend_ast_kind = 541;
pub const _zend_ast_kind_ZEND_AST_TRAIT_ALIAS: _zend_ast_kind = 542;
pub const _zend_ast_kind_ZEND_AST_GROUP_USE: _zend_ast_kind = 543;
pub const _zend_ast_kind_ZEND_AST_METHOD_CALL: _zend_ast_kind = 768;
pub const _zend_ast_kind_ZEND_AST_STATIC_CALL: _zend_ast_kind = 769;
pub const _zend_ast_kind_ZEND_AST_CONDITIONAL: _zend_ast_kind = 770;
pub const _zend_ast_kind_ZEND_AST_TRY: _zend_ast_kind = 771;
pub const _zend_ast_kind_ZEND_AST_CATCH: _zend_ast_kind = 772;
pub const _zend_ast_kind_ZEND_AST_PARAM: _zend_ast_kind = 773;
pub const _zend_ast_kind_ZEND_AST_PROP_ELEM: _zend_ast_kind = 774;
pub const _zend_ast_kind_ZEND_AST_CONST_ELEM: _zend_ast_kind = 775;
pub const _zend_ast_kind_ZEND_AST_FOR: _zend_ast_kind = 1024;
pub const _zend_ast_kind_ZEND_AST_FOREACH: _zend_ast_kind = 1025;
pub type _zend_ast_kind = u32;
pub type zend_ast_kind = u16;
pub type zend_ast_attr = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub child: [*mut zend_ast; 1usize],
}
#[test]
fn bindgen_test_layout__zend_ast() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ast))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(child)
        )
    );
}
impl Default for _zend_ast {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast_list {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub children: u32,
    pub child: [*mut zend_ast; 1usize],
}
#[test]
fn bindgen_test_layout__zend_ast_list() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_list>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_ast_list))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_list>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_list>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_list>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_list>())).lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_list>())).children as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_list>())).child as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(child)
        )
    );
}
impl Default for _zend_ast_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ast_list = _zend_ast_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_zval {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub val: zval,
}
#[test]
fn bindgen_test_layout__zend_ast_zval() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_zval>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_ast_zval))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_zval>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_zval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_zval>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_zval),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_zval>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_zval),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_zval>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_zval),
            "::",
            stringify!(val)
        )
    );
}
impl Default for _zend_ast_zval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ast_zval = _zend_ast_zval;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast_decl {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub start_lineno: u32,
    pub end_lineno: u32,
    pub flags: u32,
    pub lex_pos: *mut ::std::os::raw::c_uchar,
    pub doc_comment: *mut zend_string,
    pub name: *mut zend_string,
    pub child: [*mut zend_ast; 4usize],
}
#[test]
fn bindgen_test_layout__zend_ast_decl() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_decl>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ast_decl))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_decl>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_decl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).start_lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(start_lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).end_lineno as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(end_lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).lex_pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(lex_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).doc_comment as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_decl>())).child as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(child)
        )
    );
}
impl Default for _zend_ast_decl {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ast_decl = _zend_ast_decl;
pub type zend_ast_process_t = ::std::option::Option<unsafe extern "C" fn(ast: *mut zend_ast)>;
extern "C" {
    #[link_name = "\u{1}_zend_ast_process"]
    pub static mut zend_ast_process: zend_ast_process_t;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_zval_with_lineno"]
    pub fn zend_ast_create_zval_with_lineno(
        zv: *mut zval,
        attr: zend_ast_attr,
        lineno: u32,
    ) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_zval_ex"]
    pub fn zend_ast_create_zval_ex(zv: *mut zval, attr: zend_ast_attr) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_ex"]
    pub fn zend_ast_create_ex(kind: zend_ast_kind, attr: zend_ast_attr, ...) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create"]
    pub fn zend_ast_create(kind: zend_ast_kind, ...) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_decl"]
    pub fn zend_ast_create_decl(
        kind: zend_ast_kind,
        flags: u32,
        start_lineno: u32,
        doc_comment: *mut zend_string,
        name: *mut zend_string,
        child0: *mut zend_ast,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
        child3: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_list"]
    pub fn zend_ast_create_list(init_children: u32, kind: zend_ast_kind, ...) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_list_add"]
    pub fn zend_ast_list_add(list: *mut zend_ast, op: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_evaluate"]
    pub fn zend_ast_evaluate(
        result: *mut zval,
        ast: *mut zend_ast,
        scope: *mut zend_class_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_export"]
    pub fn zend_ast_export(
        prefix: *const ::std::os::raw::c_char,
        ast: *mut zend_ast,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_copy"]
    pub fn zend_ast_copy(ast: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_destroy"]
    pub fn zend_ast_destroy(ast: *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_destroy_and_free"]
    pub fn zend_ast_destroy_and_free(ast: *mut zend_ast);
}
pub type zend_ast_apply_func =
    ::std::option::Option<unsafe extern "C" fn(ast_ptr: *mut *mut zend_ast)>;
extern "C" {
    #[link_name = "\u{1}_zend_ast_apply"]
    pub fn zend_ast_apply(ast: *mut zend_ast, fn_: zend_ast_apply_func);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _gc_root_buffer {
    pub ref_: *mut zend_refcounted,
    pub next: *mut _gc_root_buffer,
    pub prev: *mut _gc_root_buffer,
    pub refcount: u32,
}
#[test]
fn bindgen_test_layout__gc_root_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_gc_root_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_gc_root_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_gc_root_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_gc_root_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_root_buffer>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_root_buffer),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_root_buffer>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_root_buffer),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_root_buffer>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_root_buffer),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_root_buffer>())).refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_root_buffer),
            "::",
            stringify!(refcount)
        )
    );
}
impl Default for _gc_root_buffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gc_root_buffer = _gc_root_buffer;
pub type gc_additional_buffer = _gc_additional_bufer;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _gc_additional_bufer {
    pub used: u32,
    pub next: *mut gc_additional_buffer,
    pub buf: [gc_root_buffer; 126usize],
}
#[test]
fn bindgen_test_layout__gc_additional_bufer() {
    assert_eq!(
        ::std::mem::size_of::<_gc_additional_bufer>(),
        4048usize,
        concat!("Size of: ", stringify!(_gc_additional_bufer))
    );
    assert_eq!(
        ::std::mem::align_of::<_gc_additional_bufer>(),
        8usize,
        concat!("Alignment of ", stringify!(_gc_additional_bufer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_additional_bufer>())).used as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_additional_bufer),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_additional_bufer>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_additional_bufer),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_additional_bufer>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_additional_bufer),
            "::",
            stringify!(buf)
        )
    );
}
impl Default for _gc_additional_bufer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_gc_globals {
    pub gc_enabled: zend_bool,
    pub gc_active: zend_bool,
    pub gc_full: zend_bool,
    pub buf: *mut gc_root_buffer,
    pub roots: gc_root_buffer,
    pub unused: *mut gc_root_buffer,
    pub first_unused: *mut gc_root_buffer,
    pub last_unused: *mut gc_root_buffer,
    pub to_free: gc_root_buffer,
    pub next_to_free: *mut gc_root_buffer,
    pub gc_runs: u32,
    pub collected: u32,
    pub additional_buffer: *mut gc_additional_buffer,
}
#[test]
fn bindgen_test_layout__zend_gc_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_gc_globals>(),
        128usize,
        concat!("Size of: ", stringify!(_zend_gc_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_gc_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_gc_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).gc_enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(gc_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).gc_active as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(gc_active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).gc_full as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(gc_full)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).roots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(roots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).unused as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).first_unused as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(first_unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).last_unused as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(last_unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).to_free as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(to_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).next_to_free as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(next_to_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).gc_runs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(gc_runs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_gc_globals>())).collected as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(collected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_gc_globals>())).additional_buffer as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_globals),
            "::",
            stringify!(additional_buffer)
        )
    );
}
impl Default for _zend_gc_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_gc_globals = _zend_gc_globals;
extern "C" {
    #[link_name = "\u{1}_gc_globals_id"]
    pub static mut gc_globals_id: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gc_collect_cycles"]
    pub static mut gc_collect_cycles:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "\u{1}_gc_possible_root"]
    pub fn gc_possible_root(ref_: *mut zend_refcounted);
}
extern "C" {
    #[link_name = "\u{1}_gc_remove_from_buffer"]
    pub fn gc_remove_from_buffer(ref_: *mut zend_refcounted);
}
extern "C" {
    #[link_name = "\u{1}_gc_globals_ctor"]
    pub fn gc_globals_ctor();
}
extern "C" {
    #[link_name = "\u{1}_gc_globals_dtor"]
    pub fn gc_globals_dtor();
}
extern "C" {
    #[link_name = "\u{1}_gc_init"]
    pub fn gc_init();
}
extern "C" {
    #[link_name = "\u{1}_gc_reset"]
    pub fn gc_reset();
}
extern "C" {
    #[link_name = "\u{1}_zend_gc_collect_cycles"]
    pub fn zend_gc_collect_cycles() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__zval_dtor_func"]
    pub fn _zval_dtor_func(
        p: *mut zend_refcounted,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zval_copy_ctor_func"]
    pub fn _zval_copy_ctor_func(
        zvalue: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_print_variable"]
    pub fn zend_print_variable(var: *mut zval) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__zval_ptr_dtor"]
    pub fn _zval_ptr_dtor(
        zval_ptr: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zval_internal_dtor_for_ptr"]
    pub fn _zval_internal_dtor_for_ptr(
        zvalue: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zval_internal_dtor"]
    pub fn _zval_internal_dtor(
        zvalue: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zval_internal_ptr_dtor"]
    pub fn _zval_internal_ptr_dtor(
        zvalue: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__zval_dtor_wrapper"]
    pub fn _zval_dtor_wrapper(zvalue: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}__zval_ptr_dtor_wrapper"]
    pub fn _zval_ptr_dtor_wrapper(zval_ptr: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}__zval_internal_dtor_wrapper"]
    pub fn _zval_internal_dtor_wrapper(zvalue: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}__zval_internal_ptr_dtor_wrapper"]
    pub fn _zval_internal_ptr_dtor_wrapper(zvalue: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zval_add_ref"]
    pub fn zval_add_ref(p: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zval_add_ref_unref"]
    pub fn zval_add_ref_unref(p: *mut zval);
}
pub type zend_object_iterator = _zend_object_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator_funcs {
    pub dtor: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub valid: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> ::std::os::raw::c_int,
    >,
    pub get_current_data:
        ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator) -> *mut zval>,
    pub get_current_key: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, key: *mut zval),
    >,
    pub move_forward: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub rewind: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub invalidate_current:
        ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
}
#[test]
fn bindgen_test_layout__zend_object_iterator_funcs() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator_funcs>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object_iterator_funcs))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator_funcs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).dtor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).valid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).get_current_data as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).get_current_key as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).move_forward as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(move_forward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).rewind as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(rewind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).invalidate_current as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(invalidate_current)
        )
    );
}
impl Default for _zend_object_iterator_funcs {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_object_iterator_funcs = _zend_object_iterator_funcs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object_iterator {
    pub std: zend_object,
    pub data: zval,
    pub funcs: *mut zend_object_iterator_funcs,
    pub index: zend_ulong,
}
#[test]
fn bindgen_test_layout__zend_object_iterator() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_object_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).std as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).funcs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).index as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(index)
        )
    );
}
impl Default for _zend_object_iterator {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_iterator_funcs {
    pub funcs: *mut zend_object_iterator_funcs,
    pub zf_new_iterator: *mut _zend_function,
    pub zf_valid: *mut _zend_function,
    pub zf_current: *mut _zend_function,
    pub zf_key: *mut _zend_function,
    pub zf_next: *mut _zend_function,
    pub zf_rewind: *mut _zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_iterator_funcs() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_iterator_funcs>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_class_iterator_funcs))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_iterator_funcs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).funcs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_new_iterator as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_new_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_valid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_current as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_key as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_next as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_rewind as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_rewind)
        )
    );
}
impl Default for _zend_class_iterator_funcs {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_class_iterator_funcs = _zend_class_iterator_funcs;
extern "C" {
    #[link_name = "\u{1}_zend_iterator_unwrap"]
    pub fn zend_iterator_unwrap(array_ptr: *mut zval) -> *mut zend_object_iterator;
}
extern "C" {
    #[link_name = "\u{1}_zend_iterator_init"]
    pub fn zend_iterator_init(iter: *mut zend_object_iterator);
}
extern "C" {
    #[link_name = "\u{1}_zend_iterator_dtor"]
    pub fn zend_iterator_dtor(iter: *mut zend_object_iterator);
}
extern "C" {
    #[link_name = "\u{1}_zend_register_iterator_wrapper"]
    pub fn zend_register_iterator_wrapper();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[test]
fn bindgen_test_layout_ostat() {
    assert_eq!(
        ::std::mem::size_of::<ostat>(),
        88usize,
        concat!("Size of: ", stringify!(ostat))
    );
    assert_eq!(
        ::std::mem::align_of::<ostat>(),
        8usize,
        concat!("Alignment of ", stringify!(ostat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gid as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blksize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blocks as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        120usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_lspare as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_qspare as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_atimespec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mtimespec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ctimespec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_birthtimespec as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gen as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_lspare as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_qspare as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_qspare)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_chmod"]
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchmod"]
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdir"]
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkfifo"]
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mknod"]
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_umask"]
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    #[link_name = "\u{1}_fchmodat"]
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdirat"]
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_futimens"]
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_utimensat"]
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
extern "C" {
    #[link_name = "\u{1}_chflags"]
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_chmodx_np"]
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchflags"]
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchmodx_np"]
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lchflags"]
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lchmod"]
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdirx_np"]
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkfifox_np"]
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_umaskx_np"]
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx64_np"]
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx64_np"]
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx64_np"]
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat64"]
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat64"]
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat64"]
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
pub type zend_stream_fsizer_t =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> usize>;
pub type zend_stream_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> usize,
>;
pub type zend_stream_closer_t =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>;
pub const zend_stream_type_ZEND_HANDLE_FILENAME: zend_stream_type = 0;
pub const zend_stream_type_ZEND_HANDLE_FD: zend_stream_type = 1;
pub const zend_stream_type_ZEND_HANDLE_FP: zend_stream_type = 2;
pub const zend_stream_type_ZEND_HANDLE_STREAM: zend_stream_type = 3;
pub const zend_stream_type_ZEND_HANDLE_MAPPED: zend_stream_type = 4;
pub type zend_stream_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mmap {
    pub len: usize,
    pub pos: usize,
    pub map: *mut ::std::os::raw::c_void,
    pub buf: *mut ::std::os::raw::c_char,
    pub old_handle: *mut ::std::os::raw::c_void,
    pub old_closer: zend_stream_closer_t,
}
#[test]
fn bindgen_test_layout__zend_mmap() {
    assert_eq!(
        ::std::mem::size_of::<_zend_mmap>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_mmap))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mmap>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).old_handle as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(old_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_mmap>())).old_closer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mmap),
            "::",
            stringify!(old_closer)
        )
    );
}
impl Default for _zend_mmap {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_mmap = _zend_mmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stream {
    pub handle: *mut ::std::os::raw::c_void,
    pub isatty: ::std::os::raw::c_int,
    pub mmap: zend_mmap,
    pub reader: zend_stream_reader_t,
    pub fsizer: zend_stream_fsizer_t,
    pub closer: zend_stream_closer_t,
}
#[test]
fn bindgen_test_layout__zend_stream() {
    assert_eq!(
        ::std::mem::size_of::<_zend_stream>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_stream))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_stream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).isatty as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(isatty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).mmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(mmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).reader as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).fsizer as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(fsizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stream>())).closer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stream),
            "::",
            stringify!(closer)
        )
    );
}
impl Default for _zend_stream {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_stream = _zend_stream;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_file_handle {
    pub handle: _zend_file_handle__bindgen_ty_1,
    pub filename: *const ::std::os::raw::c_char,
    pub opened_path: *mut zend_string,
    pub type_: zend_stream_type,
    pub free_filename: zend_bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_file_handle__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub fp: *mut FILE,
    pub stream: zend_stream,
    _bindgen_union_align: [u64; 11usize],
}
#[test]
fn bindgen_test_layout__zend_file_handle__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_file_handle__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_file_handle__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_handle__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_handle__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_handle__bindgen_ty_1>())).fd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_handle__bindgen_ty_1>())).fp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle__bindgen_ty_1),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_handle__bindgen_ty_1>())).stream as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle__bindgen_ty_1),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for _zend_file_handle__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_file_handle() {
    assert_eq!(
        ::std::mem::size_of::<_zend_file_handle>(),
        112usize,
        concat!("Size of: ", stringify!(_zend_file_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_handle>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_handle>())).filename as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_handle>())).opened_path as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(opened_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_handle>())).type_ as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_handle>())).free_filename as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(free_filename)
        )
    );
}
impl Default for _zend_file_handle {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_file_handle = _zend_file_handle;
extern "C" {
    #[link_name = "\u{1}_zend_stream_open"]
    pub fn zend_stream_open(
        filename: *const ::std::os::raw::c_char,
        handle: *mut zend_file_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stream_fixup"]
    pub fn zend_stream_fixup(
        file_handle: *mut zend_file_handle,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_file_handle_dtor"]
    pub fn zend_file_handle_dtor(fh: *mut zend_file_handle);
}
extern "C" {
    #[link_name = "\u{1}_zend_compare_file_handles"]
    pub fn zend_compare_file_handles(
        fh1: *mut zend_file_handle,
        fh2: *mut zend_file_handle,
    ) -> ::std::os::raw::c_int;
}
pub type zend_stat_t = stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smart_str {
    pub s: *mut zend_string,
    pub a: usize,
}
#[test]
fn bindgen_test_layout_smart_str() {
    assert_eq!(
        ::std::mem::size_of::<smart_str>(),
        16usize,
        concat!("Size of: ", stringify!(smart_str))
    );
    assert_eq!(
        ::std::mem::align_of::<smart_str>(),
        8usize,
        concat!("Alignment of ", stringify!(smart_str))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<smart_str>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(smart_str),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<smart_str>())).a as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(smart_str),
            "::",
            stringify!(a)
        )
    );
}
impl Default for smart_str {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smart_string {
    pub c: *mut ::std::os::raw::c_char,
    pub len: usize,
    pub a: usize,
}
#[test]
fn bindgen_test_layout_smart_string() {
    assert_eq!(
        ::std::mem::size_of::<smart_string>(),
        24usize,
        concat!("Size of: ", stringify!(smart_string))
    );
    assert_eq!(
        ::std::mem::align_of::<smart_string>(),
        8usize,
        concat!("Alignment of ", stringify!(smart_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<smart_string>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(smart_string),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<smart_string>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(smart_string),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<smart_string>())).a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(smart_string),
            "::",
            stringify!(a)
        )
    );
}
impl Default for smart_string {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_entry_t {
    pub flags: ::std::os::raw::c_int,
    pub handler: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_signal_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_entry_t>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_signal_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_entry_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_entry_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_entry_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_entry_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_entry_t>())).handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_entry_t),
            "::",
            stringify!(handler)
        )
    );
}
impl Default for _zend_signal_entry_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_signal_entry_t = _zend_signal_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_t {
    pub signo: ::std::os::raw::c_int,
    pub siginfo: *mut siginfo_t,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_signal_t() {
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_t>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_signal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_t>())).signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_t),
            "::",
            stringify!(signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_t>())).siginfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_t),
            "::",
            stringify!(siginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_t>())).context as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_t),
            "::",
            stringify!(context)
        )
    );
}
impl Default for _zend_signal_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_signal_t = _zend_signal_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_queue_t {
    pub zend_signal: zend_signal_t,
    pub next: *mut _zend_signal_queue_t,
}
#[test]
fn bindgen_test_layout__zend_signal_queue_t() {
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_queue_t>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_signal_queue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_queue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_queue_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_signal_queue_t>())).zend_signal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_queue_t),
            "::",
            stringify!(zend_signal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_queue_t>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_queue_t),
            "::",
            stringify!(next)
        )
    );
}
impl Default for _zend_signal_queue_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_signal_queue_t = _zend_signal_queue_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_signal_globals_t {
    pub depth: ::std::os::raw::c_int,
    pub blocked: ::std::os::raw::c_int,
    pub running: ::std::os::raw::c_int,
    pub active: ::std::os::raw::c_int,
    pub check: zend_bool,
    pub handlers: [zend_signal_entry_t; 32usize],
    pub pstorage: [zend_signal_queue_t; 64usize],
    pub phead: *mut zend_signal_queue_t,
    pub ptail: *mut zend_signal_queue_t,
    pub pavail: *mut zend_signal_queue_t,
}
#[test]
fn bindgen_test_layout__zend_signal_globals_t() {
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_globals_t>(),
        2608usize,
        concat!("Size of: ", stringify!(_zend_signal_globals_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_globals_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_globals_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).blocked as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(blocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).running as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).active as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).check as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).handlers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).pstorage as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(pstorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).phead as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(phead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).ptail as *const _ as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(ptail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_signal_globals_t>())).pavail as *const _ as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(pavail)
        )
    );
}
impl Default for _zend_signal_globals_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_signal_globals_t = _zend_signal_globals_t;
extern "C" {
    #[link_name = "\u{1}_zend_signal_globals_id"]
    pub static mut zend_signal_globals_id: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_signal_handler_unblock"]
    pub fn zend_signal_handler_unblock();
}
extern "C" {
    #[link_name = "\u{1}_zend_signal_activate"]
    pub fn zend_signal_activate();
}
extern "C" {
    #[link_name = "\u{1}_zend_signal_deactivate"]
    pub fn zend_signal_deactivate();
}
extern "C" {
    #[link_name = "\u{1}_zend_signal_startup"]
    pub fn zend_signal_startup();
}
extern "C" {
    #[link_name = "\u{1}_zend_signal_init"]
    pub fn zend_signal_init();
}
extern "C" {
    #[link_name = "\u{1}_zend_signal"]
    pub fn zend_signal(
        signo: ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_sigaction"]
    pub fn zend_sigaction(
        signo: ::std::os::raw::c_int,
        act: *const sigaction,
        oldact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_error_noreturn"]
    pub fn zend_error_noreturn(
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_serialize_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_unserialize_data {
    _unused: [u8; 0],
}
pub type zend_serialize_data = _zend_serialize_data;
pub type zend_unserialize_data = _zend_unserialize_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_method_reference {
    pub method_name: *mut zend_string,
    pub ce: *mut zend_class_entry,
    pub class_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_trait_method_reference() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_method_reference>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_trait_method_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_method_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_method_reference))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_method_reference>())).method_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(method_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_method_reference>())).ce as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_method_reference>())).class_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(class_name)
        )
    );
}
impl Default for _zend_trait_method_reference {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_trait_method_reference = _zend_trait_method_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_precedence {
    pub trait_method: *mut zend_trait_method_reference,
    pub exclude_from_classes: *mut _zend_trait_precedence__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_trait_precedence__bindgen_ty_1 {
    pub ce: *mut zend_class_entry,
    pub class_name: *mut zend_string,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__zend_trait_precedence__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_trait_precedence__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence__bindgen_ty_1>())).ce as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence__bindgen_ty_1>())).class_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1),
            "::",
            stringify!(class_name)
        )
    );
}
impl Default for _zend_trait_precedence__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_trait_precedence() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_trait_precedence))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_precedence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence>())).trait_method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(trait_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence>())).exclude_from_classes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(exclude_from_classes)
        )
    );
}
impl Default for _zend_trait_precedence {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_trait_precedence = _zend_trait_precedence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_alias {
    pub trait_method: *mut zend_trait_method_reference,
    /// name for method to be added
    pub alias: *mut zend_string,
    /// modifiers to be set on trait method
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout__zend_trait_alias() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_alias>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_trait_alias))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_alias>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_alias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).trait_method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(trait_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).alias as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).modifiers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(modifiers)
        )
    );
}
impl Default for _zend_trait_alias {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_trait_alias = _zend_trait_alias;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_entry {
    pub type_: ::std::os::raw::c_char,
    pub name: *mut zend_string,
    pub parent: *mut _zend_class_entry,
    pub refcount: ::std::os::raw::c_int,
    pub ce_flags: u32,
    pub default_properties_count: ::std::os::raw::c_int,
    pub default_static_members_count: ::std::os::raw::c_int,
    pub default_properties_table: *mut zval,
    pub default_static_members_table: *mut zval,
    pub static_members_table: *mut zval,
    pub function_table: HashTable,
    pub properties_info: HashTable,
    pub constants_table: HashTable,
    pub constructor: *mut _zend_function,
    pub destructor: *mut _zend_function,
    pub clone: *mut _zend_function,
    pub __get: *mut _zend_function,
    pub __set: *mut _zend_function,
    pub __unset: *mut _zend_function,
    pub __isset: *mut _zend_function,
    pub __call: *mut _zend_function,
    pub __callstatic: *mut _zend_function,
    pub __tostring: *mut _zend_function,
    pub __debugInfo: *mut _zend_function,
    pub serialize_func: *mut _zend_function,
    pub unserialize_func: *mut _zend_function,
    pub iterator_funcs: zend_class_iterator_funcs,
    pub create_object: ::std::option::Option<
        unsafe extern "C" fn(class_type: *mut zend_class_entry) -> *mut zend_object,
    >,
    pub get_iterator: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            object: *mut zval,
            by_ref: ::std::os::raw::c_int,
        ) -> *mut zend_object_iterator,
    >,
    pub interface_gets_implemented: ::std::option::Option<
        unsafe extern "C" fn(iface: *mut zend_class_entry, class_type: *mut zend_class_entry)
            -> ::std::os::raw::c_int,
    >,
    pub get_static_method: ::std::option::Option<
        unsafe extern "C" fn(ce: *mut zend_class_entry, method: *mut zend_string)
            -> *mut _zend_function,
    >,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            buffer: *mut *mut ::std::os::raw::c_uchar,
            buf_len: *mut usize,
            data: *mut zend_serialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub unserialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            ce: *mut zend_class_entry,
            buf: *const ::std::os::raw::c_uchar,
            buf_len: usize,
            data: *mut zend_unserialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub num_interfaces: u32,
    pub num_traits: u32,
    pub interfaces: *mut *mut zend_class_entry,
    pub traits: *mut *mut zend_class_entry,
    pub trait_aliases: *mut *mut zend_trait_alias,
    pub trait_precedences: *mut *mut zend_trait_precedence,
    pub info: _zend_class_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_1 {
    pub user: _zend_class_entry__bindgen_ty_1__bindgen_ty_1,
    pub internal: _zend_class_entry__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_1 {
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).filename
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).line_start
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(line_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).line_end
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(line_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).doc_comment
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(doc_comment)
        )
    );
}
impl Default for _zend_class_entry__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_2 {
    pub builtin_functions: *const _zend_function_entry,
    pub module: *mut _zend_module_entry,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>()))
                .builtin_functions as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(builtin_functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>())).module
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(module)
        )
    );
}
impl Default for _zend_class_entry__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1>())).internal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(internal)
        )
    );
}
impl Default for _zend_class_entry__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_class_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry>(),
        504usize,
        concat!("Size of: ", stringify!(_zend_class_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).ce_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(ce_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_properties_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_static_members_count as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_properties_table as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_static_members_table as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).static_members_table as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(static_members_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).function_table as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(function_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).properties_info as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).constants_table as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constants_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).constructor as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).destructor as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(destructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).clone as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__get as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__set as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__unset as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__isset as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__isset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__call as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__callstatic as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__callstatic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__tostring as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__tostring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__debugInfo as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__debugInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).serialize_func as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).unserialize_func as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).iterator_funcs as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(iterator_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).create_object as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(create_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).get_iterator as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).interface_gets_implemented as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(interface_gets_implemented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).get_static_method as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_static_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).serialize as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).unserialize as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).num_interfaces as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_interfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).num_traits as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_traits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).interfaces as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(interfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).traits as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(traits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).trait_aliases as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_aliases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).trait_precedences as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_precedences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).info as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(info)
        )
    );
}
impl Default for _zend_class_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_utility_functions {
    pub error_function: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_filename: *const ::std::os::raw::c_char,
            error_lineno: u32,
            format: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >,
    pub printf_function: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> usize,
    >,
    pub write_function: ::std::option::Option<
        unsafe extern "C" fn(str: *const ::std::os::raw::c_char, str_length: usize) -> usize,
    >,
    pub fopen_function: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            opened_path: *mut *mut zend_string,
        ) -> *mut FILE,
    >,
    pub message_handler: ::std::option::Option<
        unsafe extern "C" fn(message: zend_long, data: *const ::std::os::raw::c_void),
    >,
    pub get_configuration_directive:
        ::std::option::Option<unsafe extern "C" fn(name: *mut zend_string) -> *mut zval>,
    pub ticks_function: ::std::option::Option<unsafe extern "C" fn(ticks: ::std::os::raw::c_int)>,
    pub on_timeout: ::std::option::Option<unsafe extern "C" fn(seconds: ::std::os::raw::c_int)>,
    pub stream_open_function: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            handle: *mut zend_file_handle,
        ) -> ::std::os::raw::c_int,
    >,
    pub printf_to_smart_string_function: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_string,
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ),
    >,
    pub printf_to_smart_str_function: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_str,
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ),
    >,
    pub getenv_function: ::std::option::Option<
        unsafe extern "C" fn(name: *mut ::std::os::raw::c_char, name_len: usize)
            -> *mut ::std::os::raw::c_char,
    >,
    pub resolve_path_function: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            filename_len: ::std::os::raw::c_int,
        ) -> *mut zend_string,
    >,
}
#[test]
fn bindgen_test_layout__zend_utility_functions() {
    assert_eq!(
        ::std::mem::size_of::<_zend_utility_functions>(),
        104usize,
        concat!("Size of: ", stringify!(_zend_utility_functions))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_utility_functions>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_utility_functions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).error_function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(error_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).printf_function as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).write_function as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(write_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).fopen_function as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(fopen_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).message_handler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(message_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).get_configuration_directive
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(get_configuration_directive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).ticks_function as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(ticks_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).on_timeout as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(on_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).stream_open_function as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(stream_open_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).printf_to_smart_string_function
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_to_smart_string_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).printf_to_smart_str_function
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_to_smart_str_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).getenv_function as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(getenv_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_functions>())).resolve_path_function as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(resolve_path_function)
        )
    );
}
impl Default for _zend_utility_functions {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_utility_functions = _zend_utility_functions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_utility_values {
    pub import_use_extension: *mut ::std::os::raw::c_char,
    pub import_use_extension_length: u32,
    pub html_errors: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_utility_values() {
    assert_eq!(
        ::std::mem::size_of::<_zend_utility_values>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_utility_values))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_utility_values>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_utility_values))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_values>())).import_use_extension as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_values),
            "::",
            stringify!(import_use_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_values>())).import_use_extension_length as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_values),
            "::",
            stringify!(import_use_extension_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_utility_values>())).html_errors as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_values),
            "::",
            stringify!(html_errors)
        )
    );
}
impl Default for _zend_utility_values {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_utility_values = _zend_utility_values;
pub type zend_write_func_t = ::std::option::Option<
    unsafe extern "C" fn(str: *const ::std::os::raw::c_char, str_length: usize)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_zend_startup"]
    pub fn zend_startup(
        utility_functions: *mut zend_utility_functions,
        extensions: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_shutdown"]
    pub fn zend_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_zend_register_standard_ini_entries"]
    pub fn zend_register_standard_ini_entries();
}
extern "C" {
    #[link_name = "\u{1}_zend_post_startup"]
    pub fn zend_post_startup();
}
extern "C" {
    #[link_name = "\u{1}_zend_set_utility_values"]
    pub fn zend_set_utility_values(utility_values: *mut zend_utility_values);
}
extern "C" {
    #[link_name = "\u{1}__zend_bailout"]
    pub fn _zend_bailout(filename: *const ::std::os::raw::c_char, lineno: u32);
}
extern "C" {
    #[link_name = "\u{1}_zend_vspprintf"]
    pub fn zend_vspprintf(
        pbuf: *mut *mut ::std::os::raw::c_char,
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_spprintf"]
    pub fn zend_spprintf(
        message: *mut *mut ::std::os::raw::c_char,
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_vstrpprintf"]
    pub fn zend_vstrpprintf(
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_strpprintf"]
    pub fn zend_strpprintf(
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_get_zend_version"]
    pub fn get_zend_version() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_make_printable_zval"]
    pub fn zend_make_printable_zval(expr: *mut zval, expr_copy: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_print_zval"]
    pub fn zend_print_zval(expr: *mut zval, indent: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_print_zval_r"]
    pub fn zend_print_zval_r(expr: *mut zval, indent: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_print_zval_r_to_str"]
    pub fn zend_print_zval_r_to_str(
        expr: *mut zval,
        indent: ::std::os::raw::c_int,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_print_flat_zval_r"]
    pub fn zend_print_flat_zval_r(expr: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_output_debug_string"]
    pub fn zend_output_debug_string(
        trigger_break: zend_bool,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_activate"]
    pub fn zend_activate();
}
extern "C" {
    #[link_name = "\u{1}_zend_deactivate"]
    pub fn zend_deactivate();
}
extern "C" {
    #[link_name = "\u{1}_zend_call_destructors"]
    pub fn zend_call_destructors();
}
extern "C" {
    #[link_name = "\u{1}_zend_activate_modules"]
    pub fn zend_activate_modules();
}
extern "C" {
    #[link_name = "\u{1}_zend_deactivate_modules"]
    pub fn zend_deactivate_modules();
}
extern "C" {
    #[link_name = "\u{1}_zend_post_deactivate_modules"]
    pub fn zend_post_deactivate_modules();
}
extern "C" {
    #[link_name = "\u{1}_free_estring"]
    pub fn free_estring(str_p: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_zend_printf"]
    pub static mut zend_printf: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> usize,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_write"]
    pub static mut zend_write: zend_write_func_t;
}
extern "C" {
    #[link_name = "\u{1}_zend_fopen"]
    pub static mut zend_fopen: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            opened_path: *mut *mut zend_string,
        ) -> *mut FILE,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_ticks_function"]
    pub static mut zend_ticks_function:
        ::std::option::Option<unsafe extern "C" fn(ticks: ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "\u{1}_zend_interrupt_function"]
    pub static mut zend_interrupt_function:
        ::std::option::Option<unsafe extern "C" fn(execute_data: *mut zend_execute_data)>;
}
extern "C" {
    #[link_name = "\u{1}_zend_error_cb"]
    pub static mut zend_error_cb: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_filename: *const ::std::os::raw::c_char,
            error_lineno: u32,
            format: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_on_timeout"]
    pub static mut zend_on_timeout:
        ::std::option::Option<unsafe extern "C" fn(seconds: ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "\u{1}_zend_stream_open_function"]
    pub static mut zend_stream_open_function: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            handle: *mut zend_file_handle,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_printf_to_smart_string"]
    pub static mut zend_printf_to_smart_string: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_string,
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_printf_to_smart_str"]
    pub static mut zend_printf_to_smart_str: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_str,
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_getenv"]
    pub static mut zend_getenv: ::std::option::Option<
        unsafe extern "C" fn(name: *mut ::std::os::raw::c_char, name_len: usize)
            -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_resolve_path"]
    pub static mut zend_resolve_path: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            filename_len: ::std::os::raw::c_int,
        ) -> *mut zend_string,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_error"]
    pub fn zend_error(type_: ::std::os::raw::c_int, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_zend_throw_error"]
    pub fn zend_throw_error(
        exception_ce: *mut zend_class_entry,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_type_error"]
    pub fn zend_type_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_zend_internal_type_error"]
    pub fn zend_internal_type_error(
        throw_exception: zend_bool,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_internal_argument_count_error"]
    pub fn zend_internal_argument_count_error(
        throw_exception: zend_bool,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zenderror"]
    pub fn zenderror(error: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_zend_standard_class_def"]
    pub static mut zend_standard_class_def: *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_uv"]
    pub static mut zend_uv: zend_utility_values;
}
extern "C" {
    #[link_name = "\u{1}_zend_dtrace_enabled"]
    pub static mut zend_dtrace_enabled: zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_message_dispatcher"]
    pub fn zend_message_dispatcher(message: zend_long, data: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_zend_get_configuration_directive"]
    pub fn zend_get_configuration_directive(name: *mut zend_string) -> *mut zval;
}
pub const zend_error_handling_t_EH_NORMAL: zend_error_handling_t = 0;
pub const zend_error_handling_t_EH_SUPPRESS: zend_error_handling_t = 1;
pub const zend_error_handling_t_EH_THROW: zend_error_handling_t = 2;
pub type zend_error_handling_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zend_error_handling {
    pub handling: zend_error_handling_t,
    pub exception: *mut zend_class_entry,
    pub user_handler: zval,
}
#[test]
fn bindgen_test_layout_zend_error_handling() {
    assert_eq!(
        ::std::mem::size_of::<zend_error_handling>(),
        32usize,
        concat!("Size of: ", stringify!(zend_error_handling))
    );
    assert_eq!(
        ::std::mem::align_of::<zend_error_handling>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_error_handling))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zend_error_handling>())).handling as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_error_handling),
            "::",
            stringify!(handling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zend_error_handling>())).exception as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_error_handling),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zend_error_handling>())).user_handler as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_error_handling),
            "::",
            stringify!(user_handler)
        )
    );
}
impl Default for zend_error_handling {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_zend_save_error_handling"]
    pub fn zend_save_error_handling(current: *mut zend_error_handling);
}
extern "C" {
    #[link_name = "\u{1}_zend_replace_error_handling"]
    pub fn zend_replace_error_handling(
        error_handling: zend_error_handling_t,
        exception_class: *mut zend_class_entry,
        current: *mut zend_error_handling,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_restore_error_handling"]
    pub fn zend_restore_error_handling(saved: *mut zend_error_handling);
}
pub type zend_object_read_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_read_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_write_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_write_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, offset: *mut zval, value: *mut zval),
>;
pub type zend_object_get_property_ptr_ptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_set_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, value: *mut zval)>;
pub type zend_object_get_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, rv: *mut zval) -> *mut zval>;
pub type zend_object_has_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        has_set_exists: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_has_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, member: *mut zval, check_empty: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type zend_object_unset_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_unset_dimension_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, offset: *mut zval)>;
pub type zend_object_get_properties_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut HashTable>;
pub type zend_object_get_debug_info_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, is_temp: *mut ::std::os::raw::c_int) -> *mut HashTable,
>;
pub type zend_object_call_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        method: *mut zend_string,
        object: *mut zend_object,
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_method_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut *mut zend_object, method: *mut zend_string, key: *const zval)
        -> *mut _zend_function,
>;
pub type zend_object_get_constructor_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object) -> *mut _zend_function>;
pub type zend_object_dtor_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object)>;
pub type zend_object_free_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object)>;
pub type zend_object_clone_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut zend_object>;
pub type zend_object_get_class_name_t =
    ::std::option::Option<unsafe extern "C" fn(object: *const zend_object) -> *mut zend_string>;
pub type zend_object_compare_t = ::std::option::Option<
    unsafe extern "C" fn(object1: *mut zval, object2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_compare_zvals_t = ::std::option::Option<
    unsafe extern "C" fn(resul: *mut zval, op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_cast_t = ::std::option::Option<
    unsafe extern "C" fn(readobj: *mut zval, retval: *mut zval, type_: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type zend_object_count_elements_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, count: *mut zend_long) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_closure_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut zval,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut _zend_function,
        obj_ptr: *mut *mut zend_object,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_gc_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, table: *mut *mut zval, n: *mut ::std::os::raw::c_int)
        -> *mut HashTable,
>;
pub type zend_object_do_operation_t = ::std::option::Option<
    unsafe extern "C" fn(opcode: zend_uchar, result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_handlers {
    pub offset: ::std::os::raw::c_int,
    pub free_obj: zend_object_free_obj_t,
    pub dtor_obj: zend_object_dtor_obj_t,
    pub clone_obj: zend_object_clone_obj_t,
    pub read_property: zend_object_read_property_t,
    pub write_property: zend_object_write_property_t,
    pub read_dimension: zend_object_read_dimension_t,
    pub write_dimension: zend_object_write_dimension_t,
    pub get_property_ptr_ptr: zend_object_get_property_ptr_ptr_t,
    pub get: zend_object_get_t,
    pub set: zend_object_set_t,
    pub has_property: zend_object_has_property_t,
    pub unset_property: zend_object_unset_property_t,
    pub has_dimension: zend_object_has_dimension_t,
    pub unset_dimension: zend_object_unset_dimension_t,
    pub get_properties: zend_object_get_properties_t,
    pub get_method: zend_object_get_method_t,
    pub call_method: zend_object_call_method_t,
    pub get_constructor: zend_object_get_constructor_t,
    pub get_class_name: zend_object_get_class_name_t,
    pub compare_objects: zend_object_compare_t,
    pub cast_object: zend_object_cast_t,
    pub count_elements: zend_object_count_elements_t,
    pub get_debug_info: zend_object_get_debug_info_t,
    pub get_closure: zend_object_get_closure_t,
    pub get_gc: zend_object_get_gc_t,
    pub do_operation: zend_object_do_operation_t,
    pub compare: zend_object_compare_zvals_t,
}
#[test]
fn bindgen_test_layout__zend_object_handlers() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_handlers>(),
        224usize,
        concat!("Size of: ", stringify!(_zend_object_handlers))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_handlers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).free_obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(free_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).dtor_obj as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(dtor_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).clone_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(clone_obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).read_property as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).write_property as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).read_dimension as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).write_dimension as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_property_ptr_ptr as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_property_ptr_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).get as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).set as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).has_property as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).unset_property as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).has_dimension as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).unset_dimension as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_properties as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_method as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).call_method as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(call_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_constructor as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_constructor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_class_name as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_class_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).compare_objects as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare_objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).cast_object as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(cast_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).count_elements as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(count_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_debug_info as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_debug_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_closure as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).get_gc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_gc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).do_operation as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(do_operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).compare as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare)
        )
    );
}
impl Default for _zend_object_handlers {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_std_object_handlers"]
    pub static mut std_object_handlers: zend_object_handlers;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_get_static_method"]
    pub fn zend_std_get_static_method(
        ce: *mut zend_class_entry,
        function_name_strval: *mut zend_string,
        key: *const zval,
    ) -> *mut _zend_function;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_get_static_property"]
    pub fn zend_std_get_static_property(
        ce: *mut zend_class_entry,
        property_name: *mut zend_string,
        silent: zend_bool,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_unset_static_property"]
    pub fn zend_std_unset_static_property(
        ce: *mut zend_class_entry,
        property_name: *mut zend_string,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_get_constructor"]
    pub fn zend_std_get_constructor(object: *mut zend_object) -> *mut _zend_function;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_property_info"]
    pub fn zend_get_property_info(
        ce: *mut zend_class_entry,
        member: *mut zend_string,
        silent: ::std::os::raw::c_int,
    ) -> *mut _zend_property_info;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_get_properties"]
    pub fn zend_std_get_properties(object: *mut zval) -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_get_debug_info"]
    pub fn zend_std_get_debug_info(
        object: *mut zval,
        is_temp: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_cast_object_tostring"]
    pub fn zend_std_cast_object_tostring(
        readobj: *mut zval,
        writeobj: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_std_write_property"]
    pub fn zend_std_write_property(
        object: *mut zval,
        member: *mut zval,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_rebuild_object_properties"]
    pub fn rebuild_object_properties(zobj: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_check_private"]
    pub fn zend_check_private(
        fbc: *mut _zend_function,
        ce: *mut zend_class_entry,
        function_name: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_check_protected"]
    pub fn zend_check_protected(
        ce: *mut zend_class_entry,
        scope: *mut zend_class_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_check_property_access"]
    pub fn zend_check_property_access(
        zobj: *mut zend_object,
        prop_info_name: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_call_trampoline_func"]
    pub fn zend_get_call_trampoline_func(
        ce: *mut zend_class_entry,
        method_name: *mut zend_string,
        is_static: ::std::os::raw::c_int,
    ) -> *mut zend_function;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_property_guard"]
    pub fn zend_get_property_guard(zobj: *mut zend_object, member: *mut zend_string) -> *mut u32;
}
extern "C" {
    #[link_name = "\u{1}___error"]
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_freedtoa"]
    pub fn zend_freedtoa(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_zend_dtoa"]
    pub fn zend_dtoa(
        _d: f64,
        mode: ::std::os::raw::c_int,
        ndigits: ::std::os::raw::c_int,
        decpt: *mut ::std::os::raw::c_int,
        sign: *mut ::std::os::raw::c_int,
        rve: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_strtod"]
    pub fn zend_strtod(
        s00: *const ::std::os::raw::c_char,
        se: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_zend_hex_strtod"]
    pub fn zend_hex_strtod(
        str: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_zend_oct_strtod"]
    pub fn zend_oct_strtod(
        str: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_zend_bin_strtod"]
    pub fn zend_bin_strtod(
        str: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_zend_startup_strtod"]
    pub fn zend_startup_strtod() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_shutdown_strtod"]
    pub fn zend_shutdown_strtod() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_function"]
    pub fn add_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sub_function"]
    pub fn sub_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mul_function"]
    pub fn mul_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pow_function"]
    pub fn pow_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_div_function"]
    pub fn div_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mod_function"]
    pub fn mod_function(result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_boolean_xor_function"]
    pub fn boolean_xor_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_boolean_not_function"]
    pub fn boolean_not_function(result: *mut zval, op1: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bitwise_not_function"]
    pub fn bitwise_not_function(result: *mut zval, op1: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bitwise_or_function"]
    pub fn bitwise_or_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bitwise_and_function"]
    pub fn bitwise_and_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bitwise_xor_function"]
    pub fn bitwise_xor_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_shift_left_function"]
    pub fn shift_left_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_shift_right_function"]
    pub fn shift_right_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_concat_function"]
    pub fn concat_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_identical"]
    pub fn zend_is_identical(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_equal_function"]
    pub fn is_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_identical_function"]
    pub fn is_identical_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_not_identical_function"]
    pub fn is_not_identical_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_not_equal_function"]
    pub fn is_not_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_smaller_function"]
    pub fn is_smaller_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_is_smaller_or_equal_function"]
    pub fn is_smaller_or_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_instanceof_function_ex"]
    pub fn instanceof_function_ex(
        instance_ce: *const zend_class_entry,
        ce: *const zend_class_entry,
        interfaces_only: zend_bool,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_instanceof_function"]
    pub fn instanceof_function(
        instance_ce: *const zend_class_entry,
        ce: *const zend_class_entry,
    ) -> zend_bool;
}
extern "C" {
    /// Checks whether the string "str" with length "length" is numeric. The value
    /// of allow_errors determines whether it's required to be entirely numeric, or
    /// just its prefix. Leading whitespace is allowed.
    ///
    /// The function returns 0 if the string did not contain a valid number; IS_LONG
    /// if it contained a number that fits within the range of a long; or IS_DOUBLE
    /// if the number was out of long range or contained a decimal point/exponent.
    /// The number's value is returned into the respective pointer, *lval or *dval,
    /// if that pointer is not NULL.
    ///
    /// This variant also gives information if a string that represents an integer
    /// could not be represented as such due to overflow. It writes 1 to oflow_info
    /// if the integer is larger than ZEND_LONG_MAX and -1 if it's smaller than ZEND_LONG_MIN.
    #[link_name = "\u{1}__is_numeric_string_ex"]
    pub fn _is_numeric_string_ex(
        str: *const ::std::os::raw::c_char,
        length: usize,
        lval: *mut zend_long,
        dval: *mut f64,
        allow_errors: ::std::os::raw::c_int,
        oflow_info: *mut ::std::os::raw::c_int,
    ) -> zend_uchar;
}
extern "C" {
    #[link_name = "\u{1}_zend_memnstr_ex"]
    pub fn zend_memnstr_ex(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_len: usize,
        end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_memnrstr_ex"]
    pub fn zend_memnrstr_ex(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_len: usize,
        end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_dval_to_lval_slow"]
    pub fn zend_dval_to_lval_slow(d: f64) -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_is_numeric_str_function"]
    pub fn is_numeric_str_function(
        str: *const zend_string,
        lval: *mut zend_long,
        dval: *mut f64,
    ) -> zend_uchar;
}
extern "C" {
    #[link_name = "\u{1}_increment_function"]
    pub fn increment_function(op1: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_decrement_function"]
    pub fn decrement_function(op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_convert_scalar_to_number"]
    pub fn convert_scalar_to_number(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}__convert_to_cstring"]
    pub fn _convert_to_cstring(
        op: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}__convert_to_string"]
    pub fn _convert_to_string(
        op: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_convert_to_long"]
    pub fn convert_to_long(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_double"]
    pub fn convert_to_double(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_long_base"]
    pub fn convert_to_long_base(op: *mut zval, base: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_null"]
    pub fn convert_to_null(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_boolean"]
    pub fn convert_to_boolean(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_array"]
    pub fn convert_to_array(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_convert_to_object"]
    pub fn convert_to_object(op: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_multi_convert_to_long_ex"]
    pub fn multi_convert_to_long_ex(argc: ::std::os::raw::c_int, ...);
}
extern "C" {
    #[link_name = "\u{1}_multi_convert_to_double_ex"]
    pub fn multi_convert_to_double_ex(argc: ::std::os::raw::c_int, ...);
}
extern "C" {
    #[link_name = "\u{1}_multi_convert_to_string_ex"]
    pub fn multi_convert_to_string_ex(argc: ::std::os::raw::c_int, ...);
}
extern "C" {
    #[link_name = "\u{1}__zval_get_long_func"]
    pub fn _zval_get_long_func(op: *mut zval) -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}__zval_get_double_func"]
    pub fn _zval_get_double_func(op: *mut zval) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__zval_get_string_func"]
    pub fn _zval_get_string_func(op: *mut zval) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_true"]
    pub fn zend_is_true(op: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_object_is_true"]
    pub fn zend_object_is_true(op: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_compare_function"]
    pub fn compare_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_numeric_compare_function"]
    pub fn numeric_compare_function(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_string_compare_function_ex"]
    pub fn string_compare_function_ex(
        op1: *mut zval,
        op2: *mut zval,
        case_insensitive: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_string_compare_function"]
    pub fn string_compare_function(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_string_case_compare_function"]
    pub fn string_case_compare_function(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_string_locale_compare_function"]
    pub fn string_locale_compare_function(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_str_tolower"]
    pub fn zend_str_tolower(str: *mut ::std::os::raw::c_char, length: usize);
}
extern "C" {
    #[link_name = "\u{1}_zend_str_tolower_copy"]
    pub fn zend_str_tolower_copy(
        dest: *mut ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_str_tolower_dup"]
    pub fn zend_str_tolower_dup(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_str_tolower_dup_ex"]
    pub fn zend_str_tolower_dup_ex(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_string_tolower"]
    pub fn zend_string_tolower(str: *mut zend_string) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_zval_strcmp"]
    pub fn zend_binary_zval_strcmp(s1: *mut zval, s2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_zval_strncmp"]
    pub fn zend_binary_zval_strncmp(
        s1: *mut zval,
        s2: *mut zval,
        s3: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_zval_strcasecmp"]
    pub fn zend_binary_zval_strcasecmp(s1: *mut zval, s2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_zval_strncasecmp"]
    pub fn zend_binary_zval_strncasecmp(
        s1: *mut zval,
        s2: *mut zval,
        s3: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strcmp"]
    pub fn zend_binary_strcmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strncmp"]
    pub fn zend_binary_strncmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strcasecmp"]
    pub fn zend_binary_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strncasecmp"]
    pub fn zend_binary_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strcasecmp_l"]
    pub fn zend_binary_strcasecmp_l(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_strncasecmp_l"]
    pub fn zend_binary_strncasecmp_l(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zendi_smart_strcmp"]
    pub fn zendi_smart_strcmp(s1: *mut zend_string, s2: *mut zend_string) -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_zend_compare_symbol_tables"]
    pub fn zend_compare_symbol_tables(
        ht1: *mut HashTable,
        ht2: *mut HashTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_compare_arrays"]
    pub fn zend_compare_arrays(a1: *mut zval, a2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_compare_objects"]
    pub fn zend_compare_objects(o1: *mut zval, o2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_atoi"]
    pub fn zend_atoi(
        str: *const ::std::os::raw::c_char,
        str_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_atol"]
    pub fn zend_atol(
        str: *const ::std::os::raw::c_char,
        str_len: ::std::os::raw::c_int,
    ) -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_zend_locale_sprintf_double"]
    pub fn zend_locale_sprintf_double(
        op: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_long_to_str"]
    pub fn zend_long_to_str(num: zend_long) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_qsort"]
    pub fn zend_qsort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        siz: usize,
        cmp: compare_func_t,
        swp: swap_func_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_sort"]
    pub fn zend_sort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        siz: usize,
        cmp: compare_func_t,
        swp: swap_func_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_insert_sort"]
    pub fn zend_insert_sort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        siz: usize,
        cmp: compare_func_t,
        swp: swap_func_t,
    );
}
pub type zend_op_array = _zend_op_array;
pub type zend_op = _zend_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode_op {
    pub constant: u32,
    pub var: u32,
    pub num: u32,
    pub opline_num: u32,
    pub jmp_offset: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__znode_op() {
    assert_eq!(
        ::std::mem::size_of::<_znode_op>(),
        4usize,
        concat!("Size of: ", stringify!(_znode_op))
    );
    assert_eq!(
        ::std::mem::align_of::<_znode_op>(),
        4usize,
        concat!("Alignment of ", stringify!(_znode_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).constant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).opline_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(opline_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).jmp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(jmp_offset)
        )
    );
}
impl Default for _znode_op {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type znode_op = _znode_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _znode {
    pub op_type: zend_uchar,
    pub flag: zend_uchar,
    pub u: _znode__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode__bindgen_ty_1 {
    pub op: znode_op,
    pub constant: zval,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout__znode__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_znode__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_znode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_znode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_znode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode__bindgen_ty_1>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode__bindgen_ty_1),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode__bindgen_ty_1>())).constant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode__bindgen_ty_1),
            "::",
            stringify!(constant)
        )
    );
}
impl Default for _znode__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__znode() {
    assert_eq!(
        ::std::mem::size_of::<_znode>(),
        24usize,
        concat!("Size of: ", stringify!(_znode))
    );
    assert_eq!(
        ::std::mem::align_of::<_znode>(),
        8usize,
        concat!("Alignment of ", stringify!(_znode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode>())).op_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode>())).flag as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode>())).u as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_znode), "::", stringify!(u))
    );
}
impl Default for _znode {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type znode = _znode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_znode {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub node: znode,
}
#[test]
fn bindgen_test_layout__zend_ast_znode() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_znode>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_ast_znode))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_znode>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_znode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_znode>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_znode),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_znode>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_znode),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_znode>())).lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_znode),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_znode>())).node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_znode),
            "::",
            stringify!(node)
        )
    );
}
impl Default for _zend_ast_znode {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ast_znode = _zend_ast_znode;
extern "C" {
    #[link_name = "\u{1}_zend_ast_create_znode"]
    pub fn zend_ast_create_znode(node: *mut znode) -> *mut zend_ast;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_declarables {
    pub ticks: zend_long,
}
#[test]
fn bindgen_test_layout__zend_declarables() {
    assert_eq!(
        ::std::mem::size_of::<_zend_declarables>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_declarables))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_declarables>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_declarables))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_declarables>())).ticks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_declarables),
            "::",
            stringify!(ticks)
        )
    );
}
pub type zend_declarables = _zend_declarables;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_file_context {
    pub declarables: zend_declarables,
    pub implementing_class: znode,
    pub current_namespace: *mut zend_string,
    pub in_namespace: zend_bool,
    pub has_bracketed_namespaces: zend_bool,
    pub imports: *mut HashTable,
    pub imports_function: *mut HashTable,
    pub imports_const: *mut HashTable,
    pub seen_symbols: HashTable,
}
#[test]
fn bindgen_test_layout__zend_file_context() {
    assert_eq!(
        ::std::mem::size_of::<_zend_file_context>(),
        128usize,
        concat!("Size of: ", stringify!(_zend_file_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_context>())).declarables as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(declarables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_context>())).implementing_class as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(implementing_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_context>())).current_namespace as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(current_namespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_context>())).in_namespace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(in_namespace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_context>())).has_bracketed_namespaces as *const _
                as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(has_bracketed_namespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_context>())).imports as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_context>())).imports_function as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_file_context>())).imports_const as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports_const)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_file_context>())).seen_symbols as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(seen_symbols)
        )
    );
}
impl Default for _zend_file_context {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_file_context = _zend_file_context;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_parser_stack_elem {
    pub ast: *mut zend_ast,
    pub str: *mut zend_string,
    pub num: zend_ulong,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__zend_parser_stack_elem() {
    assert_eq!(
        ::std::mem::size_of::<_zend_parser_stack_elem>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_parser_stack_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_parser_stack_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_parser_stack_elem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_parser_stack_elem>())).ast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(ast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_parser_stack_elem>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_parser_stack_elem>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(num)
        )
    );
}
impl Default for _zend_parser_stack_elem {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_parser_stack_elem = _zend_parser_stack_elem;
extern "C" {
    #[link_name = "\u{1}_zend_compile_top_stmt"]
    pub fn zend_compile_top_stmt(ast: *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_compile_stmt"]
    pub fn zend_compile_stmt(ast: *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_compile_expr"]
    pub fn zend_compile_expr(node: *mut znode, ast: *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_compile_var"]
    pub fn zend_compile_var(node: *mut znode, ast: *mut zend_ast, type_: u32);
}
extern "C" {
    #[link_name = "\u{1}_zend_eval_const_expr"]
    pub fn zend_eval_const_expr(ast_ptr: *mut *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_const_expr_to_zval"]
    pub fn zend_const_expr_to_zval(result: *mut zval, ast: *mut zend_ast);
}
pub type user_opcode_handler_t = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_op {
    pub handler: *const ::std::os::raw::c_void,
    pub op1: znode_op,
    pub op2: znode_op,
    pub result: znode_op,
    pub extended_value: u32,
    pub lineno: u32,
    pub opcode: zend_uchar,
    pub op1_type: zend_uchar,
    pub op2_type: zend_uchar,
    pub result_type: zend_uchar,
}
#[test]
fn bindgen_test_layout__zend_op() {
    assert_eq!(
        ::std::mem::size_of::<_zend_op>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_op))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).result as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).extended_value as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(extended_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).opcode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op1_type as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op1_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op2_type as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op2_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).result_type as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(result_type)
        )
    );
}
impl Default for _zend_op {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_brk_cont_element {
    pub start: ::std::os::raw::c_int,
    pub cont: ::std::os::raw::c_int,
    pub brk: ::std::os::raw::c_int,
    pub parent: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_brk_cont_element() {
    assert_eq!(
        ::std::mem::size_of::<_zend_brk_cont_element>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_brk_cont_element))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_brk_cont_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_brk_cont_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_brk_cont_element>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_brk_cont_element>())).cont as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_brk_cont_element>())).brk as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(brk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_brk_cont_element>())).parent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(parent)
        )
    );
}
pub type zend_brk_cont_element = _zend_brk_cont_element;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_label {
    pub brk_cont: ::std::os::raw::c_int,
    pub opline_num: u32,
}
#[test]
fn bindgen_test_layout__zend_label() {
    assert_eq!(
        ::std::mem::size_of::<_zend_label>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_label))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_label>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_label))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_label>())).brk_cont as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_label),
            "::",
            stringify!(brk_cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_label>())).opline_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_label),
            "::",
            stringify!(opline_num)
        )
    );
}
pub type zend_label = _zend_label;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_try_catch_element {
    pub try_op: u32,
    pub catch_op: u32,
    pub finally_op: u32,
    pub finally_end: u32,
}
#[test]
fn bindgen_test_layout__zend_try_catch_element() {
    assert_eq!(
        ::std::mem::size_of::<_zend_try_catch_element>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_try_catch_element))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_try_catch_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_try_catch_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_try_catch_element>())).try_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(try_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).catch_op as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(catch_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).finally_op as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).finally_end as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_end)
        )
    );
}
pub type zend_try_catch_element = _zend_try_catch_element;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_live_range {
    pub var: u32,
    pub start: u32,
    pub end: u32,
}
#[test]
fn bindgen_test_layout__zend_live_range() {
    assert_eq!(
        ::std::mem::size_of::<_zend_live_range>(),
        12usize,
        concat!("Size of: ", stringify!(_zend_live_range))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_live_range>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_live_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(end)
        )
    );
}
pub type zend_live_range = _zend_live_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_oparray_context {
    pub opcodes_size: u32,
    pub vars_size: ::std::os::raw::c_int,
    pub literals_size: ::std::os::raw::c_int,
    pub backpatch_count: ::std::os::raw::c_int,
    pub fast_call_var: u32,
    pub try_catch_offset: u32,
    pub current_brk_cont: ::std::os::raw::c_int,
    pub last_brk_cont: ::std::os::raw::c_int,
    pub brk_cont_array: *mut zend_brk_cont_element,
    pub labels: *mut HashTable,
}
#[test]
fn bindgen_test_layout__zend_oparray_context() {
    assert_eq!(
        ::std::mem::size_of::<_zend_oparray_context>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_oparray_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_oparray_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_oparray_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).opcodes_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(opcodes_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_oparray_context>())).vars_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(vars_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).literals_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(literals_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).backpatch_count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(backpatch_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).fast_call_var as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(fast_call_var)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).try_catch_offset as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(try_catch_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).current_brk_cont as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(current_brk_cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).last_brk_cont as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(last_brk_cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_oparray_context>())).brk_cont_array as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(brk_cont_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_oparray_context>())).labels as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(labels)
        )
    );
}
impl Default for _zend_oparray_context {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_oparray_context = _zend_oparray_context;
extern "C" {
    #[link_name = "\u{1}_zend_visibility_string"]
    pub fn zend_visibility_string(fn_flags: u32) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_property_info {
    pub offset: u32,
    pub flags: u32,
    pub name: *mut zend_string,
    pub doc_comment: *mut zend_string,
    pub ce: *mut zend_class_entry,
}
#[test]
fn bindgen_test_layout__zend_property_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_property_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_property_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_property_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_property_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_property_info>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_property_info>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_property_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_property_info>())).doc_comment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_property_info>())).ce as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(ce)
        )
    );
}
impl Default for _zend_property_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_property_info = _zend_property_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_constant {
    pub value: zval,
    pub doc_comment: *mut zend_string,
    pub ce: *mut zend_class_entry,
}
#[test]
fn bindgen_test_layout__zend_class_constant() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_constant>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_class_constant))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_constant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_constant>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_constant>())).doc_comment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_constant>())).ce as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(ce)
        )
    );
}
impl Default for _zend_class_constant {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_class_constant = _zend_class_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_arg_info {
    pub name: *const ::std::os::raw::c_char,
    pub type_: zend_type,
    pub pass_by_reference: zend_uchar,
    pub is_variadic: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_internal_arg_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_arg_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_internal_arg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_arg_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_arg_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_arg_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_arg_info>())).pass_by_reference as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(pass_by_reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_arg_info>())).is_variadic as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(is_variadic)
        )
    );
}
impl Default for _zend_internal_arg_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_internal_arg_info = _zend_internal_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arg_info {
    pub name: *mut zend_string,
    pub type_: zend_type,
    pub pass_by_reference: zend_uchar,
    pub is_variadic: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_arg_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_arg_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_arg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arg_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_arg_info>())).pass_by_reference as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(pass_by_reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).is_variadic as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(is_variadic)
        )
    );
}
impl Default for _zend_arg_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_arg_info = _zend_arg_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _zend_internal_function_info {
    pub required_num_args: zend_uintptr_t,
    pub type_: zend_type,
    pub return_reference: zend_bool,
    pub _is_variadic: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_internal_function_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_internal_function_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function_info>())).required_num_args as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function_info>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function_info>())).return_reference as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(return_reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function_info>()))._is_variadic as *const _
                as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(_is_variadic)
        )
    );
}
pub type zend_internal_function_info = _zend_internal_function_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_op_array {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub refcount: *mut u32,
    pub last: u32,
    pub opcodes: *mut zend_op,
    pub last_var: ::std::os::raw::c_int,
    pub T: u32,
    pub vars: *mut *mut zend_string,
    pub last_live_range: ::std::os::raw::c_int,
    pub last_try_catch: ::std::os::raw::c_int,
    pub live_range: *mut zend_live_range,
    pub try_catch_array: *mut zend_try_catch_element,
    pub static_variables: *mut HashTable,
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
    pub early_binding: u32,
    pub last_literal: ::std::os::raw::c_int,
    pub literals: *mut zval,
    pub cache_size: ::std::os::raw::c_int,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_op_array() {
    assert_eq!(
        ::std::mem::size_of::<_zend_op_array>(),
        224usize,
        concat!("Size of: ", stringify!(_zend_op_array))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).arg_flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).fn_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).function_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).scope as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).prototype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).num_args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_op_array>())).required_num_args as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).arg_info as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).refcount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).opcodes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(opcodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_var as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).T as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).vars as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_live_range as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_live_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_try_catch as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_try_catch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).live_range as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(live_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).try_catch_array as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(try_catch_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).static_variables as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).filename as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).line_start as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).line_end as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).doc_comment as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).early_binding as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(early_binding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_literal as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_literal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).literals as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).cache_size as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).run_time_cache as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(run_time_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).reserved as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for _zend_op_array {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zif_handler = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data, return_value: *mut zval),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_internal_arg_info,
    pub handler: zif_handler,
    pub module: *mut _zend_module_entry,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_internal_function() {
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function>(),
        112usize,
        concat!("Size of: ", stringify!(_zend_internal_function))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).arg_flags as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).fn_flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).function_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).scope as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).prototype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).num_args as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).required_num_args as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).arg_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).handler as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).module as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).reserved as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for _zend_internal_function {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_internal_function = _zend_internal_function;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_function {
    pub type_: zend_uchar,
    pub quick_arg_flags: u32,
    pub common: _zend_function__bindgen_ty_1,
    pub op_array: zend_op_array,
    pub internal_function: zend_internal_function,
    _bindgen_union_align: [u64; 28usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut _zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
}
#[test]
fn bindgen_test_layout__zend_function__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_function__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).arg_flags as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).fn_flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).function_name as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).scope as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).prototype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).num_args as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).required_num_args as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).arg_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_info)
        )
    );
}
impl Default for _zend_function__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__zend_function() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function>(),
        224usize,
        concat!("Size of: ", stringify!(_zend_function))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).quick_arg_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(quick_arg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).op_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(op_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function>())).internal_function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(internal_function)
        )
    );
}
impl Default for _zend_function {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const _zend_call_kind_ZEND_CALL_NESTED_FUNCTION: _zend_call_kind = 0;
pub const _zend_call_kind_ZEND_CALL_NESTED_CODE: _zend_call_kind = 1;
pub const _zend_call_kind_ZEND_CALL_TOP_FUNCTION: _zend_call_kind = 2;
pub const _zend_call_kind_ZEND_CALL_TOP_CODE: _zend_call_kind = 3;
pub type _zend_call_kind = u32;
pub use self::_zend_call_kind as zend_call_kind;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_execute_data {
    pub opline: *const zend_op,
    pub call: *mut zend_execute_data,
    pub return_value: *mut zval,
    pub func: *mut zend_function,
    pub This: zval,
    pub prev_execute_data: *mut zend_execute_data,
    pub symbol_table: *mut zend_array,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub literals: *mut zval,
}
#[test]
fn bindgen_test_layout__zend_execute_data() {
    assert_eq!(
        ::std::mem::size_of::<_zend_execute_data>(),
        80usize,
        concat!("Size of: ", stringify!(_zend_execute_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_execute_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_execute_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).opline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(opline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).call as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).return_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(return_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).This as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(This)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_execute_data>())).prev_execute_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(prev_execute_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).symbol_table as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(symbol_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_execute_data>())).run_time_cache as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(run_time_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).literals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(literals)
        )
    );
}
impl Default for _zend_execute_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    #[link_name = "\u{1}_setjmp"]
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_longjmp"]
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__setjmp"]
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__longjmp"]
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_sigsetjmp"]
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_siglongjmp"]
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_longjmperror"]
    pub fn longjmperror();
}
pub type zend_compiler_globals = _zend_compiler_globals;
pub type zend_executor_globals = _zend_executor_globals;
pub type zend_php_scanner_globals = _zend_php_scanner_globals;
pub type zend_ini_scanner_globals = _zend_ini_scanner_globals;
extern "C" {
    #[link_name = "\u{1}_zendparse"]
    pub fn zendparse() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_language_scanner_globals_id"]
    pub static mut language_scanner_globals_id: ts_rsrc_id;
}
extern "C" {
    #[link_name = "\u{1}_ini_scanner_globals_id"]
    pub static mut ini_scanner_globals_id: ts_rsrc_id;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stack {
    pub size: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_stack() {
    assert_eq!(
        ::std::mem::size_of::<_zend_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).elements as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(elements)
        )
    );
}
impl Default for _zend_stack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_stack = _zend_stack;
extern "C" {
    #[link_name = "\u{1}_zend_stack_init"]
    pub fn zend_stack_init(
        stack: *mut zend_stack,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_push"]
    pub fn zend_stack_push(
        stack: *mut zend_stack,
        element: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_top"]
    pub fn zend_stack_top(stack: *const zend_stack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_del_top"]
    pub fn zend_stack_del_top(stack: *mut zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_int_top"]
    pub fn zend_stack_int_top(stack: *const zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_is_empty"]
    pub fn zend_stack_is_empty(stack: *const zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_destroy"]
    pub fn zend_stack_destroy(stack: *mut zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_base"]
    pub fn zend_stack_base(stack: *const zend_stack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_count"]
    pub fn zend_stack_count(stack: *const zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_apply"]
    pub fn zend_stack_apply(
        stack: *mut zend_stack,
        type_: ::std::os::raw::c_int,
        apply_function: ::std::option::Option<
            unsafe extern "C" fn(element: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_apply_with_argument"]
    pub fn zend_stack_apply_with_argument(
        stack: *mut zend_stack,
        type_: ::std::os::raw::c_int,
        apply_function: ::std::option::Option<
            unsafe extern "C" fn(
                element: *mut ::std::os::raw::c_void,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_stack_clean"]
    pub fn zend_stack_clean(
        stack: *mut zend_stack,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        free_elements: zend_bool,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ptr_stack {
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut *mut ::std::os::raw::c_void,
    pub top_element: *mut *mut ::std::os::raw::c_void,
    pub persistent: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_ptr_stack() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ptr_stack>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_ptr_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ptr_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ptr_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ptr_stack>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ptr_stack>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ptr_stack>())).elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ptr_stack>())).top_element as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(top_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ptr_stack>())).persistent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(persistent)
        )
    );
}
impl Default for _zend_ptr_stack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ptr_stack = _zend_ptr_stack;
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_init"]
    pub fn zend_ptr_stack_init(stack: *mut zend_ptr_stack);
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_init_ex"]
    pub fn zend_ptr_stack_init_ex(stack: *mut zend_ptr_stack, persistent: zend_bool);
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_n_push"]
    pub fn zend_ptr_stack_n_push(stack: *mut zend_ptr_stack, count: ::std::os::raw::c_int, ...);
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_n_pop"]
    pub fn zend_ptr_stack_n_pop(stack: *mut zend_ptr_stack, count: ::std::os::raw::c_int, ...);
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_destroy"]
    pub fn zend_ptr_stack_destroy(stack: *mut zend_ptr_stack);
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_apply"]
    pub fn zend_ptr_stack_apply(
        stack: *mut zend_ptr_stack,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_clean"]
    pub fn zend_ptr_stack_clean(
        stack: *mut zend_ptr_stack,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        free_elements: zend_bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_ptr_stack_num_elements"]
    pub fn zend_ptr_stack_num_elements(stack: *mut zend_ptr_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_object_std_init"]
    pub fn zend_object_std_init(object: *mut zend_object, ce: *mut zend_class_entry);
}
extern "C" {
    #[link_name = "\u{1}_zend_object_std_dtor"]
    pub fn zend_object_std_dtor(object: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_new"]
    pub fn zend_objects_new(ce: *mut zend_class_entry) -> *mut zend_object;
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_destroy_object"]
    pub fn zend_objects_destroy_object(object: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_clone_members"]
    pub fn zend_objects_clone_members(new_object: *mut zend_object, old_object: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_clone_obj"]
    pub fn zend_objects_clone_obj(object: *mut zval) -> *mut zend_object;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_objects_store {
    pub object_buckets: *mut *mut zend_object,
    pub top: u32,
    pub size: u32,
    pub free_list_head: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_objects_store() {
    assert_eq!(
        ::std::mem::size_of::<_zend_objects_store>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_objects_store))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_objects_store>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_objects_store))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_objects_store>())).object_buckets as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(object_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_objects_store>())).top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_objects_store>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_objects_store>())).free_list_head as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(free_list_head)
        )
    );
}
impl Default for _zend_objects_store {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_objects_store = _zend_objects_store;
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_init"]
    pub fn zend_objects_store_init(objects: *mut zend_objects_store, init_size: u32);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_call_destructors"]
    pub fn zend_objects_store_call_destructors(objects: *mut zend_objects_store);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_mark_destructed"]
    pub fn zend_objects_store_mark_destructed(objects: *mut zend_objects_store);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_free_object_storage"]
    pub fn zend_objects_store_free_object_storage(
        objects: *mut zend_objects_store,
        fast_shutdown: zend_bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_destroy"]
    pub fn zend_objects_store_destroy(objects: *mut zend_objects_store);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_put"]
    pub fn zend_objects_store_put(object: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_objects_store_del"]
    pub fn zend_objects_store_del(object: *mut zend_object);
}
extern "C" {
    #[link_name = "\u{1}_zend_get_std_object_handlers"]
    pub fn zend_get_std_object_handlers() -> *mut zend_object_handlers;
}
extern "C" {
    #[link_name = "\u{1}_zend_init_fpu"]
    pub fn zend_init_fpu();
}
extern "C" {
    #[link_name = "\u{1}_zend_shutdown_fpu"]
    pub fn zend_shutdown_fpu();
}
extern "C" {
    #[link_name = "\u{1}_zend_ensure_fpu_mode"]
    pub fn zend_ensure_fpu_mode();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_encoding {
    _unused: [u8; 0],
}
pub type zend_encoding = _zend_encoding;
pub type zend_encoding_filter = ::std::option::Option<
    unsafe extern "C" fn(
        str: *mut *mut ::std::os::raw::c_uchar,
        str_length: *mut usize,
        buf: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> usize,
>;
pub type zend_encoding_fetcher = ::std::option::Option<
    unsafe extern "C" fn(encoding_name: *const ::std::os::raw::c_char) -> *const zend_encoding,
>;
pub type zend_encoding_name_getter = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> *const ::std::os::raw::c_char,
>;
pub type zend_encoding_lexer_compatibility_checker = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> ::std::os::raw::c_int,
>;
pub type zend_encoding_detector = ::std::option::Option<
    unsafe extern "C" fn(
        string: *const ::std::os::raw::c_uchar,
        length: usize,
        list: *mut *const zend_encoding,
        list_size: usize,
    ) -> *const zend_encoding,
>;
pub type zend_encoding_converter = ::std::option::Option<
    unsafe extern "C" fn(
        to: *mut *mut ::std::os::raw::c_uchar,
        to_length: *mut usize,
        from: *const ::std::os::raw::c_uchar,
        from_length: usize,
        encoding_to: *const zend_encoding,
        encoding_from: *const zend_encoding,
    ) -> usize,
>;
pub type zend_encoding_list_parser = ::std::option::Option<
    unsafe extern "C" fn(
        encoding_list: *const ::std::os::raw::c_char,
        encoding_list_len: usize,
        return_list: *mut *mut *const zend_encoding,
        return_size: *mut usize,
        persistent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_encoding_internal_encoding_getter =
    ::std::option::Option<unsafe extern "C" fn() -> *const zend_encoding>;
pub type zend_encoding_internal_encoding_setter = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_multibyte_functions {
    pub provider_name: *const ::std::os::raw::c_char,
    pub encoding_fetcher: zend_encoding_fetcher,
    pub encoding_name_getter: zend_encoding_name_getter,
    pub lexer_compatibility_checker: zend_encoding_lexer_compatibility_checker,
    pub encoding_detector: zend_encoding_detector,
    pub encoding_converter: zend_encoding_converter,
    pub encoding_list_parser: zend_encoding_list_parser,
    pub internal_encoding_getter: zend_encoding_internal_encoding_getter,
    pub internal_encoding_setter: zend_encoding_internal_encoding_setter,
}
#[test]
fn bindgen_test_layout__zend_multibyte_functions() {
    assert_eq!(
        ::std::mem::size_of::<_zend_multibyte_functions>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_multibyte_functions))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_multibyte_functions>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_multibyte_functions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).provider_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(provider_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).encoding_fetcher as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_fetcher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).encoding_name_getter as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_name_getter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).lexer_compatibility_checker
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(lexer_compatibility_checker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).encoding_detector as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_detector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).encoding_converter as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_converter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).encoding_list_parser as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_list_parser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).internal_encoding_getter
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(internal_encoding_getter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_multibyte_functions>())).internal_encoding_setter
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(internal_encoding_setter)
        )
    );
}
impl Default for _zend_multibyte_functions {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_multibyte_functions = _zend_multibyte_functions;
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_utf32be"]
    pub static mut zend_multibyte_encoding_utf32be: *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_utf32le"]
    pub static mut zend_multibyte_encoding_utf32le: *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_utf16be"]
    pub static mut zend_multibyte_encoding_utf16be: *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_utf16le"]
    pub static mut zend_multibyte_encoding_utf16le: *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_utf8"]
    pub static mut zend_multibyte_encoding_utf8: *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_set_functions"]
    pub fn zend_multibyte_set_functions(
        functions: *const zend_multibyte_functions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_restore_functions"]
    pub fn zend_multibyte_restore_functions();
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_get_functions"]
    pub fn zend_multibyte_get_functions() -> *const zend_multibyte_functions;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_fetch_encoding"]
    pub fn zend_multibyte_fetch_encoding(
        name: *const ::std::os::raw::c_char,
    ) -> *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_get_encoding_name"]
    pub fn zend_multibyte_get_encoding_name(
        encoding: *const zend_encoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_check_lexer_compatibility"]
    pub fn zend_multibyte_check_lexer_compatibility(
        encoding: *const zend_encoding,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_detector"]
    pub fn zend_multibyte_encoding_detector(
        string: *const ::std::os::raw::c_uchar,
        length: usize,
        list: *mut *const zend_encoding,
        list_size: usize,
    ) -> *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_encoding_converter"]
    pub fn zend_multibyte_encoding_converter(
        to: *mut *mut ::std::os::raw::c_uchar,
        to_length: *mut usize,
        from: *const ::std::os::raw::c_uchar,
        from_length: usize,
        encoding_to: *const zend_encoding,
        encoding_from: *const zend_encoding,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_parse_encoding_list"]
    pub fn zend_multibyte_parse_encoding_list(
        encoding_list: *const ::std::os::raw::c_char,
        encoding_list_len: usize,
        return_list: *mut *mut *const zend_encoding,
        return_size: *mut usize,
        persistent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_get_internal_encoding"]
    pub fn zend_multibyte_get_internal_encoding() -> *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_get_script_encoding"]
    pub fn zend_multibyte_get_script_encoding() -> *const zend_encoding;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_set_script_encoding"]
    pub fn zend_multibyte_set_script_encoding(
        encoding_list: *mut *const zend_encoding,
        encoding_list_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_set_internal_encoding"]
    pub fn zend_multibyte_set_internal_encoding(
        encoding: *const zend_encoding,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_multibyte_set_script_encoding_by_string"]
    pub fn zend_multibyte_set_script_encoding_by_string(
        new_value: *const ::std::os::raw::c_char,
        new_value_length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type zend_arena = _zend_arena;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arena {
    pub ptr: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub prev: *mut zend_arena,
}
#[test]
fn bindgen_test_layout__zend_arena() {
    assert_eq!(
        ::std::mem::size_of::<_zend_arena>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_arena))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arena>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arena))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arena>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arena),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arena>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arena),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arena>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arena),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for _zend_arena {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_compiler_globals_id"]
    pub static mut compiler_globals_id: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_executor_globals_id"]
    pub static mut executor_globals_id: ::std::os::raw::c_int;
}
pub type zend_vm_stack = *mut _zend_vm_stack;
pub type zend_ini_entry = _zend_ini_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_compiler_globals {
    pub loop_var_stack: zend_stack,
    pub active_class_entry: *mut zend_class_entry,
    pub compiled_filename: *mut zend_string,
    pub zend_lineno: ::std::os::raw::c_int,
    pub active_op_array: *mut zend_op_array,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub filenames_table: HashTable,
    pub auto_globals: *mut HashTable,
    pub parse_error: zend_bool,
    pub in_compilation: zend_bool,
    pub short_tags: zend_bool,
    pub unclean_shutdown: zend_bool,
    pub ini_parser_unbuffered_errors: zend_bool,
    pub open_files: zend_llist,
    pub ini_parser_param: *mut _zend_ini_parser_param,
    pub start_lineno: u32,
    pub increment_lineno: zend_bool,
    pub doc_comment: *mut zend_string,
    pub extra_fn_flags: u32,
    pub compiler_options: u32,
    pub context: zend_oparray_context,
    pub file_context: zend_file_context,
    pub arena: *mut zend_arena,
    pub interned_strings: HashTable,
    pub script_encoding_list: *mut *const zend_encoding,
    pub script_encoding_list_size: usize,
    pub multibyte: zend_bool,
    pub detect_unicode: zend_bool,
    pub encoding_declared: zend_bool,
    pub ast: *mut zend_ast,
    pub ast_arena: *mut zend_arena,
    pub delayed_oplines_stack: zend_stack,
    pub static_members_table: *mut *mut zval,
    pub last_static_member: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_compiler_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_compiler_globals>(),
        552usize,
        concat!("Size of: ", stringify!(_zend_compiler_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_compiler_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_compiler_globals))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).loop_var_stack as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(loop_var_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).active_class_entry as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(active_class_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).compiled_filename as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(compiled_filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).zend_lineno as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(zend_lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).active_op_array as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(active_op_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).function_table as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(function_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).class_table as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(class_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).filenames_table as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(filenames_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).auto_globals as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(auto_globals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).parse_error as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(parse_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).in_compilation as *const _ as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(in_compilation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).short_tags as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(short_tags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).unclean_shutdown as *const _ as usize
        },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(unclean_shutdown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).ini_parser_unbuffered_errors
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ini_parser_unbuffered_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).open_files as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(open_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).ini_parser_param as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ini_parser_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).start_lineno as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(start_lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).increment_lineno as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(increment_lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).doc_comment as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).extra_fn_flags as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(extra_fn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).compiler_options as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(compiler_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_compiler_globals>())).context as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).file_context as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(file_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_compiler_globals>())).arena as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).interned_strings as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(interned_strings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).script_encoding_list as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(script_encoding_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).script_encoding_list_size as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(script_encoding_list_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).multibyte as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(multibyte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).detect_unicode as *const _ as usize
        },
        489usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(detect_unicode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).encoding_declared as *const _
                as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(encoding_declared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_compiler_globals>())).ast as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ast)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).ast_arena as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ast_arena)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).delayed_oplines_stack as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(delayed_oplines_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).static_members_table as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(static_members_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_compiler_globals>())).last_static_member as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(last_static_member)
        )
    );
}
impl Default for _zend_compiler_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_executor_globals {
    pub uninitialized_zval: zval,
    pub error_zval: zval,
    pub symtable_cache: [*mut zend_array; 32usize],
    pub symtable_cache_limit: *mut *mut zend_array,
    pub symtable_cache_ptr: *mut *mut zend_array,
    pub symbol_table: zend_array,
    pub included_files: HashTable,
    pub bailout: *mut sigjmp_buf,
    pub error_reporting: ::std::os::raw::c_int,
    pub exit_status: ::std::os::raw::c_int,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub zend_constants: *mut HashTable,
    pub vm_stack_top: *mut zval,
    pub vm_stack_end: *mut zval,
    pub vm_stack: zend_vm_stack,
    pub current_execute_data: *mut _zend_execute_data,
    pub fake_scope: *mut zend_class_entry,
    pub precision: zend_long,
    pub ticks_count: ::std::os::raw::c_int,
    pub in_autoload: *mut HashTable,
    pub autoload_func: *mut zend_function,
    pub full_tables_cleanup: zend_bool,
    pub no_extensions: zend_bool,
    pub vm_interrupt: zend_bool,
    pub timed_out: zend_bool,
    pub hard_timeout: zend_long,
    pub regular_list: HashTable,
    pub persistent_list: HashTable,
    pub user_error_handler_error_reporting: ::std::os::raw::c_int,
    pub user_error_handler: zval,
    pub user_exception_handler: zval,
    pub user_error_handlers_error_reporting: zend_stack,
    pub user_error_handlers: zend_stack,
    pub user_exception_handlers: zend_stack,
    pub error_handling: zend_error_handling_t,
    pub exception_class: *mut zend_class_entry,
    pub timeout_seconds: zend_long,
    pub lambda_count: ::std::os::raw::c_int,
    pub ini_directives: *mut HashTable,
    pub modified_ini_directives: *mut HashTable,
    pub error_reporting_ini_entry: *mut zend_ini_entry,
    pub objects_store: zend_objects_store,
    pub exception: *mut zend_object,
    pub prev_exception: *mut zend_object,
    pub opline_before_exception: *const zend_op,
    pub exception_op: [zend_op; 3usize],
    pub current_module: *mut _zend_module_entry,
    pub active: zend_bool,
    pub flags: zend_uchar,
    pub assertions: zend_long,
    pub ht_iterators_count: u32,
    pub ht_iterators_used: u32,
    pub ht_iterators: *mut HashTableIterator,
    pub ht_iterators_slots: [HashTableIterator; 16usize],
    pub saved_fpu_cw_ptr: *mut ::std::os::raw::c_void,
    pub saved_fpu_cw: ::std::os::raw::c_uint,
    pub trampoline: zend_function,
    pub call_trampoline_op: zend_op,
    pub each_deprecation_thrown: zend_bool,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_executor_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_executor_globals>(),
        1592usize,
        concat!("Size of: ", stringify!(_zend_executor_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_executor_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_executor_globals))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).uninitialized_zval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(uninitialized_zval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_zval as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_zval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache_limit as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache_ptr as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symbol_table as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symbol_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).included_files as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(included_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).bailout as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(bailout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_reporting as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exit_status as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exit_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).function_table as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(function_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).class_table as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(class_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).zend_constants as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(zend_constants)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack_top as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack_end as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).current_execute_data as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_execute_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).fake_scope as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(fake_scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).precision as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ticks_count as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ticks_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).in_autoload as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(in_autoload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).autoload_func as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(autoload_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).full_tables_cleanup as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(full_tables_cleanup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).no_extensions as *const _ as usize
        },
        529usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(no_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_interrupt as *const _ as usize
        },
        530usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_interrupt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).timed_out as *const _ as usize
        },
        531usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timed_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).hard_timeout as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(hard_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).regular_list as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(regular_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).persistent_list as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handler_error_reporting
                as *const _ as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler_error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handler as *const _
                as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_exception_handler as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handlers_error_reporting
                as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers_error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handlers as *const _
                as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_exception_handlers as *const _
                as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_handling as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_handling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception_class as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).timeout_seconds as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timeout_seconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).lambda_count as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(lambda_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ini_directives as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ini_directives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).modified_ini_directives as *const _
                as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(modified_ini_directives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_reporting_ini_entry as *const _
                as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting_ini_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).objects_store as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(objects_store)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).prev_exception as *const _ as usize
        },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(prev_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).opline_before_exception as *const _
                as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(opline_before_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception_op as *const _ as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).current_module as *const _ as usize
        },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).active as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).flags as *const _ as usize },
        977usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).assertions as *const _ as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(assertions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_count as *const _
                as usize
        },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_used as *const _
                as usize
        },
        996usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators as *const _ as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_slots as *const _
                as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_slots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).saved_fpu_cw_ptr as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(saved_fpu_cw_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).saved_fpu_cw as *const _ as usize
        },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(saved_fpu_cw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).trampoline as *const _ as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(trampoline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).call_trampoline_op as *const _
                as usize
        },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(call_trampoline_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).each_deprecation_thrown as *const _
                as usize
        },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(each_deprecation_thrown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).reserved as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for _zend_executor_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_scanner_globals {
    pub yy_in: *mut zend_file_handle,
    pub yy_out: *mut zend_file_handle,
    pub yy_leng: ::std::os::raw::c_uint,
    pub yy_start: *mut ::std::os::raw::c_uchar,
    pub yy_text: *mut ::std::os::raw::c_uchar,
    pub yy_cursor: *mut ::std::os::raw::c_uchar,
    pub yy_marker: *mut ::std::os::raw::c_uchar,
    pub yy_limit: *mut ::std::os::raw::c_uchar,
    pub yy_state: ::std::os::raw::c_int,
    pub state_stack: zend_stack,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub scanner_mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_ini_scanner_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_scanner_globals>(),
        112usize,
        concat!("Size of: ", stringify!(_zend_ini_scanner_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_scanner_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_scanner_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_in as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_in)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_out as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_leng as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_leng)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_start as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_text as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_cursor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_marker as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_limit as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).yy_state as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).state_stack as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(state_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).filename as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).lineno as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_scanner_globals>())).scanner_mode as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(scanner_mode)
        )
    );
}
impl Default for _zend_ini_scanner_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const zend_php_scanner_event_ON_TOKEN: zend_php_scanner_event = 0;
pub const zend_php_scanner_event_ON_FEEDBACK: zend_php_scanner_event = 1;
pub const zend_php_scanner_event_ON_STOP: zend_php_scanner_event = 2;
pub type zend_php_scanner_event = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_php_scanner_globals {
    pub yy_in: *mut zend_file_handle,
    pub yy_out: *mut zend_file_handle,
    pub yy_leng: ::std::os::raw::c_uint,
    pub yy_start: *mut ::std::os::raw::c_uchar,
    pub yy_text: *mut ::std::os::raw::c_uchar,
    pub yy_cursor: *mut ::std::os::raw::c_uchar,
    pub yy_marker: *mut ::std::os::raw::c_uchar,
    pub yy_limit: *mut ::std::os::raw::c_uchar,
    pub yy_state: ::std::os::raw::c_int,
    pub state_stack: zend_stack,
    pub heredoc_label_stack: zend_ptr_stack,
    pub script_org: *mut ::std::os::raw::c_uchar,
    pub script_org_size: usize,
    pub script_filtered: *mut ::std::os::raw::c_uchar,
    pub script_filtered_size: usize,
    pub input_filter: zend_encoding_filter,
    pub output_filter: zend_encoding_filter,
    pub script_encoding: *const zend_encoding,
    pub scanned_string_len: ::std::os::raw::c_int,
    pub on_event: ::std::option::Option<
        unsafe extern "C" fn(
            event: zend_php_scanner_event,
            token: ::std::os::raw::c_int,
            line: ::std::os::raw::c_int,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_event_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_php_scanner_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_php_scanner_globals>(),
        208usize,
        concat!("Size of: ", stringify!(_zend_php_scanner_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_php_scanner_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_php_scanner_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_in as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_in)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_out as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_leng as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_leng)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_start as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_text as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_cursor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_marker as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_limit as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).yy_state as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).state_stack as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(state_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).heredoc_label_stack as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(heredoc_label_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).script_org as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_org)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).script_org_size as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_org_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).script_filtered as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_filtered)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).script_filtered_size as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_filtered_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).input_filter as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(input_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).output_filter as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(output_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).script_encoding as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).scanned_string_len as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(scanned_string_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).on_event as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(on_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_php_scanner_globals>())).on_event_context as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(on_event_context)
        )
    );
}
impl Default for _zend_php_scanner_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_init_compiler"]
    pub fn init_compiler();
}
extern "C" {
    #[link_name = "\u{1}_shutdown_compiler"]
    pub fn shutdown_compiler();
}
extern "C" {
    #[link_name = "\u{1}_zend_init_compiler_data_structures"]
    pub fn zend_init_compiler_data_structures();
}
extern "C" {
    #[link_name = "\u{1}_zend_oparray_context_begin"]
    pub fn zend_oparray_context_begin(prev_context: *mut zend_oparray_context);
}
extern "C" {
    #[link_name = "\u{1}_zend_oparray_context_end"]
    pub fn zend_oparray_context_end(prev_context: *mut zend_oparray_context);
}
extern "C" {
    #[link_name = "\u{1}_zend_file_context_begin"]
    pub fn zend_file_context_begin(prev_context: *mut zend_file_context);
}
extern "C" {
    #[link_name = "\u{1}_zend_file_context_end"]
    pub fn zend_file_context_end(prev_context: *mut zend_file_context);
}
extern "C" {
    #[link_name = "\u{1}_zend_compile_file"]
    pub static mut zend_compile_file: ::std::option::Option<
        unsafe extern "C" fn(file_handle: *mut zend_file_handle, type_: ::std::os::raw::c_int)
            -> *mut zend_op_array,
    >;
}
extern "C" {
    #[link_name = "\u{1}_zend_compile_string"]
    pub static mut zend_compile_string: ::std::option::Option<
        unsafe extern "C" fn(source_string: *mut zval, filename: *mut ::std::os::raw::c_char)
            -> *mut zend_op_array,
    >;
}
extern "C" {
    #[link_name = "\u{1}_lex_scan"]
    pub fn lex_scan(zendlval: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_startup_scanner"]
    pub fn startup_scanner();
}
extern "C" {
    #[link_name = "\u{1}_shutdown_scanner"]
    pub fn shutdown_scanner();
}
extern "C" {
    #[link_name = "\u{1}_zend_set_compiled_filename"]
    pub fn zend_set_compiled_filename(new_compiled_filename: *mut zend_string) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_restore_compiled_filename"]
    pub fn zend_restore_compiled_filename(original_compiled_filename: *mut zend_string);
}
extern "C" {
    #[link_name = "\u{1}_zend_get_compiled_filename"]
    pub fn zend_get_compiled_filename() -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_compiled_lineno"]
    pub fn zend_get_compiled_lineno() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_scanned_file_offset"]
    pub fn zend_get_scanned_file_offset() -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_compiled_variable_name"]
    pub fn zend_get_compiled_variable_name(
        op_array: *const zend_op_array,
        var: u32,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_zendtext"]
    pub fn zend_get_zendtext() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_zendleng"]
    pub fn zend_get_zendleng() -> ::std::os::raw::c_int;
}
pub type unary_op_type = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zval, arg2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type binary_op_type = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zval, arg2: *mut zval, arg3: *mut zval)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    #[link_name = "\u{1}_get_unary_op"]
    pub fn get_unary_op(opcode: ::std::os::raw::c_int) -> unary_op_type;
}
extern "C" {
    #[link_name = "\u{1}_get_binary_op"]
    pub fn get_binary_op(opcode: ::std::os::raw::c_int) -> binary_op_type;
}
extern "C" {
    #[link_name = "\u{1}_zend_stop_lexing"]
    pub fn zend_stop_lexing();
}
extern "C" {
    #[link_name = "\u{1}_zend_emit_final_return"]
    pub fn zend_emit_final_return(return_one: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_ast_append_str"]
    pub fn zend_ast_append_str(left: *mut zend_ast, right: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_negate_num_string"]
    pub fn zend_negate_num_string(ast: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    #[link_name = "\u{1}_zend_add_class_modifier"]
    pub fn zend_add_class_modifier(flags: u32, new_flag: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_add_member_modifier"]
    pub fn zend_add_member_modifier(flags: u32, new_flag: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_handle_encoding_declaration"]
    pub fn zend_handle_encoding_declaration(ast: *mut zend_ast);
}
extern "C" {
    #[link_name = "\u{1}_zend_do_free"]
    pub fn zend_do_free(op1: *mut znode);
}
extern "C" {
    #[link_name = "\u{1}_do_bind_function"]
    pub fn do_bind_function(
        op_array: *const zend_op_array,
        opline: *const zend_op,
        function_table: *mut HashTable,
        compile_time: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_do_bind_class"]
    pub fn do_bind_class(
        op_array: *const zend_op_array,
        opline: *const zend_op,
        class_table: *mut HashTable,
        compile_time: zend_bool,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_do_bind_inherited_class"]
    pub fn do_bind_inherited_class(
        op_array: *const zend_op_array,
        opline: *const zend_op,
        class_table: *mut HashTable,
        parent_ce: *mut zend_class_entry,
        compile_time: zend_bool,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_do_delayed_early_binding"]
    pub fn zend_do_delayed_early_binding(op_array: *const zend_op_array);
}
extern "C" {
    #[link_name = "\u{1}_zend_do_extended_info"]
    pub fn zend_do_extended_info();
}
extern "C" {
    #[link_name = "\u{1}_zend_do_extended_fcall_begin"]
    pub fn zend_do_extended_fcall_begin();
}
extern "C" {
    #[link_name = "\u{1}_zend_do_extended_fcall_end"]
    pub fn zend_do_extended_fcall_end();
}
extern "C" {
    #[link_name = "\u{1}_zend_verify_namespace"]
    pub fn zend_verify_namespace();
}
extern "C" {
    #[link_name = "\u{1}_zend_resolve_goto_label"]
    pub fn zend_resolve_goto_label(op_array: *mut zend_op_array, opline: *mut zend_op);
}
extern "C" {
    #[link_name = "\u{1}_function_add_ref"]
    pub fn function_add_ref(function: *mut zend_function);
}
extern "C" {
    #[link_name = "\u{1}_compile_file"]
    pub fn compile_file(
        file_handle: *mut zend_file_handle,
        type_: ::std::os::raw::c_int,
    ) -> *mut zend_op_array;
}
extern "C" {
    #[link_name = "\u{1}_compile_string"]
    pub fn compile_string(
        source_string: *mut zval,
        filename: *mut ::std::os::raw::c_char,
    ) -> *mut zend_op_array;
}
extern "C" {
    #[link_name = "\u{1}_compile_filename"]
    pub fn compile_filename(
        type_: ::std::os::raw::c_int,
        filename: *mut zval,
    ) -> *mut zend_op_array;
}
extern "C" {
    #[link_name = "\u{1}_zend_try_exception_handler"]
    pub fn zend_try_exception_handler();
}
extern "C" {
    #[link_name = "\u{1}_zend_execute_scripts"]
    pub fn zend_execute_scripts(
        type_: ::std::os::raw::c_int,
        retval: *mut zval,
        file_count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_open_file_for_scanning"]
    pub fn open_file_for_scanning(file_handle: *mut zend_file_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_init_op_array"]
    pub fn init_op_array(
        op_array: *mut zend_op_array,
        type_: zend_uchar,
        initial_ops_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_destroy_op_array"]
    pub fn destroy_op_array(op_array: *mut zend_op_array);
}
extern "C" {
    #[link_name = "\u{1}_zend_destroy_file_handle"]
    pub fn zend_destroy_file_handle(file_handle: *mut zend_file_handle);
}
extern "C" {
    #[link_name = "\u{1}_zend_cleanup_internal_class_data"]
    pub fn zend_cleanup_internal_class_data(ce: *mut zend_class_entry);
}
extern "C" {
    #[link_name = "\u{1}_zend_cleanup_internal_classes"]
    pub fn zend_cleanup_internal_classes();
}
extern "C" {
    #[link_name = "\u{1}_destroy_zend_function"]
    pub fn destroy_zend_function(function: *mut zend_function);
}
extern "C" {
    #[link_name = "\u{1}_zend_function_dtor"]
    pub fn zend_function_dtor(zv: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_destroy_zend_class"]
    pub fn destroy_zend_class(zv: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_class_add_ref"]
    pub fn zend_class_add_ref(zv: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_mangle_property_name"]
    pub fn zend_mangle_property_name(
        src1: *const ::std::os::raw::c_char,
        src1_length: usize,
        src2: *const ::std::os::raw::c_char,
        src2_length: usize,
        internal: ::std::os::raw::c_int,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_unmangle_property_name_ex"]
    pub fn zend_unmangle_property_name_ex(
        name: *const zend_string,
        class_name: *mut *const ::std::os::raw::c_char,
        prop_name: *mut *const ::std::os::raw::c_char,
        prop_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_get_next_op"]
    pub fn get_next_op(op_array: *mut zend_op_array) -> *mut zend_op;
}
extern "C" {
    #[link_name = "\u{1}_init_op"]
    pub fn init_op(op: *mut zend_op);
}
extern "C" {
    #[link_name = "\u{1}_get_next_op_number"]
    pub fn get_next_op_number(op_array: *mut zend_op_array) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_pass_two"]
    pub fn pass_two(op_array: *mut zend_op_array) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_get_next_brk_cont_element"]
    pub fn get_next_brk_cont_element() -> *mut zend_brk_cont_element;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_compiling"]
    pub fn zend_is_compiling() -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_make_compiled_string_description"]
    pub fn zend_make_compiled_string_description(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_initialize_class_data"]
    pub fn zend_initialize_class_data(ce: *mut zend_class_entry, nullify_handlers: zend_bool);
}
extern "C" {
    #[link_name = "\u{1}_zend_get_class_fetch_type"]
    pub fn zend_get_class_fetch_type(name: *mut zend_string) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_call_op"]
    pub fn zend_get_call_op(init_op: *const zend_op, fbc: *mut zend_function) -> zend_uchar;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_smart_branch"]
    pub fn zend_is_smart_branch(opline: *mut zend_op) -> ::std::os::raw::c_int;
}
pub type zend_auto_global_callback =
    ::std::option::Option<unsafe extern "C" fn(name: *mut zend_string) -> zend_bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_auto_global {
    pub name: *mut zend_string,
    pub auto_global_callback: zend_auto_global_callback,
    pub jit: zend_bool,
    pub armed: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_auto_global() {
    assert_eq!(
        ::std::mem::size_of::<_zend_auto_global>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_auto_global))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_auto_global>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_auto_global))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_auto_global>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_auto_global>())).auto_global_callback as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(auto_global_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_auto_global>())).jit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(jit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_auto_global>())).armed as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(armed)
        )
    );
}
impl Default for _zend_auto_global {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_auto_global = _zend_auto_global;
extern "C" {
    #[link_name = "\u{1}_zend_register_auto_global"]
    pub fn zend_register_auto_global(
        name: *mut zend_string,
        jit: zend_bool,
        auto_global_callback: zend_auto_global_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_activate_auto_globals"]
    pub fn zend_activate_auto_globals();
}
extern "C" {
    #[link_name = "\u{1}_zend_is_auto_global"]
    pub fn zend_is_auto_global(name: *mut zend_string) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_auto_global_str"]
    pub fn zend_is_auto_global_str(name: *mut ::std::os::raw::c_char, len: usize) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_dirname"]
    pub fn zend_dirname(path: *mut ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_function_arg_flags"]
    pub fn zend_set_function_arg_flags(func: *mut zend_function);
}
extern "C" {
    #[link_name = "\u{1}_zendlex"]
    pub fn zendlex(elem: *mut zend_parser_stack_elem) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_add_literal"]
    pub fn zend_add_literal(op_array: *mut zend_op_array, zv: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_assert_valid_class_name"]
    pub fn zend_assert_valid_class_name(const_name: *const zend_string);
}
extern "C" {
    #[link_name = "\u{1}_zend_get_opcode_name"]
    pub fn zend_get_opcode_name(opcode: zend_uchar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_opcode_flags"]
    pub fn zend_get_opcode_flags(opcode: zend_uchar) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_binary_op_produces_numeric_string_error"]
    pub fn zend_binary_op_produces_numeric_string_error(
        opcode: u32,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_bool;
}
pub type zend_module_entry = _zend_module_entry;
pub type zend_module_dep = _zend_module_dep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_entry {
    pub size: ::std::os::raw::c_ushort,
    pub zend_api: ::std::os::raw::c_uint,
    pub zend_debug: ::std::os::raw::c_uchar,
    pub zts: ::std::os::raw::c_uchar,
    pub ini_entry: *const _zend_ini_entry,
    pub deps: *const _zend_module_dep,
    pub name: *const ::std::os::raw::c_char,
    pub functions: *const _zend_function_entry,
    pub module_startup_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub module_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub request_startup_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub request_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub info_func: ::std::option::Option<unsafe extern "C" fn(zend_module: *mut zend_module_entry)>,
    pub version: *const ::std::os::raw::c_char,
    pub globals_size: usize,
    pub globals_id_ptr: *mut ts_rsrc_id,
    pub globals_ctor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub globals_dtor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub post_deactivate_func:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub module_started: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_uchar,
    pub handle: *mut ::std::os::raw::c_void,
    pub module_number: ::std::os::raw::c_int,
    pub build_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_module_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_module_entry>(),
        168usize,
        concat!("Size of: ", stringify!(_zend_module_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zend_api as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_api)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zend_debug as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zts as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).ini_entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(ini_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).deps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).functions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_startup_func as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_startup_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_shutdown_func as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_shutdown_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).request_startup_func as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_startup_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).request_shutdown_func as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_shutdown_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).info_func as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(info_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).version as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).globals_id_ptr as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_id_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_ctor as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ctor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_dtor as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_dtor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).post_deactivate_func as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(post_deactivate_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_started as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_started)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).type_ as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).handle as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_number as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).build_id as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(build_id)
        )
    );
}
impl Default for _zend_module_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_dep {
    pub name: *const ::std::os::raw::c_char,
    pub rel: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__zend_module_dep() {
    assert_eq!(
        ::std::mem::size_of::<_zend_module_dep>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_module_dep))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_dep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for _zend_module_dep {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_module_registry"]
    pub static mut module_registry: HashTable;
}
extern "C" {
    #[link_name = "\u{1}_module_destructor"]
    pub fn module_destructor(module: *mut zend_module_entry);
}
extern "C" {
    #[link_name = "\u{1}_module_registry_request_startup"]
    pub fn module_registry_request_startup(module: *mut zend_module_entry)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_module_registry_unload_temp"]
    pub fn module_registry_unload_temp(module: *const zend_module_entry) -> ::std::os::raw::c_int;
}
pub type rsrc_dtor_func_t = ::std::option::Option<unsafe extern "C" fn(res: *mut zend_resource)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_rsrc_list_dtors_entry {
    pub list_dtor_ex: rsrc_dtor_func_t,
    pub plist_dtor_ex: rsrc_dtor_func_t,
    pub type_name: *const ::std::os::raw::c_char,
    pub module_number: ::std::os::raw::c_int,
    pub resource_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_rsrc_list_dtors_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_rsrc_list_dtors_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_rsrc_list_dtors_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_rsrc_list_dtors_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_rsrc_list_dtors_entry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_rsrc_list_dtors_entry>())).list_dtor_ex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(list_dtor_ex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_rsrc_list_dtors_entry>())).plist_dtor_ex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(plist_dtor_ex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_rsrc_list_dtors_entry>())).type_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_rsrc_list_dtors_entry>())).module_number as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(module_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_rsrc_list_dtors_entry>())).resource_id as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(resource_id)
        )
    );
}
impl Default for _zend_rsrc_list_dtors_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_rsrc_list_dtors_entry = _zend_rsrc_list_dtors_entry;
extern "C" {
    #[link_name = "\u{1}_zend_register_list_destructors_ex"]
    pub fn zend_register_list_destructors_ex(
        ld: rsrc_dtor_func_t,
        pld: rsrc_dtor_func_t,
        type_name: *const ::std::os::raw::c_char,
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_list_entry_destructor"]
    pub fn list_entry_destructor(ptr: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_plist_entry_destructor"]
    pub fn plist_entry_destructor(ptr: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_clean_module_rsrc_dtors"]
    pub fn zend_clean_module_rsrc_dtors(module_number: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_init_rsrc_list"]
    pub fn zend_init_rsrc_list() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_init_rsrc_plist"]
    pub fn zend_init_rsrc_plist() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_close_rsrc_list"]
    pub fn zend_close_rsrc_list(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_destroy_rsrc_list"]
    pub fn zend_destroy_rsrc_list(ht: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_init_rsrc_list_dtors"]
    pub fn zend_init_rsrc_list_dtors() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_destroy_rsrc_list_dtors"]
    pub fn zend_destroy_rsrc_list_dtors();
}
extern "C" {
    #[link_name = "\u{1}_zend_list_insert"]
    pub fn zend_list_insert(
        ptr: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_list_free"]
    pub fn zend_list_free(res: *mut zend_resource) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_list_delete"]
    pub fn zend_list_delete(res: *mut zend_resource) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_list_close"]
    pub fn zend_list_close(res: *mut zend_resource) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_resource"]
    pub fn zend_register_resource(
        rsrc_pointer: *mut ::std::os::raw::c_void,
        rsrc_type: ::std::os::raw::c_int,
    ) -> *mut zend_resource;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_resource"]
    pub fn zend_fetch_resource(
        res: *mut zend_resource,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_resource2"]
    pub fn zend_fetch_resource2(
        res: *mut zend_resource,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
        resource_type2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_resource_ex"]
    pub fn zend_fetch_resource_ex(
        res: *mut zval,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_resource2_ex"]
    pub fn zend_fetch_resource2_ex(
        res: *mut zval,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
        resource_type2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_zend_rsrc_list_get_rsrc_type"]
    pub fn zend_rsrc_list_get_rsrc_type(res: *mut zend_resource) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_list_dtor_id"]
    pub fn zend_fetch_list_dtor_id(
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_le_index_ptr"]
    pub static mut le_index_ptr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_execute_ex"]
    pub static mut zend_execute_ex:
        ::std::option::Option<unsafe extern "C" fn(execute_data: *mut zend_execute_data)>;
}
extern "C" {
    #[link_name = "\u{1}_zend_execute_internal"]
    pub static mut zend_execute_internal: ::std::option::Option<
        unsafe extern "C" fn(execute_data: *mut zend_execute_data, return_value: *mut zval),
    >;
}
extern "C" {
    #[link_name = "\u{1}_init_executor"]
    pub fn init_executor();
}
extern "C" {
    #[link_name = "\u{1}_shutdown_executor"]
    pub fn shutdown_executor();
}
extern "C" {
    #[link_name = "\u{1}_shutdown_destructors"]
    pub fn shutdown_destructors();
}
extern "C" {
    #[link_name = "\u{1}_zend_init_execute_data"]
    pub fn zend_init_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_init_func_execute_data"]
    pub fn zend_init_func_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_init_code_execute_data"]
    pub fn zend_init_code_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_execute"]
    pub fn zend_execute(op_array: *mut zend_op_array, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_execute_ex"]
    pub fn execute_ex(execute_data: *mut zend_execute_data);
}
extern "C" {
    #[link_name = "\u{1}_execute_internal"]
    pub fn execute_internal(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_lookup_class"]
    pub fn zend_lookup_class(name: *mut zend_string) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_lookup_class_ex"]
    pub fn zend_lookup_class_ex(
        name: *mut zend_string,
        key: *const zval,
        use_autoload: ::std::os::raw::c_int,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_called_scope"]
    pub fn zend_get_called_scope(ex: *mut zend_execute_data) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_this_object"]
    pub fn zend_get_this_object(ex: *mut zend_execute_data) -> *mut zend_object;
}
extern "C" {
    #[link_name = "\u{1}_zend_eval_string"]
    pub fn zend_eval_string(
        str: *mut ::std::os::raw::c_char,
        retval_ptr: *mut zval,
        string_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_eval_stringl"]
    pub fn zend_eval_stringl(
        str: *mut ::std::os::raw::c_char,
        str_len: usize,
        retval_ptr: *mut zval,
        string_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_eval_string_ex"]
    pub fn zend_eval_string_ex(
        str: *mut ::std::os::raw::c_char,
        retval_ptr: *mut zval,
        string_name: *mut ::std::os::raw::c_char,
        handle_exceptions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_eval_stringl_ex"]
    pub fn zend_eval_stringl_ex(
        str: *mut ::std::os::raw::c_char,
        str_len: usize,
        retval_ptr: *mut zval,
        string_name: *mut ::std::os::raw::c_char,
        handle_exceptions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_pass_function"]
    pub static zend_pass_function: zend_internal_function;
}
extern "C" {
    #[link_name = "\u{1}_zend_check_internal_arg_type"]
    pub fn zend_check_internal_arg_type(zf: *mut zend_function, arg_num: u32, arg: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_check_arg_type"]
    pub fn zend_check_arg_type(
        zf: *mut zend_function,
        arg_num: u32,
        arg: *mut zval,
        default_value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_missing_arg_error"]
    pub fn zend_missing_arg_error(execute_data: *mut zend_execute_data);
}
extern "C" {
    #[link_name = "\u{1}_zval_update_constant"]
    pub fn zval_update_constant(pp: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zval_update_constant_ex"]
    pub fn zval_update_constant_ex(
        pp: *mut zval,
        scope: *mut zend_class_entry,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_vm_stack {
    pub top: *mut zval,
    pub end: *mut zval,
    pub prev: zend_vm_stack,
}
#[test]
fn bindgen_test_layout__zend_vm_stack() {
    assert_eq!(
        ::std::mem::size_of::<_zend_vm_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_vm_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_vm_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_vm_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for _zend_vm_stack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_zend_vm_stack_init"]
    pub fn zend_vm_stack_init();
}
extern "C" {
    #[link_name = "\u{1}_zend_vm_stack_destroy"]
    pub fn zend_vm_stack_destroy();
}
extern "C" {
    #[link_name = "\u{1}_zend_vm_stack_extend"]
    pub fn zend_vm_stack_extend(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_get_active_class_name"]
    pub fn get_active_class_name(
        space: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_get_active_function_name"]
    pub fn get_active_function_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_executed_filename"]
    pub fn zend_get_executed_filename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_executed_filename_ex"]
    pub fn zend_get_executed_filename_ex() -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_executed_lineno"]
    pub fn zend_get_executed_lineno() -> u32;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_executed_scope"]
    pub fn zend_get_executed_scope() -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_executing"]
    pub fn zend_is_executing() -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_timeout"]
    pub fn zend_set_timeout(seconds: zend_long, reset_signals: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_unset_timeout"]
    pub fn zend_unset_timeout();
}
extern "C" {
    #[link_name = "\u{1}_zend_timeout"]
    pub fn zend_timeout(dummy: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_class"]
    pub fn zend_fetch_class(
        class_name: *mut zend_string,
        fetch_type: ::std::os::raw::c_int,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_class_by_name"]
    pub fn zend_fetch_class_by_name(
        class_name: *mut zend_string,
        key: *const zval,
        fetch_type: ::std::os::raw::c_int,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_verify_abstract_class"]
    pub fn zend_verify_abstract_class(ce: *mut zend_class_entry);
}
extern "C" {
    #[link_name = "\u{1}_zend_fetch_dimension_const"]
    pub fn zend_fetch_dimension_const(
        result: *mut zval,
        container: *mut zval,
        dim: *mut zval,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_get_compiled_variable_value"]
    pub fn zend_get_compiled_variable_value(
        execute_data_ptr: *const zend_execute_data,
        var: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_user_opcode_handler"]
    pub fn zend_set_user_opcode_handler(
        opcode: zend_uchar,
        handler: user_opcode_handler_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_user_opcode_handler"]
    pub fn zend_get_user_opcode_handler(opcode: zend_uchar) -> user_opcode_handler_t;
}
pub type zend_free_op = *mut zval;
extern "C" {
    #[link_name = "\u{1}_zend_get_zval_ptr"]
    pub fn zend_get_zval_ptr(
        op_type: ::std::os::raw::c_int,
        node: *const znode_op,
        execute_data: *const zend_execute_data,
        should_free: *mut zend_free_op,
        type_: ::std::os::raw::c_int,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_clean_and_cache_symbol_table"]
    pub fn zend_clean_and_cache_symbol_table(symbol_table: *mut zend_array);
}
extern "C" {
    #[link_name = "\u{1}_zend_free_compiled_variables"]
    pub fn zend_free_compiled_variables(execute_data: *mut zend_execute_data);
}
extern "C" {
    #[link_name = "\u{1}_zend_cleanup_unfinished_execution"]
    pub fn zend_cleanup_unfinished_execution(
        execute_data: *mut zend_execute_data,
        op_num: u32,
        catch_op_num: u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_do_fcall_overloaded"]
    pub fn zend_do_fcall_overloaded(
        call: *mut zend_execute_data,
        ret: *mut zval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_entry {
    pub fname: *const ::std::os::raw::c_char,
    pub handler: zif_handler,
    pub arg_info: *const _zend_internal_arg_info,
    pub num_args: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout__zend_function_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_function_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).arg_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).num_args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for _zend_function_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_function_entry = _zend_function_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_fcall_info {
    pub size: usize,
    pub function_name: zval,
    pub retval: *mut zval,
    pub params: *mut zval,
    pub object: *mut zend_object,
    pub no_separation: zend_bool,
    pub param_count: u32,
}
#[test]
fn bindgen_test_layout__zend_fcall_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_fcall_info>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_fcall_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_fcall_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_fcall_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).function_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).retval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).params as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).object as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).no_separation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(no_separation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info>())).param_count as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(param_count)
        )
    );
}
impl Default for _zend_fcall_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_fcall_info = _zend_fcall_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_fcall_info_cache {
    pub initialized: zend_bool,
    pub function_handler: *mut zend_function,
    pub calling_scope: *mut zend_class_entry,
    pub called_scope: *mut zend_class_entry,
    pub object: *mut zend_object,
}
#[test]
fn bindgen_test_layout__zend_fcall_info_cache() {
    assert_eq!(
        ::std::mem::size_of::<_zend_fcall_info_cache>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_fcall_info_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_fcall_info_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_fcall_info_cache))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_fcall_info_cache>())).initialized as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_fcall_info_cache>())).function_handler as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(function_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_fcall_info_cache>())).calling_scope as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(calling_scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_fcall_info_cache>())).called_scope as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(called_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_fcall_info_cache>())).object as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(object)
        )
    );
}
impl Default for _zend_fcall_info_cache {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_fcall_info_cache = _zend_fcall_info_cache;
extern "C" {
    #[link_name = "\u{1}_zend_next_free_module"]
    pub fn zend_next_free_module() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_parameters"]
    pub fn zend_get_parameters(
        ht: ::std::os::raw::c_int,
        param_count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_parameters_ex"]
    pub fn zend_get_parameters_ex(param_count: ::std::os::raw::c_int, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__zend_get_parameters_array_ex"]
    pub fn _zend_get_parameters_array_ex(
        param_count: ::std::os::raw::c_int,
        argument_array: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_copy_parameters_array"]
    pub fn zend_copy_parameters_array(
        param_count: ::std::os::raw::c_int,
        argument_array: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_parameters"]
    pub fn zend_parse_parameters(
        num_args: ::std::os::raw::c_int,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_parameters_ex"]
    pub fn zend_parse_parameters_ex(
        flags: ::std::os::raw::c_int,
        num_args: ::std::os::raw::c_int,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_parameters_throw"]
    pub fn zend_parse_parameters_throw(
        num_args: ::std::os::raw::c_int,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_zval_type_name"]
    pub fn zend_zval_type_name(arg: *const zval) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_zval_get_type"]
    pub fn zend_zval_get_type(arg: *const zval) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_method_parameters"]
    pub fn zend_parse_method_parameters(
        num_args: ::std::os::raw::c_int,
        this_ptr: *mut zval,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_method_parameters_ex"]
    pub fn zend_parse_method_parameters_ex(
        flags: ::std::os::raw::c_int,
        num_args: ::std::os::raw::c_int,
        this_ptr: *mut zval,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_parameter"]
    pub fn zend_parse_parameter(
        flags: ::std::os::raw::c_int,
        arg_num: ::std::os::raw::c_int,
        arg: *mut zval,
        spec: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_functions"]
    pub fn zend_register_functions(
        scope: *mut zend_class_entry,
        functions: *const zend_function_entry,
        function_table: *mut HashTable,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_unregister_functions"]
    pub fn zend_unregister_functions(
        functions: *const zend_function_entry,
        count: ::std::os::raw::c_int,
        function_table: *mut HashTable,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_startup_module"]
    pub fn zend_startup_module(module_entry: *mut zend_module_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_internal_module"]
    pub fn zend_register_internal_module(
        module_entry: *mut zend_module_entry,
    ) -> *mut zend_module_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_module_ex"]
    pub fn zend_register_module_ex(module: *mut zend_module_entry) -> *mut zend_module_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_startup_module_ex"]
    pub fn zend_startup_module_ex(module: *mut zend_module_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_startup_modules"]
    pub fn zend_startup_modules() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_collect_module_handlers"]
    pub fn zend_collect_module_handlers();
}
extern "C" {
    #[link_name = "\u{1}_zend_destroy_modules"]
    pub fn zend_destroy_modules();
}
extern "C" {
    #[link_name = "\u{1}_zend_check_magic_method_implementation"]
    pub fn zend_check_magic_method_implementation(
        ce: *const zend_class_entry,
        fptr: *const zend_function,
        error_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_internal_class"]
    pub fn zend_register_internal_class(
        class_entry: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_internal_class_ex"]
    pub fn zend_register_internal_class_ex(
        class_entry: *mut zend_class_entry,
        parent_ce: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_internal_interface"]
    pub fn zend_register_internal_interface(
        orig_class_entry: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    #[link_name = "\u{1}_zend_class_implements"]
    pub fn zend_class_implements(
        class_entry: *mut zend_class_entry,
        num_interfaces: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_class_alias_ex"]
    pub fn zend_register_class_alias_ex(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        ce: *mut zend_class_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_disable_function"]
    pub fn zend_disable_function(
        function_name: *mut ::std::os::raw::c_char,
        function_name_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_disable_class"]
    pub fn zend_disable_class(
        class_name: *mut ::std::os::raw::c_char,
        class_name_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_wrong_param_count"]
    pub fn zend_wrong_param_count();
}
extern "C" {
    #[link_name = "\u{1}_zend_get_callable_name_ex"]
    pub fn zend_get_callable_name_ex(
        callable: *mut zval,
        object: *mut zend_object,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_callable_name"]
    pub fn zend_get_callable_name(callable: *mut zval) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_callable_ex"]
    pub fn zend_is_callable_ex(
        callable: *mut zval,
        object: *mut zend_object,
        check_flags: u32,
        callable_name: *mut *mut zend_string,
        fcc: *mut zend_fcall_info_cache,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_callable"]
    pub fn zend_is_callable(
        callable: *mut zval,
        check_flags: u32,
        callable_name: *mut *mut zend_string,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_make_callable"]
    pub fn zend_make_callable(
        callable: *mut zval,
        callable_name: *mut *mut zend_string,
    ) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_module_version"]
    pub fn zend_get_module_version(
        module_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_module_started"]
    pub fn zend_get_module_started(
        module_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_ex"]
    pub fn zend_declare_property_ex(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        property: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property"]
    pub fn zend_declare_property(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        property: *mut zval,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_null"]
    pub fn zend_declare_property_null(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_bool"]
    pub fn zend_declare_property_bool(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_long"]
    pub fn zend_declare_property_long(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_double"]
    pub fn zend_declare_property_double(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_string"]
    pub fn zend_declare_property_string(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_property_stringl"]
    pub fn zend_declare_property_stringl(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        access_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_ex"]
    pub fn zend_declare_class_constant_ex(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        value: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant"]
    pub fn zend_declare_class_constant(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_null"]
    pub fn zend_declare_class_constant_null(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_long"]
    pub fn zend_declare_class_constant_long(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_bool"]
    pub fn zend_declare_class_constant_bool(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_double"]
    pub fn zend_declare_class_constant_double(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_stringl"]
    pub fn zend_declare_class_constant_stringl(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_declare_class_constant_string"]
    pub fn zend_declare_class_constant_string(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_class_constants"]
    pub fn zend_update_class_constants(class_type: *mut zend_class_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_ex"]
    pub fn zend_update_property_ex(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *mut zend_string,
        value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property"]
    pub fn zend_update_property(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_null"]
    pub fn zend_update_property_null(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_bool"]
    pub fn zend_update_property_bool(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_long"]
    pub fn zend_update_property_long(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_double"]
    pub fn zend_update_property_double(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_str"]
    pub fn zend_update_property_str(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zend_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_string"]
    pub fn zend_update_property_string(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_property_stringl"]
    pub fn zend_update_property_stringl(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_unset_property"]
    pub fn zend_unset_property(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property"]
    pub fn zend_update_static_property(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_null"]
    pub fn zend_update_static_property_null(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_bool"]
    pub fn zend_update_static_property_bool(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_long"]
    pub fn zend_update_static_property_long(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_double"]
    pub fn zend_update_static_property_double(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_string"]
    pub fn zend_update_static_property_string(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_update_static_property_stringl"]
    pub fn zend_update_static_property_stringl(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_read_property_ex"]
    pub fn zend_read_property_ex(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *mut zend_string,
        silent: zend_bool,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_read_property"]
    pub fn zend_read_property(
        scope: *mut zend_class_entry,
        object: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        silent: zend_bool,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_read_static_property"]
    pub fn zend_read_static_property(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        silent: zend_bool,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_type_by_const"]
    pub fn zend_get_type_by_const(type_: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__array_init"]
    pub fn _array_init(
        arg: *mut zval,
        size: u32,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__object_init"]
    pub fn _object_init(
        arg: *mut zval,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__object_init_ex"]
    pub fn _object_init_ex(
        arg: *mut zval,
        ce: *mut zend_class_entry,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__object_and_properties_init"]
    pub fn _object_and_properties_init(
        arg: *mut zval,
        ce: *mut zend_class_entry,
        properties: *mut HashTable,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_object_properties_init"]
    pub fn object_properties_init(object: *mut zend_object, class_type: *mut zend_class_entry);
}
extern "C" {
    #[link_name = "\u{1}_object_properties_init_ex"]
    pub fn object_properties_init_ex(object: *mut zend_object, properties: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_object_properties_load"]
    pub fn object_properties_load(object: *mut zend_object, properties: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_merge_properties"]
    pub fn zend_merge_properties(obj: *mut zval, properties: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_long_ex"]
    pub fn add_assoc_long_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        n: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_null_ex"]
    pub fn add_assoc_null_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_bool_ex"]
    pub fn add_assoc_bool_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_resource_ex"]
    pub fn add_assoc_resource_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        r: *mut zend_resource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_double_ex"]
    pub fn add_assoc_double_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        d: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_str_ex"]
    pub fn add_assoc_str_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_string_ex"]
    pub fn add_assoc_string_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_stringl_ex"]
    pub fn add_assoc_stringl_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_assoc_zval_ex"]
    pub fn add_assoc_zval_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_long"]
    pub fn add_index_long(arg: *mut zval, idx: zend_ulong, n: zend_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_null"]
    pub fn add_index_null(arg: *mut zval, idx: zend_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_bool"]
    pub fn add_index_bool(
        arg: *mut zval,
        idx: zend_ulong,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_resource"]
    pub fn add_index_resource(
        arg: *mut zval,
        idx: zend_ulong,
        r: *mut zend_resource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_double"]
    pub fn add_index_double(arg: *mut zval, idx: zend_ulong, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_str"]
    pub fn add_index_str(
        arg: *mut zval,
        idx: zend_ulong,
        str: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_string"]
    pub fn add_index_string(
        arg: *mut zval,
        idx: zend_ulong,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_stringl"]
    pub fn add_index_stringl(
        arg: *mut zval,
        idx: zend_ulong,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_index_zval"]
    pub fn add_index_zval(
        arg: *mut zval,
        index: zend_ulong,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_long"]
    pub fn add_next_index_long(arg: *mut zval, n: zend_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_null"]
    pub fn add_next_index_null(arg: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_bool"]
    pub fn add_next_index_bool(arg: *mut zval, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_resource"]
    pub fn add_next_index_resource(arg: *mut zval, r: *mut zend_resource) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_double"]
    pub fn add_next_index_double(arg: *mut zval, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_str"]
    pub fn add_next_index_str(arg: *mut zval, str: *mut zend_string) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_string"]
    pub fn add_next_index_string(
        arg: *mut zval,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_stringl"]
    pub fn add_next_index_stringl(
        arg: *mut zval,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_next_index_zval"]
    pub fn add_next_index_zval(arg: *mut zval, value: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_get_assoc_string_ex"]
    pub fn add_get_assoc_string_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: u32,
        str: *const ::std::os::raw::c_char,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_assoc_stringl_ex"]
    pub fn add_get_assoc_stringl_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: u32,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_index_long"]
    pub fn add_get_index_long(arg: *mut zval, idx: zend_ulong, l: zend_long) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_index_double"]
    pub fn add_get_index_double(arg: *mut zval, idx: zend_ulong, d: f64) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_index_str"]
    pub fn add_get_index_str(arg: *mut zval, index: zend_ulong, str: *mut zend_string)
        -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_index_string"]
    pub fn add_get_index_string(
        arg: *mut zval,
        idx: zend_ulong,
        str: *const ::std::os::raw::c_char,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_add_get_index_stringl"]
    pub fn add_get_index_stringl(
        arg: *mut zval,
        idx: zend_ulong,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_array_set_zval_key"]
    pub fn array_set_zval_key(
        ht: *mut HashTable,
        key: *mut zval,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_long_ex"]
    pub fn add_property_long_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        l: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_null_ex"]
    pub fn add_property_null_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_bool_ex"]
    pub fn add_property_bool_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        b: zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_resource_ex"]
    pub fn add_property_resource_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        r: *mut zend_resource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_double_ex"]
    pub fn add_property_double_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        d: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_str_ex"]
    pub fn add_property_str_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_string_ex"]
    pub fn add_property_string_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_stringl_ex"]
    pub fn add_property_stringl_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str: *const ::std::os::raw::c_char,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_property_zval_ex"]
    pub fn add_property_zval_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__call_user_function_ex"]
    pub fn _call_user_function_ex(
        object: *mut zval,
        function_name: *mut zval,
        retval_ptr: *mut zval,
        param_count: u32,
        params: *mut zval,
        no_separation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_empty_fcall_info"]
    pub static empty_fcall_info: zend_fcall_info;
}
extern "C" {
    #[link_name = "\u{1}_empty_fcall_info_cache"]
    pub static empty_fcall_info_cache: zend_fcall_info_cache;
}
extern "C" {
    /// Build zend_call_info/cache from a zval*
    ///
    /// Caller is responsible to provide a return value (fci->retval), otherwise the we will crash.
    /// In order to pass parameters the following members need to be set:
    /// fci->param_count = 0;
    /// fci->params = NULL;
    /// The callable_name argument may be NULL.
    /// Set check_flags to IS_CALLABLE_STRICT for every new usage!
    #[link_name = "\u{1}_zend_fcall_info_init"]
    pub fn zend_fcall_info_init(
        callable: *mut zval,
        check_flags: u32,
        fci: *mut zend_fcall_info,
        fcc: *mut zend_fcall_info_cache,
        callable_name: *mut *mut zend_string,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Clear arguments connected with zend_fcall_info *fci
    /// If free_mem is not zero then the params array gets free'd as well
    #[link_name = "\u{1}_zend_fcall_info_args_clear"]
    pub fn zend_fcall_info_args_clear(fci: *mut zend_fcall_info, free_mem: ::std::os::raw::c_int);
}
extern "C" {
    /// Save current arguments from zend_fcall_info *fci
    /// params array will be set to NULL
    #[link_name = "\u{1}_zend_fcall_info_args_save"]
    pub fn zend_fcall_info_args_save(
        fci: *mut zend_fcall_info,
        param_count: *mut ::std::os::raw::c_int,
        params: *mut *mut zval,
    );
}
extern "C" {
    /// Free arguments connected with zend_fcall_info *fci andset back saved ones.
    #[link_name = "\u{1}_zend_fcall_info_args_restore"]
    pub fn zend_fcall_info_args_restore(
        fci: *mut zend_fcall_info,
        param_count: ::std::os::raw::c_int,
        params: *mut zval,
    );
}
extern "C" {
    /// Set or clear the arguments in the zend_call_info struct taking care of
    /// refcount. If args is NULL and arguments are set then those are cleared.
    #[link_name = "\u{1}_zend_fcall_info_args"]
    pub fn zend_fcall_info_args(
        fci: *mut zend_fcall_info,
        args: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_fcall_info_args_ex"]
    pub fn zend_fcall_info_args_ex(
        fci: *mut zend_fcall_info,
        func: *mut zend_function,
        args: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Set arguments in the zend_fcall_info struct taking care of refcount.
    /// If argc is 0 the arguments which are set will be cleared, else pass
    /// a variable amount of zval** arguments.
    #[link_name = "\u{1}_zend_fcall_info_argp"]
    pub fn zend_fcall_info_argp(
        fci: *mut zend_fcall_info,
        argc: ::std::os::raw::c_int,
        argv: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Set arguments in the zend_fcall_info struct taking care of refcount.
    /// If argc is 0 the arguments which are set will be cleared, else pass
    /// a variable amount of zval** arguments.
    #[link_name = "\u{1}_zend_fcall_info_argv"]
    pub fn zend_fcall_info_argv(
        fci: *mut zend_fcall_info,
        argc: ::std::os::raw::c_int,
        argv: *mut va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Set arguments in the zend_fcall_info struct taking care of refcount.
    /// If argc is 0 the arguments which are set will be cleared, else pass
    /// a variable amount of zval** arguments.
    #[link_name = "\u{1}_zend_fcall_info_argn"]
    pub fn zend_fcall_info_argn(
        fci: *mut zend_fcall_info,
        argc: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Call a function using information created by zend_fcall_info_init()/args().
    /// If args is given then those replace the argument info in fci is temporarily.
    #[link_name = "\u{1}_zend_fcall_info_call"]
    pub fn zend_fcall_info_call(
        fci: *mut zend_fcall_info,
        fcc: *mut zend_fcall_info_cache,
        retval: *mut zval,
        args: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_call_function"]
    pub fn zend_call_function(
        fci: *mut zend_fcall_info,
        fci_cache: *mut zend_fcall_info_cache,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_hash_symbol"]
    pub fn zend_set_hash_symbol(
        symbol: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: ::std::os::raw::c_int,
        is_ref: zend_bool,
        num_symbol_tables: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_delete_global_variable"]
    pub fn zend_delete_global_variable(name: *mut zend_string) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_rebuild_symbol_table"]
    pub fn zend_rebuild_symbol_table() -> *mut zend_array;
}
extern "C" {
    #[link_name = "\u{1}_zend_attach_symbol_table"]
    pub fn zend_attach_symbol_table(execute_data: *mut zend_execute_data);
}
extern "C" {
    #[link_name = "\u{1}_zend_detach_symbol_table"]
    pub fn zend_detach_symbol_table(execute_data: *mut zend_execute_data);
}
extern "C" {
    #[link_name = "\u{1}_zend_set_local_var"]
    pub fn zend_set_local_var(
        name: *mut zend_string,
        value: *mut zval,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_set_local_var_str"]
    pub fn zend_set_local_var_str(
        name: *const ::std::os::raw::c_char,
        len: usize,
        value: *mut zval,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_forbid_dynamic_call"]
    pub fn zend_forbid_dynamic_call(
        func_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_find_alias_name"]
    pub fn zend_find_alias_name(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_resolve_method_name"]
    pub fn zend_resolve_method_name(
        ce: *mut zend_class_entry,
        f: *mut zend_function,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_object_type"]
    pub fn zend_get_object_type(ce: *const zend_class_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_is_iterable"]
    pub fn zend_is_iterable(iterable: *mut zval) -> zend_bool;
}
extern "C" {
    #[link_name = "\u{1}_zif_display_disabled_function"]
    pub fn zif_display_disabled_function(
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zif_display_disabled_class"]
    pub fn zif_display_disabled_class(
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    );
}
pub const _zend_expected_type_Z_EXPECTED_LONG: _zend_expected_type = 0;
pub const _zend_expected_type_Z_EXPECTED_BOOL: _zend_expected_type = 1;
pub const _zend_expected_type_Z_EXPECTED_STRING: _zend_expected_type = 2;
pub const _zend_expected_type_Z_EXPECTED_ARRAY: _zend_expected_type = 3;
pub const _zend_expected_type_Z_EXPECTED_FUNC: _zend_expected_type = 4;
pub const _zend_expected_type_Z_EXPECTED_RESOURCE: _zend_expected_type = 5;
pub const _zend_expected_type_Z_EXPECTED_PATH: _zend_expected_type = 6;
pub const _zend_expected_type_Z_EXPECTED_OBJECT: _zend_expected_type = 7;
pub const _zend_expected_type_Z_EXPECTED_DOUBLE: _zend_expected_type = 8;
pub const _zend_expected_type_Z_EXPECTED_LAST: _zend_expected_type = 9;
pub type _zend_expected_type = u32;
pub use self::_zend_expected_type as zend_expected_type;
extern "C" {
    #[link_name = "\u{1}_zend_wrong_parameters_count_error"]
    pub fn zend_wrong_parameters_count_error(
        throw_: zend_bool,
        num_args: ::std::os::raw::c_int,
        min_num_args: ::std::os::raw::c_int,
        max_num_args: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_wrong_parameter_type_error"]
    pub fn zend_wrong_parameter_type_error(
        throw_: zend_bool,
        num: ::std::os::raw::c_int,
        expected_type: zend_expected_type,
        arg: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_wrong_parameter_class_error"]
    pub fn zend_wrong_parameter_class_error(
        throw_: zend_bool,
        num: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_wrong_callback_error"]
    pub fn zend_wrong_callback_error(
        throw_: zend_bool,
        severity: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
        error: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_class"]
    pub fn zend_parse_arg_class(
        arg: *mut zval,
        pce: *mut *mut zend_class_entry,
        num: ::std::os::raw::c_int,
        check_null: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_bool_slow"]
    pub fn zend_parse_arg_bool_slow(arg: *mut zval, dest: *mut zend_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_bool_weak"]
    pub fn zend_parse_arg_bool_weak(arg: *mut zval, dest: *mut zend_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_long_slow"]
    pub fn zend_parse_arg_long_slow(arg: *mut zval, dest: *mut zend_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_long_weak"]
    pub fn zend_parse_arg_long_weak(arg: *mut zval, dest: *mut zend_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_long_cap_slow"]
    pub fn zend_parse_arg_long_cap_slow(
        arg: *mut zval,
        dest: *mut zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_long_cap_weak"]
    pub fn zend_parse_arg_long_cap_weak(
        arg: *mut zval,
        dest: *mut zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_double_slow"]
    pub fn zend_parse_arg_double_slow(arg: *mut zval, dest: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_double_weak"]
    pub fn zend_parse_arg_double_weak(arg: *mut zval, dest: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_str_slow"]
    pub fn zend_parse_arg_str_slow(
        arg: *mut zval,
        dest: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_arg_str_weak"]
    pub fn zend_parse_arg_str_weak(
        arg: *mut zval,
        dest: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_explicit_bzero"]
    pub fn php_explicit_bzero(dst: *mut ::std::os::raw::c_void, siz: usize);
}
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
impl Default for _RuneEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
impl Default for _RuneRange {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
impl Default for _RuneLocale {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}__DefaultRuneLocale"]
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    #[link_name = "\u{1}__CurrentRuneLocale"]
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    #[link_name = "\u{1}____runetype"]
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}____tolower"]
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}____toupper"]
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}___maskrune"]
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___toupper"]
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}___tolower"]
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accessx_descriptor>())).ad_name_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_getattrlistbulk"]
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getattrlistat"]
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setattrlistat"]
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_faccessat"]
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchownat"]
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_linkat"]
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_readlinkat"]
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_symlinkat"]
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unlinkat"]
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__exit"]
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_access"]
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_alarm"]
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_chdir"]
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_chown"]
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_close"]
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dup"]
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dup2"]
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execl"]
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execle"]
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execlp"]
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execv"]
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execve"]
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execvp"]
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fork"]
    pub fn fork() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_fpathconf"]
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_getcwd"]
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getegid"]
    pub fn getegid() -> gid_t;
}
extern "C" {
    #[link_name = "\u{1}_geteuid"]
    pub fn geteuid() -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_getgid"]
    pub fn getgid() -> gid_t;
}
extern "C" {
    #[link_name = "\u{1}_getgroups"]
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getlogin"]
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getpgrp"]
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getpid"]
    pub fn getpid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getppid"]
    pub fn getppid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getuid"]
    pub fn getuid() -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_isatty"]
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_link"]
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lseek"]
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_pathconf"]
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_pause"]
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pipe"]
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_read"]
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_rmdir"]
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setgid"]
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setpgid"]
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setsid"]
    pub fn setsid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_setuid"]
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sleep"]
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_sysconf"]
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_tcgetpgrp"]
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_tcsetpgrp"]
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ttyname"]
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ttyname_r"]
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unlink"]
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_write"]
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_confstr"]
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_getopt"]
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_brk"]
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_chroot"]
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_crypt"]
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_encrypt"]
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_fchdir"]
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostid"]
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_getpgid"]
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getsid"]
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getdtablesize"]
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpagesize"]
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpass"]
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getwd"]
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_lchown"]
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lockf"]
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nice"]
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pread"]
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_pwrite"]
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_sbrk"]
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_setpgrp"]
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_setregid"]
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setreuid"]
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sync"]
    pub fn sync();
}
extern "C" {
    #[link_name = "\u{1}_truncate"]
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ualarm"]
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    #[link_name = "\u{1}_usleep"]
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfork"]
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsync"]
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftruncate"]
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getlogin_r"]
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchown"]
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostname"]
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_readlink"]
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_setegid"]
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_seteuid"]
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_symlink"]
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    #[link_name = "\u{1}_accessx_np"]
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_acct"]
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_profil"]
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_endusershell"]
    pub fn endusershell();
}
extern "C" {
    #[link_name = "\u{1}_execvP"]
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflagstostr"]
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getdomainname"]
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getgrouplist"]
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostuuid"]
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmode"]
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    #[link_name = "\u{1}_getpeereid"]
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getsgroups_np"]
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getusershell"]
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getwgroups_np"]
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_initgroups"]
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_issetugid"]
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdtemp"]
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mkpath_np"]
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkpathat_np"]
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkstemps"]
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkostemp"]
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkostemps"]
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkstemp_dprotected_np"]
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdtempat_np"]
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mkstempsat_np"]
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkostempsat_np"]
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nfssvc"]
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_profil"]
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setugid_np"]
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_getugid_np"]
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_reboot"]
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_revoke"]
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rcmd"]
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rcmd_af"]
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rresvport"]
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rresvport_af"]
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_iruserok"]
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_iruserok_sa"]
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ruserok"]
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setdomainname"]
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setgroups"]
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sethostid"]
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_sethostname"]
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setlogin"]
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setmode"]
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_setrgid"]
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setruid"]
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setsgroups_np"]
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setusershell"]
    pub fn setusershell();
}
extern "C" {
    #[link_name = "\u{1}_setwgroups_np"]
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strtofflags"]
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_swapon"]
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ttyslot"]
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_undelete"]
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unwhiteout"]
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_syscall"]
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetattrlist"]
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetattrlist"]
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getattrlist"]
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setattrlist"]
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_exchangedata"]
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentriesattr"]
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_searchfs"]
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsctl"]
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsctl"]
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsync_volume_np"]
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sync_volume_np"]
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optreset"]
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        72usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_change as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_class as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gecos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_dir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_shell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_expire as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_expire)
        )
    );
}
impl Default for passwd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_getpwuid"]
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    #[link_name = "\u{1}_getpwnam"]
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    #[link_name = "\u{1}_getpwuid_r"]
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpwnam_r"]
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpwent"]
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    #[link_name = "\u{1}_setpwent"]
    pub fn setpwent();
}
extern "C" {
    #[link_name = "\u{1}_endpwent"]
    pub fn endpwent();
}
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    #[link_name = "\u{1}_UUID_NULL"]
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    #[link_name = "\u{1}_uuid_clear"]
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_uuid_compare"]
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_uuid_copy"]
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_uuid_generate"]
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_uuid_generate_random"]
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_uuid_generate_time"]
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_uuid_is_null"]
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_uuid_parse"]
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_uuid_unparse"]
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_uuid_unparse_lower"]
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_uuid_unparse_upper"]
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setpassent"]
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_user_from_uid"]
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getpwuuid"]
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    #[link_name = "\u{1}_getpwuuid_r"]
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type bool_int = ::std::os::raw::c_int;
pub const boolean_e_NO: boolean_e = 0;
pub const boolean_e_YES: boolean_e = 1;
pub type boolean_e = u32;
extern "C" {
    #[link_name = "\u{1}_ap_php_slprintf"]
    pub fn ap_php_slprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_vslprintf"]
    pub fn ap_php_vslprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_snprintf"]
    pub fn ap_php_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_vsnprintf"]
    pub fn ap_php_vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_vasprintf"]
    pub fn ap_php_vasprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_asprintf"]
    pub fn ap_php_asprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_sprintf"]
    pub fn php_sprintf(
        s: *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_gcvt"]
    pub fn php_gcvt(
        value: f64,
        ndigit: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        exponent: ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_0cvt"]
    pub fn php_0cvt(
        value: f64,
        ndigit: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        exponent: ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_conv_fp"]
    pub fn php_conv_fp(
        format: ::std::os::raw::c_char,
        num: f64,
        add_dp: boolean_e,
        precision: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        is_negative: *mut bool_int,
        buf: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
pub const length_modifier_e_LM_STD: length_modifier_e = 0;
pub const length_modifier_e_LM_INTMAX_T: length_modifier_e = 1;
pub const length_modifier_e_LM_PTRDIFF_T: length_modifier_e = 2;
pub const length_modifier_e_LM_LONG_LONG: length_modifier_e = 3;
pub const length_modifier_e_LM_SIZE_T: length_modifier_e = 4;
pub const length_modifier_e_LM_LONG: length_modifier_e = 5;
pub const length_modifier_e_LM_LONG_DOUBLE: length_modifier_e = 6;
pub const length_modifier_e_LM_PHP_INT_T: length_modifier_e = 7;
pub type length_modifier_e = u32;
pub type wide_int = ::std::os::raw::c_longlong;
pub type u_wide_int = ::std::os::raw::c_ulonglong;
extern "C" {
    #[link_name = "\u{1}_ap_php_conv_10"]
    pub fn ap_php_conv_10(
        num: wide_int,
        is_unsigned: bool_int,
        is_negative: *mut bool_int,
        buf_end: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ap_php_conv_p2"]
    pub fn ap_php_conv_p2(
        num: u_wide_int,
        nbits: ::std::os::raw::c_int,
        format: ::std::os::raw::c_char,
        buf_end: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_printf_to_smart_string"]
    pub fn php_printf_to_smart_string(
        buf: *mut smart_string,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_printf_to_smart_str"]
    pub fn php_printf_to_smart_str(
        buf: *mut smart_str,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_environ"]
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_phperror"]
    pub fn phperror(error: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_php_write"]
    pub fn php_write(buf: *mut ::std::os::raw::c_void, size: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_php_printf"]
    pub fn php_printf(format: *const ::std::os::raw::c_char, ...) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_php_get_module_initialized"]
    pub fn php_get_module_initialized() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_closelog"]
    pub fn closelog();
}
extern "C" {
    #[link_name = "\u{1}_openlog"]
    pub fn openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlogmask"]
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_syslog"]
    pub fn syslog(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_vsyslog"]
    pub fn vsyslog(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_log_err_with_severity"]
    pub fn php_log_err_with_severity(
        log_message: *mut ::std::os::raw::c_char,
        syslog_type_int: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Debug"]
    pub fn Debug(format: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cfgparse"]
    pub fn cfgparse() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_verror"]
    pub fn php_verror(
        docref: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_error_docref0"]
    pub fn php_error_docref0(
        docref: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_php_error_docref1"]
    pub fn php_error_docref1(
        docref: *const ::std::os::raw::c_char,
        param1: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_php_error_docref2"]
    pub fn php_error_docref2(
        docref: *const ::std::os::raw::c_char,
        param1: *const ::std::os::raw::c_char,
        param2: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_php_register_internal_extensions_func"]
    pub static mut php_register_internal_extensions_func:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    #[link_name = "\u{1}_php_register_internal_extensions"]
    pub fn php_register_internal_extensions() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_mergesort"]
    pub fn php_mergesort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_register_pre_request_shutdown"]
    pub fn php_register_pre_request_shutdown(
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_com_initialize"]
    pub fn php_com_initialize();
}
extern "C" {
    #[link_name = "\u{1}_php_get_current_user"]
    pub fn php_get_current_user() -> *mut ::std::os::raw::c_char;
}
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_FAILURE: _php_output_handler_status_t = 0;
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_SUCCESS: _php_output_handler_status_t = 1;
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_NO_DATA: _php_output_handler_status_t = 2;
pub type _php_output_handler_status_t = u32;
pub use self::_php_output_handler_status_t as php_output_handler_status_t;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_OPAQ: _php_output_handler_hook_t =
    0;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_FLAGS: _php_output_handler_hook_t =
    1;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_LEVEL: _php_output_handler_hook_t =
    2;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_IMMUTABLE: _php_output_handler_hook_t =
    3;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_DISABLE: _php_output_handler_hook_t =
    4;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_LAST: _php_output_handler_hook_t = 5;
pub type _php_output_handler_hook_t = u32;
pub use self::_php_output_handler_hook_t as php_output_handler_hook_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_output_buffer {
    pub data: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub used: usize,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout__php_output_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_php_output_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_php_output_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_buffer>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_buffer>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_buffer>())).used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(used)
        )
    );
}
impl Default for _php_output_buffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl _php_output_buffer {
    #[inline]
    pub fn free(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_free(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(free: u32, _reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let free: u32 = unsafe { ::std::mem::transmute(free) };
            free as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let _reserved: u32 = unsafe { ::std::mem::transmute(_reserved) };
            _reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type php_output_buffer = _php_output_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_output_context {
    pub op: ::std::os::raw::c_int,
    pub in_: php_output_buffer,
    pub out: php_output_buffer,
}
#[test]
fn bindgen_test_layout__php_output_context() {
    assert_eq!(
        ::std::mem::size_of::<_php_output_context>(),
        72usize,
        concat!("Size of: ", stringify!(_php_output_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_context>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_context>())).in_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_context>())).out as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(out)
        )
    );
}
impl Default for _php_output_context {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_output_context = _php_output_context;
pub type php_output_handler_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        output: *mut ::std::os::raw::c_char,
        output_len: usize,
        handled_output: *mut *mut ::std::os::raw::c_char,
        handled_output_len: *mut usize,
        mode: ::std::os::raw::c_int,
    ),
>;
pub type php_output_handler_context_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        handler_context: *mut *mut ::std::os::raw::c_void,
        output_context: *mut php_output_context,
    ) -> ::std::os::raw::c_int,
>;
pub type php_output_handler_context_dtor_t =
    ::std::option::Option<unsafe extern "C" fn(opaq: *mut ::std::os::raw::c_void)>;
pub type php_output_handler_conflict_check_t = ::std::option::Option<
    unsafe extern "C" fn(handler_name: *const ::std::os::raw::c_char, handler_name_len: usize)
        -> ::std::os::raw::c_int,
>;
pub type php_output_handler_alias_ctor_t = ::std::option::Option<
    unsafe extern "C" fn(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut _php_output_handler,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_output_handler_user_func_t {
    pub fci: zend_fcall_info,
    pub fcc: zend_fcall_info_cache,
    pub zoh: zval,
}
#[test]
fn bindgen_test_layout__php_output_handler_user_func_t() {
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler_user_func_t>(),
        112usize,
        concat!("Size of: ", stringify!(_php_output_handler_user_func_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler_user_func_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_handler_user_func_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_output_handler_user_func_t>())).fci as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(fci)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_output_handler_user_func_t>())).fcc as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(fcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_output_handler_user_func_t>())).zoh as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(zoh)
        )
    );
}
impl Default for _php_output_handler_user_func_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_output_handler_user_func_t = _php_output_handler_user_func_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_output_handler {
    pub name: *mut zend_string,
    pub flags: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub size: usize,
    pub buffer: php_output_buffer,
    pub opaq: *mut ::std::os::raw::c_void,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(opaq: *mut ::std::os::raw::c_void)>,
    pub func: _php_output_handler__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _php_output_handler__bindgen_ty_1 {
    pub user: *mut php_output_handler_user_func_t,
    pub internal: php_output_handler_context_func_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__php_output_handler__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_php_output_handler__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_php_output_handler__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_output_handler__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_output_handler__bindgen_ty_1>())).internal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler__bindgen_ty_1),
            "::",
            stringify!(internal)
        )
    );
}
impl Default for _php_output_handler__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__php_output_handler() {
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler>(),
        80usize,
        concat!("Size of: ", stringify!(_php_output_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_handler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).level as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).opaq as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(opaq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).dtor as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_output_handler>())).func as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(func)
        )
    );
}
impl Default for _php_output_handler {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_output_handler = _php_output_handler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_output_globals {
    pub handlers: zend_stack,
    pub active: *mut php_output_handler,
    pub running: *mut php_output_handler,
    pub output_start_filename: *const ::std::os::raw::c_char,
    pub output_start_lineno: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_output_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_output_globals>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_output_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_output_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_output_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_output_globals>())).handlers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_output_globals>())).active as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_output_globals>())).running as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_output_globals>())).output_start_filename as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(output_start_filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_output_globals>())).output_start_lineno as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(output_start_lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_output_globals>())).flags as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for _zend_output_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_output_globals = _zend_output_globals;
extern "C" {
    #[link_name = "\u{1}_output_globals_id"]
    pub static mut output_globals_id: ts_rsrc_id;
}
extern "C" {
    #[link_name = "\u{1}_php_output_default_handler_name"]
    pub static mut php_output_default_handler_name: [::std::os::raw::c_char; 23usize];
}
extern "C" {
    #[link_name = "\u{1}_php_output_devnull_handler_name"]
    pub static mut php_output_devnull_handler_name: [::std::os::raw::c_char; 20usize];
}
extern "C" {
    #[link_name = "\u{1}_php_output_startup"]
    pub fn php_output_startup();
}
extern "C" {
    #[link_name = "\u{1}_php_output_shutdown"]
    pub fn php_output_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_php_output_register_constants"]
    pub fn php_output_register_constants();
}
extern "C" {
    #[link_name = "\u{1}_php_output_activate"]
    pub fn php_output_activate() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_deactivate"]
    pub fn php_output_deactivate();
}
extern "C" {
    #[link_name = "\u{1}_php_output_set_status"]
    pub fn php_output_set_status(status: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_status"]
    pub fn php_output_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_set_implicit_flush"]
    pub fn php_output_set_implicit_flush(flush: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_start_filename"]
    pub fn php_output_get_start_filename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_start_lineno"]
    pub fn php_output_get_start_lineno() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_write_unbuffered"]
    pub fn php_output_write_unbuffered(str: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_php_output_write"]
    pub fn php_output_write(str: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_php_output_flush"]
    pub fn php_output_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_flush_all"]
    pub fn php_output_flush_all();
}
extern "C" {
    #[link_name = "\u{1}_php_output_clean"]
    pub fn php_output_clean() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_clean_all"]
    pub fn php_output_clean_all();
}
extern "C" {
    #[link_name = "\u{1}_php_output_end"]
    pub fn php_output_end() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_end_all"]
    pub fn php_output_end_all();
}
extern "C" {
    #[link_name = "\u{1}_php_output_discard"]
    pub fn php_output_discard() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_discard_all"]
    pub fn php_output_discard_all();
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_contents"]
    pub fn php_output_get_contents(p: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_length"]
    pub fn php_output_get_length(p: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_level"]
    pub fn php_output_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_get_active_handler"]
    pub fn php_output_get_active_handler() -> *mut php_output_handler;
}
extern "C" {
    #[link_name = "\u{1}_php_output_start_default"]
    pub fn php_output_start_default() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_start_devnull"]
    pub fn php_output_start_devnull() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_start_user"]
    pub fn php_output_start_user(
        output_handler: *mut zval,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_start_internal"]
    pub fn php_output_start_internal(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        output_handler: php_output_handler_func_t,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_create_user"]
    pub fn php_output_handler_create_user(
        handler: *mut zval,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut php_output_handler;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_create_internal"]
    pub fn php_output_handler_create_internal(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        handler: php_output_handler_context_func_t,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut php_output_handler;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_set_context"]
    pub fn php_output_handler_set_context(
        handler: *mut php_output_handler,
        opaq: *mut ::std::os::raw::c_void,
        dtor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_start"]
    pub fn php_output_handler_start(handler: *mut php_output_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_started"]
    pub fn php_output_handler_started(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_hook"]
    pub fn php_output_handler_hook(
        type_: php_output_handler_hook_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_dtor"]
    pub fn php_output_handler_dtor(handler: *mut php_output_handler);
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_free"]
    pub fn php_output_handler_free(handler: *mut *mut php_output_handler);
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_conflict"]
    pub fn php_output_handler_conflict(
        handler_new: *const ::std::os::raw::c_char,
        handler_new_len: usize,
        handler_set: *const ::std::os::raw::c_char,
        handler_set_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_conflict_register"]
    pub fn php_output_handler_conflict_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        check_func: php_output_handler_conflict_check_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_reverse_conflict_register"]
    pub fn php_output_handler_reverse_conflict_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        check_func: php_output_handler_conflict_check_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_alias"]
    pub fn php_output_handler_alias(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
    ) -> php_output_handler_alias_ctor_t;
}
extern "C" {
    #[link_name = "\u{1}_php_output_handler_alias_register"]
    pub fn php_output_handler_alias_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        func: php_output_handler_alias_ctor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_start"]
    pub fn zif_ob_start(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_flush"]
    pub fn zif_ob_flush(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_clean"]
    pub fn zif_ob_clean(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_end_flush"]
    pub fn zif_ob_end_flush(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_end_clean"]
    pub fn zif_ob_end_clean(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_flush"]
    pub fn zif_ob_get_flush(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_clean"]
    pub fn zif_ob_get_clean(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_contents"]
    pub fn zif_ob_get_contents(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_length"]
    pub fn zif_ob_get_length(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_level"]
    pub fn zif_ob_get_level(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_get_status"]
    pub fn zif_ob_get_status(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_implicit_flush"]
    pub fn zif_ob_implicit_flush(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_ob_list_handlers"]
    pub fn zif_ob_list_handlers(execute_data: *mut zend_execute_data, return_value: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zif_output_add_rewrite_var"]
    pub fn zif_output_add_rewrite_var(
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_zif_output_reset_rewrite_vars"]
    pub fn zif_output_reset_rewrite_vars(
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[test]
fn bindgen_test_layout_timeval64() {
    assert_eq!(
        ::std::mem::size_of::<timeval64>(),
        16usize,
        concat!("Size of: ", stringify!(timeval64))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval64>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval64>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_clockinfo() {
    assert_eq!(
        ::std::mem::size_of::<clockinfo>(),
        20usize,
        concat!("Size of: ", stringify!(clockinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<clockinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(clockinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).hz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).tick as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).tickadj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tickadj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).stathz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(stathz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).profhz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(profhz)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_adjtime"]
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_futimes"]
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lutimes"]
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_settimeofday"]
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getitimer"]
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gettimeofday"]
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setitimer"]
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_utimes"]
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_file_le_stream"]
    pub fn php_file_le_stream() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_file_le_pstream"]
    pub fn php_file_le_pstream() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_file_le_stream_filter"]
    pub fn php_file_le_stream_filter() -> ::std::os::raw::c_int;
}
pub type php_stream = _php_stream;
pub type php_stream_wrapper = _php_stream_wrapper;
pub type php_stream_context = _php_stream_context;
pub type php_stream_filter = _php_stream_filter;
pub type php_stream_notification_func = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut php_stream_context,
        notifycode: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        xmsg: *mut ::std::os::raw::c_char,
        xcode: ::std::os::raw::c_int,
        bytes_sofar: usize,
        bytes_max: usize,
        ptr: *mut ::std::os::raw::c_void,
    ),
>;
pub type php_stream_notifier = _php_stream_notifier;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_notifier {
    pub func: php_stream_notification_func,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(notifier: *mut php_stream_notifier)>,
    pub ptr: zval,
    pub mask: ::std::os::raw::c_int,
    pub progress: usize,
    pub progress_max: usize,
}
#[test]
fn bindgen_test_layout__php_stream_notifier() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_notifier>(),
        56usize,
        concat!("Size of: ", stringify!(_php_stream_notifier))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_notifier>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_notifier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_notifier>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_notifier>())).dtor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_notifier>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_notifier>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_notifier>())).progress as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_notifier>())).progress_max as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(progress_max)
        )
    );
}
impl Default for _php_stream_notifier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_context {
    pub notifier: *mut php_stream_notifier,
    pub options: zval,
    pub res: *mut zend_resource,
}
#[test]
fn bindgen_test_layout__php_stream_context() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_context>(),
        32usize,
        concat!("Size of: ", stringify!(_php_stream_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_context>())).notifier as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(notifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_context>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_context>())).res as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(res)
        )
    );
}
impl Default for _php_stream_context {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_php_stream_context_free"]
    pub fn php_stream_context_free(context: *mut php_stream_context);
}
extern "C" {
    #[link_name = "\u{1}_php_stream_context_alloc"]
    pub fn php_stream_context_alloc() -> *mut php_stream_context;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_context_get_option"]
    pub fn php_stream_context_get_option(
        context: *mut php_stream_context,
        wrappername: *const ::std::os::raw::c_char,
        optionname: *const ::std::os::raw::c_char,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_context_set_option"]
    pub fn php_stream_context_set_option(
        context: *mut php_stream_context,
        wrappername: *const ::std::os::raw::c_char,
        optionname: *const ::std::os::raw::c_char,
        optionvalue: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_notification_alloc"]
    pub fn php_stream_notification_alloc() -> *mut php_stream_notifier;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_notification_free"]
    pub fn php_stream_notification_free(notifier: *mut php_stream_notifier);
}
extern "C" {
    #[link_name = "\u{1}_php_stream_notification_notify"]
    pub fn php_stream_notification_notify(
        context: *mut php_stream_context,
        notifycode: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        xmsg: *mut ::std::os::raw::c_char,
        xcode: ::std::os::raw::c_int,
        bytes_sofar: usize,
        bytes_max: usize,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_stream_context_set"]
    pub fn php_stream_context_set(
        stream: *mut php_stream,
        context: *mut php_stream_context,
    ) -> *mut php_stream_context;
}
pub type php_stream_bucket = _php_stream_bucket;
pub type php_stream_bucket_brigade = _php_stream_bucket_brigade;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_bucket {
    pub next: *mut php_stream_bucket,
    pub prev: *mut php_stream_bucket,
    pub brigade: *mut php_stream_bucket_brigade,
    pub buf: *mut ::std::os::raw::c_char,
    pub buflen: usize,
    pub own_buf: u8,
    pub is_persistent: u8,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_bucket() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_bucket>(),
        48usize,
        concat!("Size of: ", stringify!(_php_stream_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).brigade as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(brigade)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).buflen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).own_buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(own_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_bucket>())).is_persistent as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(is_persistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket>())).refcount as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(refcount)
        )
    );
}
impl Default for _php_stream_bucket {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_bucket_brigade {
    pub head: *mut php_stream_bucket,
    pub tail: *mut php_stream_bucket,
}
#[test]
fn bindgen_test_layout__php_stream_bucket_brigade() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_bucket_brigade>(),
        16usize,
        concat!("Size of: ", stringify!(_php_stream_bucket_brigade))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_bucket_brigade>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_bucket_brigade))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket_brigade>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket_brigade),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_bucket_brigade>())).tail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket_brigade),
            "::",
            stringify!(tail)
        )
    );
}
impl Default for _php_stream_bucket_brigade {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const php_stream_filter_status_t_PSFS_ERR_FATAL: php_stream_filter_status_t = 0;
pub const php_stream_filter_status_t_PSFS_FEED_ME: php_stream_filter_status_t = 1;
pub const php_stream_filter_status_t_PSFS_PASS_ON: php_stream_filter_status_t = 2;
pub type php_stream_filter_status_t = u32;
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_new"]
    pub fn php_stream_bucket_new(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        own_buf: u8,
        buf_persistent: u8,
    ) -> *mut php_stream_bucket;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_split"]
    pub fn php_stream_bucket_split(
        in_: *mut php_stream_bucket,
        left: *mut *mut php_stream_bucket,
        right: *mut *mut php_stream_bucket,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_delref"]
    pub fn php_stream_bucket_delref(bucket: *mut php_stream_bucket);
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_prepend"]
    pub fn php_stream_bucket_prepend(
        brigade: *mut php_stream_bucket_brigade,
        bucket: *mut php_stream_bucket,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_append"]
    pub fn php_stream_bucket_append(
        brigade: *mut php_stream_bucket_brigade,
        bucket: *mut php_stream_bucket,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_unlink"]
    pub fn php_stream_bucket_unlink(bucket: *mut php_stream_bucket);
}
extern "C" {
    #[link_name = "\u{1}_php_stream_bucket_make_writeable"]
    pub fn php_stream_bucket_make_writeable(
        bucket: *mut php_stream_bucket,
    ) -> *mut php_stream_bucket;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_ops {
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            thisfilter: *mut php_stream_filter,
            buckets_in: *mut php_stream_bucket_brigade,
            buckets_out: *mut php_stream_bucket_brigade,
            bytes_consumed: *mut usize,
            flags: ::std::os::raw::c_int,
        ) -> php_stream_filter_status_t,
    >,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(thisfilter: *mut php_stream_filter)>,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__php_stream_filter_ops() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_ops>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_filter_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_ops>())).filter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_ops>())).dtor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_ops>())).label as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(label)
        )
    );
}
impl Default for _php_stream_filter_ops {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_filter_ops = _php_stream_filter_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_chain {
    pub head: *mut php_stream_filter,
    pub tail: *mut php_stream_filter,
    pub stream: *mut php_stream,
}
#[test]
fn bindgen_test_layout__php_stream_filter_chain() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_chain>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_filter_chain))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_chain>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_chain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_chain>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_chain>())).tail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter_chain>())).stream as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for _php_stream_filter_chain {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_filter_chain = _php_stream_filter_chain;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_filter {
    pub fops: *mut php_stream_filter_ops,
    pub abstract_: zval,
    pub next: *mut php_stream_filter,
    pub prev: *mut php_stream_filter,
    pub is_persistent: ::std::os::raw::c_int,
    pub chain: *mut php_stream_filter_chain,
    pub buffer: php_stream_bucket_brigade,
    pub res: *mut zend_resource,
}
#[test]
fn bindgen_test_layout__php_stream_filter() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter>(),
        80usize,
        concat!("Size of: ", stringify!(_php_stream_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).fops as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(fops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).abstract_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(abstract_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_filter>())).is_persistent as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(is_persistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).chain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).buffer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_filter>())).res as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(res)
        )
    );
}
impl Default for _php_stream_filter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}__php_stream_filter_prepend"]
    pub fn _php_stream_filter_prepend(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_prepend_ex"]
    pub fn php_stream_filter_prepend_ex(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_filter_append"]
    pub fn _php_stream_filter_append(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_append_ex"]
    pub fn php_stream_filter_append_ex(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_filter_flush"]
    pub fn _php_stream_filter_flush(
        filter: *mut php_stream_filter,
        finish: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_remove"]
    pub fn php_stream_filter_remove(
        filter: *mut php_stream_filter,
        call_dtor: ::std::os::raw::c_int,
    ) -> *mut php_stream_filter;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_free"]
    pub fn php_stream_filter_free(filter: *mut php_stream_filter);
}
extern "C" {
    #[link_name = "\u{1}__php_stream_filter_alloc"]
    pub fn _php_stream_filter_alloc(
        fops: *mut php_stream_filter_ops,
        abstract_: *mut ::std::os::raw::c_void,
        persistent: u8,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream_filter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_factory {
    pub create_filter: ::std::option::Option<
        unsafe extern "C" fn(
            filtername: *const ::std::os::raw::c_char,
            filterparams: *mut zval,
            persistent: u8,
        ) -> *mut php_stream_filter,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_filter_factory() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_factory>(),
        8usize,
        concat!("Size of: ", stringify!(_php_stream_filter_factory))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_factory))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_filter_factory>())).create_filter as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_factory),
            "::",
            stringify!(create_filter)
        )
    );
}
impl Default for _php_stream_filter_factory {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_filter_factory = _php_stream_filter_factory;
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_register_factory"]
    pub fn php_stream_filter_register_factory(
        filterpattern: *const ::std::os::raw::c_char,
        factory: *mut php_stream_filter_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_unregister_factory"]
    pub fn php_stream_filter_unregister_factory(
        filterpattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_register_factory_volatile"]
    pub fn php_stream_filter_register_factory_volatile(
        filterpattern: *const ::std::os::raw::c_char,
        factory: *mut php_stream_filter_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_filter_create"]
    pub fn php_stream_filter_create(
        filtername: *const ::std::os::raw::c_char,
        filterparams: *mut zval,
        persistent: u8,
    ) -> *mut php_stream_filter;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _php_stream_statbuf {
    pub sb: zend_stat_t,
}
#[test]
fn bindgen_test_layout__php_stream_statbuf() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_statbuf>(),
        120usize,
        concat!("Size of: ", stringify!(_php_stream_statbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_statbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_statbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_statbuf>())).sb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_statbuf),
            "::",
            stringify!(sb)
        )
    );
}
pub type php_stream_statbuf = _php_stream_statbuf;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_dirent {
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout__php_stream_dirent() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_dirent>(),
        1024usize,
        concat!("Size of: ", stringify!(_php_stream_dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_dirent>(),
        1usize,
        concat!("Alignment of ", stringify!(_php_stream_dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_dirent>())).d_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_dirent),
            "::",
            stringify!(d_name)
        )
    );
}
impl Default for _php_stream_dirent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_dirent = _php_stream_dirent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_ops {
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> usize,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            buf: *mut ::std::os::raw::c_char,
            count: usize,
        ) -> usize,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut php_stream, close_handle: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut php_stream) -> ::std::os::raw::c_int,
    >,
    pub label: *const ::std::os::raw::c_char,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            offset: zend_off_t,
            whence: ::std::os::raw::c_int,
            newoffset: *mut zend_off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cast: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            castas: ::std::os::raw::c_int,
            ret: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub stat: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut php_stream, ssb: *mut php_stream_statbuf)
            -> ::std::os::raw::c_int,
    >,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            option: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
            ptrparam: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_ops() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_ops>(),
        72usize,
        concat!("Size of: ", stringify!(_php_stream_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).write as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).read as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).close as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).flush as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).label as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).cast as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(cast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).stat as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_ops>())).set_option as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(set_option)
        )
    );
}
impl Default for _php_stream_ops {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_ops = _php_stream_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_wrapper_ops {
    pub stream_opener: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            filename: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            opened_path: *mut *mut zend_string,
            context: *mut php_stream_context,
            __php_stream_call_depth: ::std::os::raw::c_int,
            __zend_filename: *const ::std::os::raw::c_char,
            __zend_lineno: u32,
            __zend_orig_filename: *const ::std::os::raw::c_char,
            __zend_orig_lineno: u32,
        ) -> *mut php_stream,
    >,
    pub stream_closer: ::std::option::Option<
        unsafe extern "C" fn(wrapper: *mut php_stream_wrapper, stream: *mut php_stream)
            -> ::std::os::raw::c_int,
    >,
    pub stream_stat: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            stream: *mut php_stream,
            ssb: *mut php_stream_statbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub url_stat: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            ssb: *mut php_stream_statbuf,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub dir_opener: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            filename: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            opened_path: *mut *mut zend_string,
            context: *mut php_stream_context,
            __php_stream_call_depth: ::std::os::raw::c_int,
            __zend_filename: *const ::std::os::raw::c_char,
            __zend_lineno: u32,
            __zend_orig_filename: *const ::std::os::raw::c_char,
            __zend_orig_lineno: u32,
        ) -> *mut php_stream,
    >,
    pub label: *const ::std::os::raw::c_char,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url_from: *const ::std::os::raw::c_char,
            url_to: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_rmdir: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_metadata: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_void,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_wrapper_ops() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_wrapper_ops>(),
        88usize,
        concat!("Size of: ", stringify!(_php_stream_wrapper_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_wrapper_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_wrapper_ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_opener as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_opener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_closer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_closer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_stat as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).url_stat as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(url_stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).dir_opener as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(dir_opener)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).label as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).unlink as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).rename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_mkdir as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_mkdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_rmdir as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_rmdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_wrapper_ops>())).stream_metadata as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_metadata)
        )
    );
}
impl Default for _php_stream_wrapper_ops {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_wrapper_ops = _php_stream_wrapper_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_wrapper {
    pub wops: *mut php_stream_wrapper_ops,
    pub abstract_: *mut ::std::os::raw::c_void,
    pub is_url: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_wrapper() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_wrapper>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_wrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper>())).wops as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(wops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper>())).abstract_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(abstract_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_wrapper>())).is_url as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(is_url)
        )
    );
}
impl Default for _php_stream_wrapper {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream {
    pub ops: *mut php_stream_ops,
    pub abstract_: *mut ::std::os::raw::c_void,
    pub readfilters: php_stream_filter_chain,
    pub writefilters: php_stream_filter_chain,
    pub wrapper: *mut php_stream_wrapper,
    pub wrapperthis: *mut ::std::os::raw::c_void,
    pub wrapperdata: zval,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub fgetss_state: u8,
    pub mode: [::std::os::raw::c_char; 16usize],
    pub flags: u32,
    pub res: *mut zend_resource,
    pub stdiocast: *mut FILE,
    pub orig_path: *mut ::std::os::raw::c_char,
    pub ctx: *mut zend_resource,
    pub position: zend_off_t,
    pub readbuf: *mut ::std::os::raw::c_uchar,
    pub readbuflen: usize,
    pub readpos: zend_off_t,
    pub writepos: zend_off_t,
    pub chunk_size: usize,
    pub open_filename: *const ::std::os::raw::c_char,
    pub open_lineno: u32,
    pub enclosing_stream: *mut _php_stream,
}
#[test]
fn bindgen_test_layout__php_stream() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream>(),
        224usize,
        concat!("Size of: ", stringify!(_php_stream))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).ops as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).abstract_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(abstract_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).readfilters as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readfilters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).writefilters as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(writefilters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).wrapper as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(wrapper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).wrapperthis as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(wrapperthis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).wrapperdata as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(wrapperdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).fgetss_state as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(fgetss_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).mode as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).res as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).stdiocast as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(stdiocast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).orig_path as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(orig_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).ctx as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).position as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).readbuf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).readbuflen as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readbuflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).readpos as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).writepos as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(writepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).chunk_size as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).open_filename as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(open_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).open_lineno as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(open_lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream>())).enclosing_stream as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(enclosing_stream)
        )
    );
}
impl Default for _php_stream {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl _php_stream {
    #[inline]
    pub fn is_persistent(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_persistent(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_free(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_in_free(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn eof(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_eof(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __exposed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set___exposed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fclose_stdiocast(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_fclose_stdiocast(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_persistent: u8,
        in_free: u8,
        eof: u8,
        __exposed: u8,
        fclose_stdiocast: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_persistent: u8 = unsafe { ::std::mem::transmute(is_persistent) };
            is_persistent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let in_free: u8 = unsafe { ::std::mem::transmute(in_free) };
            in_free as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let eof: u8 = unsafe { ::std::mem::transmute(eof) };
            eof as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __exposed: u8 = unsafe { ::std::mem::transmute(__exposed) };
            __exposed as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let fclose_stdiocast: u8 = unsafe { ::std::mem::transmute(fclose_stdiocast) };
            fclose_stdiocast as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[link_name = "\u{1}__php_stream_alloc"]
    pub fn _php_stream_alloc(
        ops: *mut php_stream_ops,
        abstract_: *mut ::std::os::raw::c_void,
        persistent_id: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_encloses"]
    pub fn php_stream_encloses(
        enclosing: *mut php_stream,
        enclosed: *mut php_stream,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_free_enclosed"]
    pub fn _php_stream_free_enclosed(
        stream_enclosed: *mut php_stream,
        close_options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_from_persistent_id"]
    pub fn php_stream_from_persistent_id(
        persistent_id: *const ::std::os::raw::c_char,
        stream: *mut *mut php_stream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_free"]
    pub fn _php_stream_free(
        stream: *mut php_stream,
        close_options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_seek"]
    pub fn _php_stream_seek(
        stream: *mut php_stream,
        offset: zend_off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_tell"]
    pub fn _php_stream_tell(stream: *mut php_stream) -> zend_off_t;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_read"]
    pub fn _php_stream_read(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        count: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_write"]
    pub fn _php_stream_write(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fill_read_buffer"]
    pub fn _php_stream_fill_read_buffer(stream: *mut php_stream, size: usize);
}
extern "C" {
    #[link_name = "\u{1}__php_stream_printf"]
    pub fn _php_stream_printf(
        stream: *mut php_stream,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_eof"]
    pub fn _php_stream_eof(stream: *mut php_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_getc"]
    pub fn _php_stream_getc(stream: *mut php_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_putc"]
    pub fn _php_stream_putc(
        stream: *mut php_stream,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_flush"]
    pub fn _php_stream_flush(
        stream: *mut php_stream,
        closing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_get_line"]
    pub fn _php_stream_get_line(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        maxlen: usize,
        returned_len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_get_record"]
    pub fn php_stream_get_record(
        stream: *mut php_stream,
        maxlen: usize,
        delim: *const ::std::os::raw::c_char,
        delim_len: usize,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_puts"]
    pub fn _php_stream_puts(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_stat"]
    pub fn _php_stream_stat(
        stream: *mut php_stream,
        ssb: *mut php_stream_statbuf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_stat_path"]
    pub fn _php_stream_stat_path(
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        ssb: *mut php_stream_statbuf,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_mkdir"]
    pub fn _php_stream_mkdir(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_rmdir"]
    pub fn _php_stream_rmdir(
        path: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_opendir"]
    pub fn _php_stream_opendir(
        path: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_readdir"]
    pub fn _php_stream_readdir(
        dirstream: *mut php_stream,
        ent: *mut php_stream_dirent,
    ) -> *mut php_stream_dirent;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_dirent_alphasort"]
    pub fn php_stream_dirent_alphasort(
        a: *mut *const zend_string,
        b: *mut *const zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_dirent_alphasortr"]
    pub fn php_stream_dirent_alphasortr(
        a: *mut *const zend_string,
        b: *mut *const zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_scandir"]
    pub fn _php_stream_scandir(
        dirname: *const ::std::os::raw::c_char,
        namelist: *mut *mut *mut zend_string,
        flags: ::std::os::raw::c_int,
        context: *mut php_stream_context,
        compare: ::std::option::Option<
            unsafe extern "C" fn(a: *mut *const zend_string, b: *mut *const zend_string)
                -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_set_option"]
    pub fn _php_stream_set_option(
        stream: *mut php_stream,
        option: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        ptrparam: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_truncate_set_size"]
    pub fn _php_stream_truncate_set_size(
        stream: *mut php_stream,
        newsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_copy_to_stream"]
    pub fn _php_stream_copy_to_stream(
        src: *mut php_stream,
        dest: *mut php_stream,
        maxlen: usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_copy_to_stream_ex"]
    pub fn _php_stream_copy_to_stream_ex(
        src: *mut php_stream,
        dest: *mut php_stream,
        maxlen: usize,
        len: *mut usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_copy_to_mem"]
    pub fn _php_stream_copy_to_mem(
        src: *mut php_stream,
        maxlen: usize,
        persistent: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_passthru"]
    pub fn _php_stream_passthru(
        src: *mut php_stream,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> usize;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
impl Default for iovec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
#[test]
fn bindgen_test_layout_sa_endpoints() {
    assert_eq!(
        ::std::mem::size_of::<sa_endpoints>(),
        40usize,
        concat!("Size of: ", stringify!(sa_endpoints))
    );
    assert_eq!(
        ::std::mem::align_of::<sa_endpoints>(),
        8usize,
        concat!("Alignment of ", stringify!(sa_endpoints))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcif as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcaddrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_dstaddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_dstaddrlen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddrlen)
        )
    );
}
impl Default for sa_endpoints {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[test]
fn bindgen_test_layout_so_np_extensions() {
    assert_eq!(
        ::std::mem::size_of::<so_np_extensions>(),
        8usize,
        concat!("Size of: ", stringify!(so_np_extensions))
    );
    assert_eq!(
        ::std::mem::align_of::<so_np_extensions>(),
        4usize,
        concat!("Alignment of ", stringify!(so_np_extensions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<so_np_extensions>())).npx_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<so_np_extensions>())).npx_mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[test]
fn bindgen_test_layout_sockproto() {
    assert_eq!(
        ::std::mem::size_of::<sockproto>(),
        4usize,
        concat!("Size of: ", stringify!(sockproto))
    );
    assert_eq!(
        ::std::mem::align_of::<sockproto>(),
        2usize,
        concat!("Alignment of ", stringify!(sockproto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockproto>())).sp_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockproto>())).sp_protocol as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_protocol)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_pad1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_pad2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad2)
        )
    );
}
impl Default for sockaddr_storage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        48usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
impl Default for msghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        12usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sf_hdtr() {
    assert_eq!(
        ::std::mem::size_of::<sf_hdtr>(),
        32usize,
        concat!("Size of: ", stringify!(sf_hdtr))
    );
    assert_eq!(
        ::std::mem::align_of::<sf_hdtr>(),
        8usize,
        concat!("Alignment of ", stringify!(sf_hdtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).headers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).hdr_cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(hdr_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).trailers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).trl_cnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trl_cnt)
        )
    );
}
impl Default for sf_hdtr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_accept"]
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bind"]
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_connect"]
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpeername"]
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getsockname"]
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getsockopt"]
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_listen"]
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_recv"]
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_recvfrom"]
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_recvmsg"]
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_send"]
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_sendmsg"]
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_sendto"]
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_setsockopt"]
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_shutdown"]
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sockatmark"]
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_socket"]
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_socketpair"]
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sendfile"]
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pfctlinput"]
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    #[link_name = "\u{1}_connectx"]
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_disconnectx"]
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
pub type php_stream_transport_factory_func = ::std::option::Option<
    unsafe extern "C" fn(
        proto: *const ::std::os::raw::c_char,
        protolen: usize,
        resourcename: *const ::std::os::raw::c_char,
        resourcenamelen: usize,
        persistent_id: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        timeout: *mut timeval,
        context: *mut php_stream_context,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream,
>;
pub type php_stream_transport_factory = php_stream_transport_factory_func;
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_register"]
    pub fn php_stream_xport_register(
        protocol: *const ::std::os::raw::c_char,
        factory: php_stream_transport_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_unregister"]
    pub fn php_stream_xport_unregister(
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_xport_create"]
    pub fn _php_stream_xport_create(
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        persistent_id: *const ::std::os::raw::c_char,
        timeout: *mut timeval,
        context: *mut php_stream_context,
        error_string: *mut *mut zend_string,
        error_code: *mut ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_bind"]
    pub fn php_stream_xport_bind(
        stream: *mut php_stream,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_connect"]
    pub fn php_stream_xport_connect(
        stream: *mut php_stream,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        asynchronous: ::std::os::raw::c_int,
        timeout: *mut timeval,
        error_text: *mut *mut zend_string,
        error_code: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_listen"]
    pub fn php_stream_xport_listen(
        stream: *mut php_stream,
        backlog: ::std::os::raw::c_int,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_accept"]
    pub fn php_stream_xport_accept(
        stream: *mut php_stream,
        client: *mut *mut php_stream,
        textaddr: *mut *mut zend_string,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
        timeout: *mut timeval,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_get_name"]
    pub fn php_stream_xport_get_name(
        stream: *mut php_stream,
        want_peer: ::std::os::raw::c_int,
        textaddr: *mut *mut zend_string,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
pub const php_stream_xport_send_recv_flags_STREAM_OOB: php_stream_xport_send_recv_flags = 1;
pub const php_stream_xport_send_recv_flags_STREAM_PEEK: php_stream_xport_send_recv_flags = 2;
pub type php_stream_xport_send_recv_flags = u32;
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_recvfrom"]
    pub fn php_stream_xport_recvfrom(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        flags: ::std::os::raw::c_int,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
        textaddr: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_sendto"]
    pub fn php_stream_xport_sendto(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
        buflen: usize,
        flags: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        addrlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
pub const stream_shutdown_t_STREAM_SHUT_RD: stream_shutdown_t = 0;
pub const stream_shutdown_t_STREAM_SHUT_WR: stream_shutdown_t = 1;
pub const stream_shutdown_t_STREAM_SHUT_RDWR: stream_shutdown_t = 2;
pub type stream_shutdown_t = u32;
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_shutdown"]
    pub fn php_stream_xport_shutdown(
        stream: *mut php_stream,
        how: stream_shutdown_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param {
    pub op: _php_stream_xport_param__bindgen_ty_1,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub inputs: _php_stream_xport_param__bindgen_ty_2,
    pub outputs: _php_stream_xport_param__bindgen_ty_3,
}
pub const _php_stream_xport_param_STREAM_XPORT_OP_BIND: _php_stream_xport_param__bindgen_ty_1 = 0;
pub const _php_stream_xport_param_STREAM_XPORT_OP_CONNECT: _php_stream_xport_param__bindgen_ty_1 =
    1;
pub const _php_stream_xport_param_STREAM_XPORT_OP_LISTEN: _php_stream_xport_param__bindgen_ty_1 = 2;
pub const _php_stream_xport_param_STREAM_XPORT_OP_ACCEPT: _php_stream_xport_param__bindgen_ty_1 = 3;
pub const _php_stream_xport_param_STREAM_XPORT_OP_CONNECT_ASYNC:
    _php_stream_xport_param__bindgen_ty_1 = 4;
pub const _php_stream_xport_param_STREAM_XPORT_OP_GET_NAME: _php_stream_xport_param__bindgen_ty_1 =
    5;
pub const _php_stream_xport_param_STREAM_XPORT_OP_GET_PEER_NAME:
    _php_stream_xport_param__bindgen_ty_1 = 6;
pub const _php_stream_xport_param_STREAM_XPORT_OP_RECV: _php_stream_xport_param__bindgen_ty_1 = 7;
pub const _php_stream_xport_param_STREAM_XPORT_OP_SEND: _php_stream_xport_param__bindgen_ty_1 = 8;
pub const _php_stream_xport_param_STREAM_XPORT_OP_SHUTDOWN: _php_stream_xport_param__bindgen_ty_1 =
    9;
pub type _php_stream_xport_param__bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param__bindgen_ty_2 {
    pub name: *mut ::std::os::raw::c_char,
    pub namelen: usize,
    pub timeout: *mut timeval,
    pub addr: *mut sockaddr,
    pub buf: *mut ::std::os::raw::c_char,
    pub buflen: usize,
    pub addrlen: socklen_t,
    pub backlog: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_param__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param__bindgen_ty_2>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_param__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).namelen as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).timeout as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).addr as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).buf as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).buflen as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).addrlen as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(addrlen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).backlog as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(backlog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_2>())).flags as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for _php_stream_xport_param__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param__bindgen_ty_3 {
    pub client: *mut php_stream,
    pub addr: *mut sockaddr,
    pub addrlen: socklen_t,
    pub textaddr: *mut zend_string,
    pub error_text: *mut zend_string,
    pub returncode: ::std::os::raw::c_int,
    pub error_code: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_param__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param__bindgen_ty_3>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_param__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).client as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).addrlen as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(addrlen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).textaddr as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(textaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).error_text as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(error_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).returncode as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(returncode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_param__bindgen_ty_3>())).error_code as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(error_code)
        )
    );
}
impl Default for _php_stream_xport_param__bindgen_ty_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout__php_stream_xport_param() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param>(),
        120usize,
        concat!("Size of: ", stringify!(_php_stream_xport_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_xport_param>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_xport_param>())).inputs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_stream_xport_param>())).outputs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(outputs)
        )
    );
}
impl Default for _php_stream_xport_param {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl _php_stream_xport_param {
    #[inline]
    pub fn want_addr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_addr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn want_textaddr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_textaddr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn want_errortext(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_errortext(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn how(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_how(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        want_addr: ::std::os::raw::c_uint,
        want_textaddr: ::std::os::raw::c_uint,
        want_errortext: ::std::os::raw::c_uint,
        how: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let want_addr: u32 = unsafe { ::std::mem::transmute(want_addr) };
            want_addr as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let want_textaddr: u32 = unsafe { ::std::mem::transmute(want_textaddr) };
            want_textaddr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let want_errortext: u32 = unsafe { ::std::mem::transmute(want_errortext) };
            want_errortext as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let how: u32 = unsafe { ::std::mem::transmute(how) };
            how as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type php_stream_xport_param = _php_stream_xport_param;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv2_CLIENT:
    php_stream_xport_crypt_method_t = 3;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv3_CLIENT:
    php_stream_xport_crypt_method_t = 5;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv23_CLIENT:
    php_stream_xport_crypt_method_t = 57;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT:
    php_stream_xport_crypt_method_t = 9;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT:
    php_stream_xport_crypt_method_t = 17;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT:
    php_stream_xport_crypt_method_t = 33;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_CLIENT:
    php_stream_xport_crypt_method_t = 57;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_ANY_CLIENT:
    php_stream_xport_crypt_method_t = 57;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_ANY_CLIENT:
    php_stream_xport_crypt_method_t = 63;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv2_SERVER:
    php_stream_xport_crypt_method_t = 2;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv3_SERVER:
    php_stream_xport_crypt_method_t = 4;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv23_SERVER:
    php_stream_xport_crypt_method_t = 56;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_0_SERVER:
    php_stream_xport_crypt_method_t = 8;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_1_SERVER:
    php_stream_xport_crypt_method_t = 16;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_2_SERVER:
    php_stream_xport_crypt_method_t = 32;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_SERVER:
    php_stream_xport_crypt_method_t = 56;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_ANY_SERVER:
    php_stream_xport_crypt_method_t = 56;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_ANY_SERVER:
    php_stream_xport_crypt_method_t = 62;
pub type php_stream_xport_crypt_method_t = u32;
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_crypto_setup"]
    pub fn php_stream_xport_crypto_setup(
        stream: *mut php_stream,
        crypto_method: php_stream_xport_crypt_method_t,
        session_stream: *mut php_stream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_crypto_enable"]
    pub fn php_stream_xport_crypto_enable(
        stream: *mut php_stream,
        activate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_crypto_param {
    pub inputs: _php_stream_xport_crypto_param__bindgen_ty_1,
    pub outputs: _php_stream_xport_crypto_param__bindgen_ty_2,
    pub op: _php_stream_xport_crypto_param__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_crypto_param__bindgen_ty_1 {
    pub session: *mut php_stream,
    pub activate: ::std::os::raw::c_int,
    pub method: php_stream_xport_crypt_method_t,
}
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param__bindgen_ty_1>())).session
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param__bindgen_ty_1>())).activate
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param__bindgen_ty_1>())).method
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(method)
        )
    );
}
impl Default for _php_stream_xport_crypto_param__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _php_stream_xport_crypto_param__bindgen_ty_2 {
    pub returncode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param__bindgen_ty_2>())).returncode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_2),
            "::",
            stringify!(returncode)
        )
    );
}
pub const _php_stream_xport_crypto_param_STREAM_XPORT_CRYPTO_OP_SETUP:
    _php_stream_xport_crypto_param__bindgen_ty_3 = 0;
pub const _php_stream_xport_crypto_param_STREAM_XPORT_CRYPTO_OP_ENABLE:
    _php_stream_xport_crypto_param__bindgen_ty_3 = 1;
pub type _php_stream_xport_crypto_param__bindgen_ty_3 = u32;
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param() {
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_xport_crypto_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_crypto_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param>())).inputs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param>())).outputs as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_stream_xport_crypto_param>())).op as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(op)
        )
    );
}
impl Default for _php_stream_xport_crypto_param {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type php_stream_xport_crypto_param = _php_stream_xport_crypto_param;
extern "C" {
    #[link_name = "\u{1}_php_stream_xport_get_hash"]
    pub fn php_stream_xport_get_hash() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_generic_socket_factory"]
    pub fn php_stream_generic_socket_factory(
        proto: *const ::std::os::raw::c_char,
        protolen: usize,
        resourcename: *const ::std::os::raw::c_char,
        resourcenamelen: usize,
        persistent_id: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        timeout: *mut timeval,
        context: *mut php_stream_context,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_stdio_ops"]
    pub static mut php_stream_stdio_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}_php_plain_files_wrapper"]
    pub static mut php_plain_files_wrapper: php_stream_wrapper;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen"]
    pub fn _php_stream_fopen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
        options: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_with_path"]
    pub fn _php_stream_fopen_with_path(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
        options: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_from_file"]
    pub fn _php_stream_fopen_from_file(
        file: *mut FILE,
        mode: *const ::std::os::raw::c_char,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_from_fd"]
    pub fn _php_stream_fopen_from_fd(
        fd: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
        persistent_id: *const ::std::os::raw::c_char,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_from_pipe"]
    pub fn _php_stream_fopen_from_pipe(
        file: *mut FILE,
        mode: *const ::std::os::raw::c_char,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_tmpfile"]
    pub fn _php_stream_fopen_tmpfile(
        dummy: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_fopen_temporary_file"]
    pub fn _php_stream_fopen_temporary_file(
        dir: *const ::std::os::raw::c_char,
        pfx: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_open_wrapper_as_file"]
    pub fn _php_stream_open_wrapper_as_file(
        path: *mut ::std::os::raw::c_char,
        mode: *mut ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        opened_path: *mut *mut zend_string,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_php_glob_stream_wrapper"]
    pub static mut php_glob_stream_wrapper: php_stream_wrapper;
}
extern "C" {
    #[link_name = "\u{1}_php_glob_stream_ops"]
    pub static mut php_glob_stream_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}__php_glob_stream_get_path"]
    pub fn _php_glob_stream_get_path(
        stream: *mut php_stream,
        copy: ::std::os::raw::c_int,
        plen: *mut usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__php_glob_stream_get_pattern"]
    pub fn _php_glob_stream_get_pattern(
        stream: *mut php_stream,
        copy: ::std::os::raw::c_int,
        plen: *mut usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__php_glob_stream_get_count"]
    pub fn _php_glob_stream_get_count(
        stream: *mut php_stream,
        pflags: *mut ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_userspace_ops"]
    pub static mut php_stream_userspace_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_userspace_dir_ops"]
    pub static mut php_stream_userspace_dir_ops: php_stream_ops;
}
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_SUPPORTED: php_stream_mmap_operation_t = 0;
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_MAP_RANGE: php_stream_mmap_operation_t = 1;
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_UNMAP: php_stream_mmap_operation_t = 2;
pub type php_stream_mmap_operation_t = u32;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_READONLY: php_stream_mmap_access_t = 0;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_READWRITE: php_stream_mmap_access_t = 1;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_SHARED_READONLY: php_stream_mmap_access_t =
    2;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_SHARED_READWRITE: php_stream_mmap_access_t =
    3;
pub type php_stream_mmap_access_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct php_stream_mmap_range {
    pub offset: usize,
    pub length: usize,
    pub mode: php_stream_mmap_access_t,
    pub mapped: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_php_stream_mmap_range() {
    assert_eq!(
        ::std::mem::size_of::<php_stream_mmap_range>(),
        32usize,
        concat!("Size of: ", stringify!(php_stream_mmap_range))
    );
    assert_eq!(
        ::std::mem::align_of::<php_stream_mmap_range>(),
        8usize,
        concat!("Alignment of ", stringify!(php_stream_mmap_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<php_stream_mmap_range>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<php_stream_mmap_range>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<php_stream_mmap_range>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<php_stream_mmap_range>())).mapped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(mapped)
        )
    );
}
impl Default for php_stream_mmap_range {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}__php_stream_mmap_range"]
    pub fn _php_stream_mmap_range(
        stream: *mut php_stream,
        offset: usize,
        length: usize,
        mode: php_stream_mmap_access_t,
        mapped_len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_mmap_unmap"]
    pub fn _php_stream_mmap_unmap(stream: *mut php_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_mmap_unmap_ex"]
    pub fn _php_stream_mmap_unmap_ex(
        stream: *mut php_stream,
        readden: zend_off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_cast"]
    pub fn _php_stream_cast(
        stream: *mut php_stream,
        castas: ::std::os::raw::c_int,
        ret: *mut *mut ::std::os::raw::c_void,
        show_err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_init_stream_wrappers"]
    pub fn php_init_stream_wrappers(module_number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_shutdown_stream_wrappers"]
    pub fn php_shutdown_stream_wrappers(
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_shutdown_stream_hashes"]
    pub fn php_shutdown_stream_hashes();
}
extern "C" {
    #[link_name = "\u{1}_zm_deactivate_streams"]
    pub fn zm_deactivate_streams(
        type_: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_register_url_stream_wrapper"]
    pub fn php_register_url_stream_wrapper(
        protocol: *const ::std::os::raw::c_char,
        wrapper: *mut php_stream_wrapper,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_unregister_url_stream_wrapper"]
    pub fn php_unregister_url_stream_wrapper(
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_register_url_stream_wrapper_volatile"]
    pub fn php_register_url_stream_wrapper_volatile(
        protocol: *const ::std::os::raw::c_char,
        wrapper: *mut php_stream_wrapper,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_unregister_url_stream_wrapper_volatile"]
    pub fn php_unregister_url_stream_wrapper_volatile(
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_open_wrapper_ex"]
    pub fn _php_stream_open_wrapper_ex(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        opened_path: *mut *mut zend_string,
        context: *mut php_stream_context,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_locate_url_wrapper"]
    pub fn php_stream_locate_url_wrapper(
        path: *const ::std::os::raw::c_char,
        path_for_open: *mut *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> *mut php_stream_wrapper;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_locate_eol"]
    pub fn php_stream_locate_eol(
        stream: *mut php_stream,
        buf: *mut zend_string,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_wrapper_log_error"]
    pub fn php_stream_wrapper_log_error(
        wrapper: *mut php_stream_wrapper,
        options: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}__php_stream_make_seekable"]
    pub fn _php_stream_make_seekable(
        origstream: *mut php_stream,
        newstream: *mut *mut php_stream,
        flags: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_get_url_stream_wrappers_hash"]
    pub fn _php_stream_get_url_stream_wrappers_hash() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_get_url_stream_wrappers_hash_global"]
    pub fn php_stream_get_url_stream_wrappers_hash_global() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}__php_get_stream_filters_hash"]
    pub fn _php_get_stream_filters_hash() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_php_get_stream_filters_hash_global"]
    pub fn php_get_stream_filters_hash_global() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_user_wrapper_ops"]
    pub static mut php_stream_user_wrapper_ops: *mut php_stream_wrapper_ops;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_memory_create"]
    pub fn _php_stream_memory_create(
        mode: ::std::os::raw::c_int,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_memory_open"]
    pub fn _php_stream_memory_open(
        mode: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        length: usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_memory_get_buffer"]
    pub fn _php_stream_memory_get_buffer(
        stream: *mut php_stream,
        length: *mut usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_temp_create"]
    pub fn _php_stream_temp_create(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_temp_create_ex"]
    pub fn _php_stream_temp_create_ex(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
        tmpdir: *const ::std::os::raw::c_char,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}__php_stream_temp_open"]
    pub fn _php_stream_temp_open(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
        buf: *mut ::std::os::raw::c_char,
        length: usize,
        __php_stream_call_depth: ::std::os::raw::c_int,
        __zend_filename: *const ::std::os::raw::c_char,
        __zend_lineno: u32,
        __zend_orig_filename: *const ::std::os::raw::c_char,
        __zend_orig_lineno: u32,
    ) -> *mut php_stream;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_memory_ops"]
    pub static mut php_stream_memory_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_temp_ops"]
    pub static mut php_stream_temp_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_rfc2397_ops"]
    pub static mut php_stream_rfc2397_ops: php_stream_ops;
}
extern "C" {
    #[link_name = "\u{1}_php_stream_rfc2397_wrapper"]
    pub static mut php_stream_rfc2397_wrapper: php_stream_wrapper;
}
pub type php_core_globals = _php_core_globals;
extern "C" {
    #[link_name = "\u{1}_core_globals_id"]
    pub static mut core_globals_id: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_tick_function_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arg_separators {
    pub output: *mut ::std::os::raw::c_char,
    pub input: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__arg_separators() {
    assert_eq!(
        ::std::mem::size_of::<_arg_separators>(),
        16usize,
        concat!("Size of: ", stringify!(_arg_separators))
    );
    assert_eq!(
        ::std::mem::align_of::<_arg_separators>(),
        8usize,
        concat!("Alignment of ", stringify!(_arg_separators))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_arg_separators>())).output as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_arg_separators),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_arg_separators>())).input as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_arg_separators),
            "::",
            stringify!(input)
        )
    );
}
impl Default for _arg_separators {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type arg_separators = _arg_separators;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_core_globals {
    pub implicit_flush: zend_bool,
    pub output_buffering: zend_long,
    pub enable_dl: zend_bool,
    pub output_handler: *mut ::std::os::raw::c_char,
    pub unserialize_callback_func: *mut ::std::os::raw::c_char,
    pub serialize_precision: zend_long,
    pub memory_limit: zend_long,
    pub max_input_time: zend_long,
    pub track_errors: zend_bool,
    pub display_errors: zend_bool,
    pub display_startup_errors: zend_bool,
    pub log_errors: zend_bool,
    pub log_errors_max_len: zend_long,
    pub ignore_repeated_errors: zend_bool,
    pub ignore_repeated_source: zend_bool,
    pub report_memleaks: zend_bool,
    pub error_log: *mut ::std::os::raw::c_char,
    pub doc_root: *mut ::std::os::raw::c_char,
    pub user_dir: *mut ::std::os::raw::c_char,
    pub include_path: *mut ::std::os::raw::c_char,
    pub open_basedir: *mut ::std::os::raw::c_char,
    pub extension_dir: *mut ::std::os::raw::c_char,
    pub php_binary: *mut ::std::os::raw::c_char,
    pub sys_temp_dir: *mut ::std::os::raw::c_char,
    pub upload_tmp_dir: *mut ::std::os::raw::c_char,
    pub upload_max_filesize: zend_long,
    pub error_append_string: *mut ::std::os::raw::c_char,
    pub error_prepend_string: *mut ::std::os::raw::c_char,
    pub auto_prepend_file: *mut ::std::os::raw::c_char,
    pub auto_append_file: *mut ::std::os::raw::c_char,
    pub input_encoding: *mut ::std::os::raw::c_char,
    pub internal_encoding: *mut ::std::os::raw::c_char,
    pub output_encoding: *mut ::std::os::raw::c_char,
    pub arg_separator: arg_separators,
    pub variables_order: *mut ::std::os::raw::c_char,
    pub rfc1867_protected_variables: HashTable,
    pub connection_status: ::std::os::raw::c_short,
    pub ignore_user_abort: zend_bool,
    pub ignore_user_abort_reserved_padding: ::std::os::raw::c_char,
    pub header_is_being_sent: ::std::os::raw::c_uchar,
    pub tick_functions: zend_llist,
    pub http_globals: [zval; 6usize],
    pub expose_php: zend_bool,
    pub register_argc_argv: zend_bool,
    pub auto_globals_jit: zend_bool,
    pub docref_root: *mut ::std::os::raw::c_char,
    pub docref_ext: *mut ::std::os::raw::c_char,
    pub html_errors: zend_bool,
    pub xmlrpc_errors: zend_bool,
    pub xmlrpc_error_number: zend_long,
    pub activated_auto_globals: [zend_bool; 8usize],
    pub modules_activated: zend_bool,
    pub file_uploads: zend_bool,
    pub during_request_startup: zend_bool,
    pub allow_url_fopen: zend_bool,
    pub enable_post_data_reading: zend_bool,
    pub report_zend_debug: zend_bool,
    pub last_error_type: ::std::os::raw::c_int,
    pub last_error_message: *mut ::std::os::raw::c_char,
    pub last_error_file: *mut ::std::os::raw::c_char,
    pub last_error_lineno: ::std::os::raw::c_int,
    pub php_sys_temp_dir: *mut ::std::os::raw::c_char,
    pub disable_functions: *mut ::std::os::raw::c_char,
    pub disable_classes: *mut ::std::os::raw::c_char,
    pub allow_url_include: zend_bool,
    pub max_input_nesting_level: zend_long,
    pub max_input_vars: zend_long,
    pub in_user_include: zend_bool,
    pub user_ini_filename: *mut ::std::os::raw::c_char,
    pub user_ini_cache_ttl: zend_long,
    pub request_order: *mut ::std::os::raw::c_char,
    pub mail_x_header: zend_bool,
    pub mail_log: *mut ::std::os::raw::c_char,
    pub in_error_log: zend_bool,
}
#[test]
fn bindgen_test_layout__php_core_globals() {
    assert_eq!(
        ::std::mem::size_of::<_php_core_globals>(),
        656usize,
        concat!("Size of: ", stringify!(_php_core_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_php_core_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_core_globals))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).implicit_flush as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(implicit_flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).output_buffering as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_buffering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).enable_dl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(enable_dl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).output_handler as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).unserialize_callback_func as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(unserialize_callback_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).serialize_precision as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(serialize_precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).memory_limit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(memory_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).max_input_time as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).track_errors as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(track_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).display_errors as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(display_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).display_startup_errors as *const _
                as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(display_startup_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).log_errors as *const _ as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(log_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).log_errors_max_len as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(log_errors_max_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).ignore_repeated_errors as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_repeated_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).ignore_repeated_source as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_repeated_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).report_memleaks as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(report_memleaks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).error_log as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).doc_root as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(doc_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).user_dir as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).include_path as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(include_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).open_basedir as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(open_basedir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).extension_dir as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(extension_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).php_binary as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(php_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).sys_temp_dir as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(sys_temp_dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).upload_tmp_dir as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(upload_tmp_dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).upload_max_filesize as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(upload_max_filesize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).error_append_string as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_append_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).error_prepend_string as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_prepend_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).auto_prepend_file as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_prepend_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).auto_append_file as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_append_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).input_encoding as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(input_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).internal_encoding as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(internal_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).output_encoding as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).arg_separator as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(arg_separator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).variables_order as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(variables_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).rfc1867_protected_variables as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(rfc1867_protected_variables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).connection_status as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(connection_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).ignore_user_abort as *const _ as usize
        },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_user_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).ignore_user_abort_reserved_padding
                as *const _ as usize
        },
        307usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_user_abort_reserved_padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).header_is_being_sent as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(header_is_being_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).tick_functions as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(tick_functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).http_globals as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(http_globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).expose_php as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(expose_php)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).register_argc_argv as *const _ as usize
        },
        465usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(register_argc_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).auto_globals_jit as *const _ as usize
        },
        466usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_globals_jit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).docref_root as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(docref_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).docref_ext as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(docref_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).html_errors as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(html_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).xmlrpc_errors as *const _ as usize },
        489usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(xmlrpc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).xmlrpc_error_number as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(xmlrpc_error_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).activated_auto_globals as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(activated_auto_globals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).modules_activated as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(modules_activated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).file_uploads as *const _ as usize },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(file_uploads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).during_request_startup as *const _
                as usize
        },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(during_request_startup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).allow_url_fopen as *const _ as usize
        },
        515usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(allow_url_fopen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).enable_post_data_reading as *const _
                as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(enable_post_data_reading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).report_zend_debug as *const _ as usize
        },
        517usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(report_zend_debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).last_error_type as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).last_error_message as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).last_error_file as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).last_error_lineno as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).php_sys_temp_dir as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(php_sys_temp_dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).disable_functions as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(disable_functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).disable_classes as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(disable_classes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).allow_url_include as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(allow_url_include)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).max_input_nesting_level as *const _
                as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_nesting_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).max_input_vars as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_vars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).in_user_include as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(in_user_include)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).user_ini_filename as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_ini_filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_php_core_globals>())).user_ini_cache_ttl as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_ini_cache_ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).request_order as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(request_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).mail_x_header as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(mail_x_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).mail_log as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(mail_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_php_core_globals>())).in_error_log as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(in_error_log)
        )
    );
}
impl Default for _php_core_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry_def {
    pub name: *const ::std::os::raw::c_char,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *const ::std::os::raw::c_char,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int),
    >,
    pub modifiable: ::std::os::raw::c_int,
    pub name_length: u32,
    pub value_length: u32,
}
#[test]
fn bindgen_test_layout__zend_ini_entry_def() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry_def>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ini_entry_def))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry_def>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry_def))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).on_modify as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(on_modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).mh_arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).mh_arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).mh_arg3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).displayer as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(displayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).modifiable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry_def>())).name_length as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_entry_def>())).value_length as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(value_length)
        )
    );
}
impl Default for _zend_ini_entry_def {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ini_entry_def = _zend_ini_entry_def;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry {
    pub name: *mut zend_string,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *mut zend_string,
    pub orig_value: *mut zend_string,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int),
    >,
    pub modifiable: ::std::os::raw::c_int,
    pub orig_modifiable: ::std::os::raw::c_int,
    pub modified: ::std::os::raw::c_int,
    pub module_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_ini_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry>(),
        80usize,
        concat!("Size of: ", stringify!(_zend_ini_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).on_modify as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(on_modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).orig_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).displayer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(displayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).modifiable as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).orig_modifiable as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).modified as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).module_number as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(module_number)
        )
    );
}
impl Default for _zend_ini_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_startup"]
    pub fn zend_ini_startup() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_shutdown"]
    pub fn zend_ini_shutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_global_shutdown"]
    pub fn zend_ini_global_shutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_deactivate"]
    pub fn zend_ini_deactivate() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_dtor"]
    pub fn zend_ini_dtor(ini_directives: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_copy_ini_directives"]
    pub fn zend_copy_ini_directives() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_sort_entries"]
    pub fn zend_ini_sort_entries();
}
extern "C" {
    #[link_name = "\u{1}_zend_register_ini_entries"]
    pub fn zend_register_ini_entries(
        ini_entry: *const zend_ini_entry_def,
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_unregister_ini_entries"]
    pub fn zend_unregister_ini_entries(module_number: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_refresh_caches"]
    pub fn zend_ini_refresh_caches(stage: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_zend_alter_ini_entry"]
    pub fn zend_alter_ini_entry(
        name: *mut zend_string,
        new_value: *mut zend_string,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_alter_ini_entry_ex"]
    pub fn zend_alter_ini_entry_ex(
        name: *mut zend_string,
        new_value: *mut zend_string,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
        force_change: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_alter_ini_entry_chars"]
    pub fn zend_alter_ini_entry_chars(
        name: *mut zend_string,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_alter_ini_entry_chars_ex"]
    pub fn zend_alter_ini_entry_chars_ex(
        name: *mut zend_string,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
        force_change: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_restore_ini_entry"]
    pub fn zend_restore_ini_entry(
        name: *mut zend_string,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_display_ini_entries"]
    pub fn display_ini_entries(module: *mut zend_module_entry);
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_long"]
    pub fn zend_ini_long(
        name: *mut ::std::os::raw::c_char,
        name_length: u32,
        orig: ::std::os::raw::c_int,
    ) -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_double"]
    pub fn zend_ini_double(
        name: *mut ::std::os::raw::c_char,
        name_length: u32,
        orig: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_string"]
    pub fn zend_ini_string(
        name: *mut ::std::os::raw::c_char,
        name_length: u32,
        orig: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_string_ex"]
    pub fn zend_ini_string_ex(
        name: *mut ::std::os::raw::c_char,
        name_length: u32,
        orig: ::std::os::raw::c_int,
        exists: *mut zend_bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_register_displayer"]
    pub fn zend_ini_register_displayer(
        name: *mut ::std::os::raw::c_char,
        name_length: u32,
        displayer: ::std::option::Option<
            unsafe extern "C" fn(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_boolean_displayer_cb"]
    pub fn zend_ini_boolean_displayer_cb(
        ini_entry: *mut zend_ini_entry,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_ini_color_displayer_cb"]
    pub fn zend_ini_color_displayer_cb(
        ini_entry: *mut zend_ini_entry,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_display_link_numbers"]
    pub fn display_link_numbers(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateBool"]
    pub fn OnUpdateBool(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateLong"]
    pub fn OnUpdateLong(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateLongGEZero"]
    pub fn OnUpdateLongGEZero(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateReal"]
    pub fn OnUpdateReal(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateString"]
    pub fn OnUpdateString(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateStringUnempty"]
    pub fn OnUpdateStringUnempty(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type zend_ini_parser_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut zval,
        arg2: *mut zval,
        arg3: *mut zval,
        callback_type: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_zend_parse_ini_file"]
    pub fn zend_parse_ini_file(
        fh: *mut zend_file_handle,
        unbuffered_errors: zend_bool,
        scanner_mode: ::std::os::raw::c_int,
        ini_parser_cb: zend_ini_parser_cb_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_parse_ini_string"]
    pub fn zend_parse_ini_string(
        str: *mut ::std::os::raw::c_char,
        unbuffered_errors: zend_bool,
        scanner_mode: ::std::os::raw::c_int,
        ini_parser_cb: zend_ini_parser_cb_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_parser_param {
    pub ini_parser_cb: zend_ini_parser_cb_t,
    pub arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_ini_parser_param() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_parser_param>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ini_parser_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_parser_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_parser_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_ini_parser_param>())).ini_parser_cb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_parser_param),
            "::",
            stringify!(ini_parser_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_parser_param>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_parser_param),
            "::",
            stringify!(arg)
        )
    );
}
impl Default for _zend_ini_parser_param {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_ini_parser_param = _zend_ini_parser_param;
extern "C" {
    #[link_name = "\u{1}_config_zval_dtor"]
    pub fn config_zval_dtor(zvalue: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_php_init_config"]
    pub fn php_init_config() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_shutdown_config"]
    pub fn php_shutdown_config() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_ini_register_extensions"]
    pub fn php_ini_register_extensions();
}
extern "C" {
    #[link_name = "\u{1}_cfg_get_entry_ex"]
    pub fn cfg_get_entry_ex(name: *mut zend_string) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_cfg_get_entry"]
    pub fn cfg_get_entry(name: *const ::std::os::raw::c_char, name_length: usize) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_cfg_get_long"]
    pub fn cfg_get_long(
        varname: *const ::std::os::raw::c_char,
        result: *mut zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cfg_get_double"]
    pub fn cfg_get_double(
        varname: *const ::std::os::raw::c_char,
        result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cfg_get_string"]
    pub fn cfg_get_string(
        varname: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_parse_user_ini_file"]
    pub fn php_parse_user_ini_file(
        dirname: *const ::std::os::raw::c_char,
        ini_filename: *mut ::std::os::raw::c_char,
        target_hash: *mut HashTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_ini_activate_config"]
    pub fn php_ini_activate_config(
        source_hash: *mut HashTable,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_ini_has_per_dir_config"]
    pub fn php_ini_has_per_dir_config() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_ini_has_per_host_config"]
    pub fn php_ini_has_per_host_config() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_ini_activate_per_dir_config"]
    pub fn php_ini_activate_per_dir_config(path: *mut ::std::os::raw::c_char, path_len: usize);
}
extern "C" {
    #[link_name = "\u{1}_php_ini_activate_per_host_config"]
    pub fn php_ini_activate_per_host_config(host: *const ::std::os::raw::c_char, host_len: usize);
}
extern "C" {
    #[link_name = "\u{1}_php_ini_get_configuration_hash"]
    pub fn php_ini_get_configuration_hash() -> *mut HashTable;
}
extern "C" {
    #[link_name = "\u{1}_php_fopen_primary_script"]
    pub fn php_fopen_primary_script(file_handle: *mut zend_file_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_expand_filepath"]
    pub fn expand_filepath(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_expand_filepath_ex"]
    pub fn expand_filepath_ex(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
        relative_to: *const ::std::os::raw::c_char,
        relative_to_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_expand_filepath_with_mode"]
    pub fn expand_filepath_with_mode(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
        relative_to: *const ::std::os::raw::c_char,
        relative_to_len: usize,
        use_realpath: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_php_check_open_basedir"]
    pub fn php_check_open_basedir(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_check_open_basedir_ex"]
    pub fn php_check_open_basedir_ex(
        path: *const ::std::os::raw::c_char,
        warn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_check_specific_open_basedir"]
    pub fn php_check_specific_open_basedir(
        basedir: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_check_safe_mode_include_dir"]
    pub fn php_check_safe_mode_include_dir(
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_resolve_path"]
    pub fn php_resolve_path(
        filename: *const ::std::os::raw::c_char,
        filename_len: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> *mut zend_string;
}
extern "C" {
    #[link_name = "\u{1}_php_fopen_with_path"]
    pub fn php_fopen_with_path(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_php_strip_url_passwd"]
    pub fn php_strip_url_passwd(path: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_OnUpdateBaseDir"]
    pub fn OnUpdateBaseDir(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utimbuf>())).actime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(actime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utimbuf>())).modtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(modtime)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_utime"]
    pub fn utime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: ino_t,
    pub d_reclen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_namlen: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        264usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        4usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_namlen as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_namlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
impl Default for dirent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__padding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl Default for DIR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_closedir"]
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opendir"]
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_readdir"]
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}_readdir_r"]
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewinddir"]
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    #[link_name = "\u{1}_seekdir"]
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_telldir"]
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fdopendir"]
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_alphasort"]
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir"]
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *const dirent, arg2: *mut *const dirent)
                -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir_b"]
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___opendir2"]
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cwd_state {
    pub cwd: *mut ::std::os::raw::c_char,
    pub cwd_length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cwd_state() {
    assert_eq!(
        ::std::mem::size_of::<_cwd_state>(),
        16usize,
        concat!("Size of: ", stringify!(_cwd_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_cwd_state>(),
        8usize,
        concat!("Alignment of ", stringify!(_cwd_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cwd_state>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cwd_state),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cwd_state>())).cwd_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cwd_state),
            "::",
            stringify!(cwd_length)
        )
    );
}
impl Default for _cwd_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cwd_state = _cwd_state;
pub type verify_path_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const cwd_state) -> ::std::os::raw::c_int>;
extern "C" {
    #[link_name = "\u{1}_virtual_cwd_startup"]
    pub fn virtual_cwd_startup();
}
extern "C" {
    #[link_name = "\u{1}_virtual_cwd_shutdown"]
    pub fn virtual_cwd_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_virtual_cwd_activate"]
    pub fn virtual_cwd_activate() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_cwd_deactivate"]
    pub fn virtual_cwd_deactivate() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_getcwd_ex"]
    pub fn virtual_getcwd_ex(length: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_virtual_getcwd"]
    pub fn virtual_getcwd(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_virtual_chdir"]
    pub fn virtual_chdir(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_chdir_file"]
    pub fn virtual_chdir_file(
        path: *const ::std::os::raw::c_char,
        p_chdir: ::std::option::Option<
            unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_filepath"]
    pub fn virtual_filepath(
        path: *const ::std::os::raw::c_char,
        filepath: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_filepath_ex"]
    pub fn virtual_filepath_ex(
        path: *const ::std::os::raw::c_char,
        filepath: *mut *mut ::std::os::raw::c_char,
        verify_path: verify_path_func,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_realpath"]
    pub fn virtual_realpath(
        path: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_virtual_fopen"]
    pub fn virtual_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_virtual_open"]
    pub fn virtual_open(
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_creat"]
    pub fn virtual_creat(
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_rename"]
    pub fn virtual_rename(
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_stat"]
    pub fn virtual_stat(
        path: *const ::std::os::raw::c_char,
        buf: *mut zend_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_lstat"]
    pub fn virtual_lstat(
        path: *const ::std::os::raw::c_char,
        buf: *mut zend_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_unlink"]
    pub fn virtual_unlink(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_mkdir"]
    pub fn virtual_mkdir(
        pathname: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_rmdir"]
    pub fn virtual_rmdir(pathname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_opendir"]
    pub fn virtual_opendir(pathname: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_virtual_popen"]
    pub fn virtual_popen(
        command: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_virtual_access"]
    pub fn virtual_access(
        pathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_utime"]
    pub fn virtual_utime(
        filename: *const ::std::os::raw::c_char,
        buf: *mut utimbuf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_chmod"]
    pub fn virtual_chmod(
        filename: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_chown"]
    pub fn virtual_chown(
        filename: *const ::std::os::raw::c_char,
        owner: uid_t,
        group: gid_t,
        link: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_virtual_file_ex"]
    pub fn virtual_file_ex(
        state: *mut cwd_state,
        path: *const ::std::os::raw::c_char,
        verify_path: verify_path_func,
        use_realpath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tsrm_realpath"]
    pub fn tsrm_realpath(
        path: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _realpath_cache_bucket {
    pub key: zend_ulong,
    pub path: *mut ::std::os::raw::c_char,
    pub realpath: *mut ::std::os::raw::c_char,
    pub next: *mut _realpath_cache_bucket,
    pub expires: time_t,
    pub path_len: u16,
    pub realpath_len: u16,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout__realpath_cache_bucket() {
    assert_eq!(
        ::std::mem::size_of::<_realpath_cache_bucket>(),
        48usize,
        concat!("Size of: ", stringify!(_realpath_cache_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<_realpath_cache_bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_realpath_cache_bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).realpath as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(realpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).expires as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_realpath_cache_bucket>())).path_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(path_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_realpath_cache_bucket>())).realpath_len as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(realpath_len)
        )
    );
}
impl Default for _realpath_cache_bucket {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl _realpath_cache_bucket {
    #[inline]
    pub fn is_dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is_dir: u8) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_dir: u8 = unsafe { ::std::mem::transmute(is_dir) };
            is_dir as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type realpath_cache_bucket = _realpath_cache_bucket;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virtual_cwd_globals {
    pub cwd: cwd_state,
    pub realpath_cache_size: zend_long,
    pub realpath_cache_size_limit: zend_long,
    pub realpath_cache_ttl: zend_long,
    pub realpath_cache: [*mut realpath_cache_bucket; 1024usize],
}
#[test]
fn bindgen_test_layout__virtual_cwd_globals() {
    assert_eq!(
        ::std::mem::size_of::<_virtual_cwd_globals>(),
        8232usize,
        concat!("Size of: ", stringify!(_virtual_cwd_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_virtual_cwd_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_virtual_cwd_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_virtual_cwd_globals>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_virtual_cwd_globals>())).realpath_cache_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_virtual_cwd_globals>())).realpath_cache_size_limit as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_size_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_virtual_cwd_globals>())).realpath_cache_ttl as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_ttl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_virtual_cwd_globals>())).realpath_cache as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache)
        )
    );
}
impl Default for _virtual_cwd_globals {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type virtual_cwd_globals = _virtual_cwd_globals;
extern "C" {
    #[link_name = "\u{1}_cwd_globals_id"]
    pub static mut cwd_globals_id: ts_rsrc_id;
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_clean"]
    pub fn realpath_cache_clean();
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_del"]
    pub fn realpath_cache_del(path: *const ::std::os::raw::c_char, path_len: usize);
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_lookup"]
    pub fn realpath_cache_lookup(
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        t: time_t,
    ) -> *mut realpath_cache_bucket;
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_size"]
    pub fn realpath_cache_size() -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_max_buckets"]
    pub fn realpath_cache_max_buckets() -> zend_long;
}
extern "C" {
    #[link_name = "\u{1}_realpath_cache_get_buckets"]
    pub fn realpath_cache_get_buckets() -> *mut *mut realpath_cache_bucket;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_constant {
    pub value: zval,
    pub name: *mut zend_string,
    pub flags: ::std::os::raw::c_int,
    pub module_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_constant() {
    assert_eq!(
        ::std::mem::size_of::<_zend_constant>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_constant))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_constant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_constant>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_constant),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_constant>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_constant),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_constant>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_constant),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_constant>())).module_number as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_constant),
            "::",
            stringify!(module_number)
        )
    );
}
impl Default for _zend_constant {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type zend_constant = _zend_constant;
extern "C" {
    #[link_name = "\u{1}_clean_module_constants"]
    pub fn clean_module_constants(module_number: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_free_zend_constant"]
    pub fn free_zend_constant(zv: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_zend_startup_constants"]
    pub fn zend_startup_constants() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_shutdown_constants"]
    pub fn zend_shutdown_constants() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_standard_constants"]
    pub fn zend_register_standard_constants();
}
extern "C" {
    #[link_name = "\u{1}_zend_verify_const_access"]
    pub fn zend_verify_const_access(
        c: *mut zend_class_constant,
        ce: *mut zend_class_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_constant"]
    pub fn zend_get_constant(name: *mut zend_string) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_constant_str"]
    pub fn zend_get_constant_str(name: *const ::std::os::raw::c_char, name_len: usize)
        -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_get_constant_ex"]
    pub fn zend_get_constant_ex(
        name: *mut zend_string,
        scope: *mut zend_class_entry,
        flags: u32,
    ) -> *mut zval;
}
extern "C" {
    #[link_name = "\u{1}_zend_register_bool_constant"]
    pub fn zend_register_bool_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        bval: zend_bool,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_null_constant"]
    pub fn zend_register_null_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_long_constant"]
    pub fn zend_register_long_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        lval: zend_long,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_double_constant"]
    pub fn zend_register_double_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        dval: f64,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_string_constant"]
    pub fn zend_register_string_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        strval: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_stringl_constant"]
    pub fn zend_register_stringl_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        strval: *mut ::std::os::raw::c_char,
        strlen: usize,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_zend_register_constant"]
    pub fn zend_register_constant(c: *mut zend_constant) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zend_copy_constants"]
    pub fn zend_copy_constants(target: *mut HashTable, sourc: *mut HashTable);
}
extern "C" {
    #[link_name = "\u{1}_zend_quick_get_constant"]
    pub fn zend_quick_get_constant(key: *const zval, flags: u32) -> *mut zend_constant;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_header_struct {
    pub header: *mut ::std::os::raw::c_char,
    pub header_len: usize,
}
#[test]
fn bindgen_test_layout_sapi_header_struct() {
    assert_eq!(
        ::std::mem::size_of::<sapi_header_struct>(),
        16usize,
        concat!("Size of: ", stringify!(sapi_header_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_header_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_header_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_header_struct>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_struct),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_header_struct>())).header_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_struct),
            "::",
            stringify!(header_len)
        )
    );
}
impl Default for sapi_header_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_headers_struct {
    pub headers: zend_llist,
    pub http_response_code: ::std::os::raw::c_int,
    pub send_default_content_type: ::std::os::raw::c_uchar,
    pub mimetype: *mut ::std::os::raw::c_char,
    pub http_status_line: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sapi_headers_struct() {
    assert_eq!(
        ::std::mem::size_of::<sapi_headers_struct>(),
        80usize,
        concat!("Size of: ", stringify!(sapi_headers_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_headers_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_headers_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_headers_struct>())).headers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_headers_struct>())).http_response_code as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(http_response_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_headers_struct>())).send_default_content_type as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(send_default_content_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_headers_struct>())).mimetype as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(mimetype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_headers_struct>())).http_status_line as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(http_status_line)
        )
    );
}
impl Default for sapi_headers_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sapi_post_entry = _sapi_post_entry;
pub type sapi_module_struct = _sapi_module_struct;
extern "C" {
    #[link_name = "\u{1}_sapi_module"]
    pub static mut sapi_module: sapi_module_struct;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_request_info {
    pub request_method: *const ::std::os::raw::c_char,
    pub query_string: *mut ::std::os::raw::c_char,
    pub cookie_data: *mut ::std::os::raw::c_char,
    pub content_length: zend_long,
    pub path_translated: *mut ::std::os::raw::c_char,
    pub request_uri: *mut ::std::os::raw::c_char,
    pub request_body: *mut _php_stream,
    pub content_type: *const ::std::os::raw::c_char,
    pub headers_only: zend_bool,
    pub no_headers: zend_bool,
    pub headers_read: zend_bool,
    pub post_entry: *mut sapi_post_entry,
    pub content_type_dup: *mut ::std::os::raw::c_char,
    pub auth_user: *mut ::std::os::raw::c_char,
    pub auth_password: *mut ::std::os::raw::c_char,
    pub auth_digest: *mut ::std::os::raw::c_char,
    pub argv0: *mut ::std::os::raw::c_char,
    pub current_user: *mut ::std::os::raw::c_char,
    pub current_user_length: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub proto_num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sapi_request_info() {
    assert_eq!(
        ::std::mem::size_of::<sapi_request_info>(),
        152usize,
        concat!("Size of: ", stringify!(sapi_request_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_request_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_request_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_request_info>())).request_method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).query_string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(query_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).cookie_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(cookie_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_request_info>())).content_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_request_info>())).path_translated as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(path_translated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).request_uri as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).request_body as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).content_type as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).headers_only as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(headers_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).no_headers as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(no_headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).headers_read as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(headers_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).post_entry as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(post_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_request_info>())).content_type_dup as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_type_dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).auth_user as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).auth_password as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).auth_digest as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).argv0 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argv0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).current_user as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(current_user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sapi_request_info>())).current_user_length as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(current_user_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).argc as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).argv as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_request_info>())).proto_num as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(proto_num)
        )
    );
}
impl Default for sapi_request_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sapi_globals_struct {
    pub server_context: *mut ::std::os::raw::c_void,
    pub request_info: sapi_request_info,
    pub sapi_headers: sapi_headers_struct,
    pub read_post_bytes: i64,
    pub post_read: ::std::os::raw::c_uchar,
    pub headers_sent: ::std::os::raw::c_uchar,
    pub global_stat: zend_stat_t,
    pub default_mimetype: *mut ::std::os::raw::c_char,
    pub default_charset: *mut ::std::os::raw::c_char,
    pub rfc1867_uploaded_files: *mut HashTable,
    pub post_max_size: zend_long,
    pub options: ::std::os::raw::c_int,
    pub sapi_started: zend_bool,
    pub global_request_time: f64,
    pub known_post_content_types: HashTable,
    pub callback_func: zval,
    pub fci_cache: zend_fcall_info_cache,
}
#[test]
fn bindgen_test_layout__sapi_globals_struct() {
    assert_eq!(
        ::std::mem::size_of::<_sapi_globals_struct>(),
        536usize,
        concat!("Size of: ", stringify!(_sapi_globals_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_globals_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_globals_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).server_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(server_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).request_info as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(request_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).sapi_headers as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(sapi_headers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).read_post_bytes as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(read_post_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_globals_struct>())).post_read as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(post_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).headers_sent as *const _ as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(headers_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).global_stat as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(global_stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).default_mimetype as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(default_mimetype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).default_charset as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(default_charset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).rfc1867_uploaded_files as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(rfc1867_uploaded_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).post_max_size as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(post_max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_globals_struct>())).options as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).sapi_started as *const _ as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(sapi_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).global_request_time as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(global_request_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).known_post_content_types as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(known_post_content_types)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_globals_struct>())).callback_func as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(callback_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_globals_struct>())).fci_cache as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(fci_cache)
        )
    );
}
impl Default for _sapi_globals_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sapi_globals_struct = _sapi_globals_struct;
extern "C" {
    #[link_name = "\u{1}_sapi_globals_id"]
    pub static mut sapi_globals_id: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_startup"]
    pub fn sapi_startup(sf: *mut sapi_module_struct);
}
extern "C" {
    #[link_name = "\u{1}_sapi_shutdown"]
    pub fn sapi_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_sapi_activate"]
    pub fn sapi_activate();
}
extern "C" {
    #[link_name = "\u{1}_sapi_deactivate"]
    pub fn sapi_deactivate();
}
extern "C" {
    #[link_name = "\u{1}_sapi_initialize_empty_request"]
    pub fn sapi_initialize_empty_request();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_header_line {
    pub line: *mut ::std::os::raw::c_char,
    pub line_len: usize,
    pub response_code: zend_long,
}
#[test]
fn bindgen_test_layout_sapi_header_line() {
    assert_eq!(
        ::std::mem::size_of::<sapi_header_line>(),
        24usize,
        concat!("Size of: ", stringify!(sapi_header_line))
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_header_line>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_header_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_header_line>())).line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_header_line>())).line_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(line_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sapi_header_line>())).response_code as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(response_code)
        )
    );
}
impl Default for sapi_header_line {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const sapi_header_op_enum_SAPI_HEADER_REPLACE: sapi_header_op_enum = 0;
pub const sapi_header_op_enum_SAPI_HEADER_ADD: sapi_header_op_enum = 1;
pub const sapi_header_op_enum_SAPI_HEADER_DELETE: sapi_header_op_enum = 2;
pub const sapi_header_op_enum_SAPI_HEADER_DELETE_ALL: sapi_header_op_enum = 3;
pub const sapi_header_op_enum_SAPI_HEADER_SET_STATUS: sapi_header_op_enum = 4;
pub type sapi_header_op_enum = u32;
extern "C" {
    #[link_name = "\u{1}_sapi_header_op"]
    pub fn sapi_header_op(
        op: sapi_header_op_enum,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_add_header_ex"]
    pub fn sapi_add_header_ex(
        header_line: *mut ::std::os::raw::c_char,
        header_line_len: usize,
        duplicate: zend_bool,
        replace: zend_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_send_headers"]
    pub fn sapi_send_headers() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_free_header"]
    pub fn sapi_free_header(sapi_header: *mut sapi_header_struct);
}
extern "C" {
    #[link_name = "\u{1}_sapi_handle_post"]
    pub fn sapi_handle_post(arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_sapi_read_post_block"]
    pub fn sapi_read_post_block(buffer: *mut ::std::os::raw::c_char, buflen: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_sapi_register_post_entries"]
    pub fn sapi_register_post_entries(post_entry: *mut sapi_post_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_register_post_entry"]
    pub fn sapi_register_post_entry(post_entry: *mut sapi_post_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_unregister_post_entry"]
    pub fn sapi_unregister_post_entry(post_entry: *mut sapi_post_entry);
}
extern "C" {
    #[link_name = "\u{1}_sapi_register_default_post_reader"]
    pub fn sapi_register_default_post_reader(
        default_post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_register_treat_data"]
    pub fn sapi_register_treat_data(
        treat_data: ::std::option::Option<
            unsafe extern "C" fn(
                arg: ::std::os::raw::c_int,
                str: *mut ::std::os::raw::c_char,
                destArray: *mut zval,
            ),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_register_input_filter"]
    pub fn sapi_register_input_filter(
        input_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg: ::std::os::raw::c_int,
                var: *mut ::std::os::raw::c_char,
                val: *mut *mut ::std::os::raw::c_char,
                val_len: usize,
                new_val_len: *mut usize,
            ) -> ::std::os::raw::c_uint,
        >,
        input_filter_init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_flush"]
    pub fn sapi_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_stat"]
    pub fn sapi_get_stat() -> *mut zend_stat_t;
}
extern "C" {
    #[link_name = "\u{1}_sapi_getenv"]
    pub fn sapi_getenv(
        name: *mut ::std::os::raw::c_char,
        name_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_default_content_type"]
    pub fn sapi_get_default_content_type() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_default_content_type_header"]
    pub fn sapi_get_default_content_type_header(default_header: *mut sapi_header_struct);
}
extern "C" {
    #[link_name = "\u{1}_sapi_apply_default_charset"]
    pub fn sapi_apply_default_charset(
        mimetype: *mut *mut ::std::os::raw::c_char,
        len: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_sapi_activate_headers_only"]
    pub fn sapi_activate_headers_only();
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_fd"]
    pub fn sapi_get_fd(fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_force_http_10"]
    pub fn sapi_force_http_10() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_target_uid"]
    pub fn sapi_get_target_uid(arg1: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_target_gid"]
    pub fn sapi_get_target_gid(arg1: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sapi_get_request_time"]
    pub fn sapi_get_request_time() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sapi_terminate_process"]
    pub fn sapi_terminate_process();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sapi_module_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub pretty_name: *mut ::std::os::raw::c_char,
    pub startup: ::std::option::Option<
        unsafe extern "C" fn(sapi_module: *mut _sapi_module_struct) -> ::std::os::raw::c_int,
    >,
    pub shutdown: ::std::option::Option<
        unsafe extern "C" fn(sapi_module: *mut _sapi_module_struct) -> ::std::os::raw::c_int,
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub ub_write: ::std::option::Option<
        unsafe extern "C" fn(str: *const ::std::os::raw::c_char, str_length: usize) -> usize,
    >,
    pub flush:
        ::std::option::Option<unsafe extern "C" fn(server_context: *mut ::std::os::raw::c_void)>,
    pub get_stat: ::std::option::Option<unsafe extern "C" fn() -> *mut zend_stat_t>,
    pub getenv: ::std::option::Option<
        unsafe extern "C" fn(name: *mut ::std::os::raw::c_char, name_len: usize)
            -> *mut ::std::os::raw::c_char,
    >,
    pub sapi_error: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_msg: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub header_handler: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_header: *mut sapi_header_struct,
            op: sapi_header_op_enum,
            sapi_headers: *mut sapi_headers_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub send_headers: ::std::option::Option<
        unsafe extern "C" fn(sapi_headers: *mut sapi_headers_struct) -> ::std::os::raw::c_int,
    >,
    pub send_header: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_header: *mut sapi_header_struct,
            server_context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub read_post: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_char, count_bytes: usize) -> usize,
    >,
    pub read_cookies: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub register_server_variables:
        ::std::option::Option<unsafe extern "C" fn(track_vars_array: *mut zval)>,
    pub log_message: ::std::option::Option<
        unsafe extern "C" fn(
            message: *mut ::std::os::raw::c_char,
            syslog_type_int: ::std::os::raw::c_int,
        ),
    >,
    pub get_request_time: ::std::option::Option<unsafe extern "C" fn() -> f64>,
    pub terminate_process: ::std::option::Option<unsafe extern "C" fn()>,
    pub php_ini_path_override: *mut ::std::os::raw::c_char,
    pub default_post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    pub treat_data: ::std::option::Option<
        unsafe extern "C" fn(
            arg: ::std::os::raw::c_int,
            str: *mut ::std::os::raw::c_char,
            destArray: *mut zval,
        ),
    >,
    pub executable_location: *mut ::std::os::raw::c_char,
    pub php_ini_ignore: ::std::os::raw::c_int,
    pub php_ini_ignore_cwd: ::std::os::raw::c_int,
    pub get_fd: ::std::option::Option<
        unsafe extern "C" fn(fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub force_http_10: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub get_target_uid:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uid_t) -> ::std::os::raw::c_int>,
    pub get_target_gid:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut gid_t) -> ::std::os::raw::c_int>,
    pub input_filter: ::std::option::Option<
        unsafe extern "C" fn(
            arg: ::std::os::raw::c_int,
            var: *mut ::std::os::raw::c_char,
            val: *mut *mut ::std::os::raw::c_char,
            val_len: usize,
            new_val_len: *mut usize,
        ) -> ::std::os::raw::c_uint,
    >,
    pub ini_defaults:
        ::std::option::Option<unsafe extern "C" fn(configuration_hash: *mut HashTable)>,
    pub phpinfo_as_text: ::std::os::raw::c_int,
    pub ini_entries: *mut ::std::os::raw::c_char,
    pub additional_functions: *const zend_function_entry,
    pub input_filter_init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
}
#[test]
fn bindgen_test_layout__sapi_module_struct() {
    assert_eq!(
        ::std::mem::size_of::<_sapi_module_struct>(),
        280usize,
        concat!("Size of: ", stringify!(_sapi_module_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_module_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_module_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).pretty_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(pretty_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).startup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).shutdown as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).activate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).deactivate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(deactivate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).ub_write as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ub_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).flush as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).get_stat as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).getenv as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(getenv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).sapi_error as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(sapi_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).header_handler as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(header_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).send_headers as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(send_headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).send_header as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(send_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).read_post as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(read_post)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).read_cookies as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(read_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).register_server_variables as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(register_server_variables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).log_message as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(log_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).get_request_time as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_request_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).terminate_process as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(terminate_process)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).php_ini_path_override as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_path_override)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).default_post_reader as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(default_post_reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).treat_data as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(treat_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).executable_location as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(executable_location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).php_ini_ignore as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_ignore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).php_ini_ignore_cwd as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_ignore_cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).get_fd as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).force_http_10 as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(force_http_10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).get_target_uid as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_target_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).get_target_gid as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_target_gid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).input_filter as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(input_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).ini_defaults as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ini_defaults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).phpinfo_as_text as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(phpinfo_as_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_module_struct>())).ini_entries as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ini_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).additional_functions as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(additional_functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_module_struct>())).input_filter_init as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(input_filter_init)
        )
    );
}
impl Default for _sapi_module_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sapi_post_entry {
    pub content_type: *mut ::std::os::raw::c_char,
    pub content_type_len: u32,
    pub post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    pub post_handler: ::std::option::Option<
        unsafe extern "C" fn(
            content_type_dup: *mut ::std::os::raw::c_char,
            arg: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout__sapi_post_entry() {
    assert_eq!(
        ::std::mem::size_of::<_sapi_post_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_sapi_post_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_post_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_post_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_post_entry>())).content_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_sapi_post_entry>())).content_type_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(content_type_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_post_entry>())).post_reader as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(post_reader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sapi_post_entry>())).post_handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(post_handler)
        )
    );
}
impl Default for _sapi_post_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_sapi_read_standard_form_data"]
    pub fn sapi_read_standard_form_data();
}
extern "C" {
    #[link_name = "\u{1}_php_default_post_reader"]
    pub fn php_default_post_reader();
}
extern "C" {
    #[link_name = "\u{1}_php_default_treat_data"]
    pub fn php_default_treat_data(
        arg: ::std::os::raw::c_int,
        str: *mut ::std::os::raw::c_char,
        destArray: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_default_input_filter"]
    pub fn php_default_input_filter(
        arg: ::std::os::raw::c_int,
        var: *mut ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
        val_len: usize,
        new_val_len: *mut usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_php_request_startup"]
    pub fn php_request_startup() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_request_shutdown"]
    pub fn php_request_shutdown(dummy: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_php_request_shutdown_for_exec"]
    pub fn php_request_shutdown_for_exec(dummy: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_php_module_startup"]
    pub fn php_module_startup(
        sf: *mut sapi_module_struct,
        additional_modules: *mut zend_module_entry,
        num_additional_modules: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_module_shutdown"]
    pub fn php_module_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_php_module_shutdown_for_exec"]
    pub fn php_module_shutdown_for_exec();
}
extern "C" {
    #[link_name = "\u{1}_php_module_shutdown_wrapper"]
    pub fn php_module_shutdown_wrapper(
        sapi_globals: *mut sapi_module_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_request_startup_for_hook"]
    pub fn php_request_startup_for_hook() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_request_shutdown_for_hook"]
    pub fn php_request_shutdown_for_hook(dummy: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_php_register_extensions"]
    pub fn php_register_extensions(
        ptr: *mut *mut zend_module_entry,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_execute_script"]
    pub fn php_execute_script(primary_file: *mut zend_file_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_execute_simple_script"]
    pub fn php_execute_simple_script(
        primary_file: *mut zend_file_handle,
        ret: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_handle_special_queries"]
    pub fn php_handle_special_queries() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_lint_script"]
    pub fn php_lint_script(file: *mut zend_file_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_handle_aborted_connection"]
    pub fn php_handle_aborted_connection();
}
extern "C" {
    #[link_name = "\u{1}_php_handle_auth_data"]
    pub fn php_handle_auth_data(auth: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_html_puts"]
    pub fn php_html_puts(str: *const ::std::os::raw::c_char, siz: usize);
}
extern "C" {
    #[link_name = "\u{1}_php_stream_open_for_zend_ex"]
    pub fn php_stream_open_for_zend_ex(
        filename: *const ::std::os::raw::c_char,
        handle: *mut zend_file_handle,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_init_environ"]
    pub fn php_init_environ() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_shutdown_environ"]
    pub fn php_shutdown_environ() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_startup_auto_globals"]
    pub fn php_startup_auto_globals();
}
extern "C" {
    #[link_name = "\u{1}_php_import_environment_variables"]
    pub static mut php_import_environment_variables:
        ::std::option::Option<unsafe extern "C" fn(array_ptr: *mut zval)>;
}
extern "C" {
    #[link_name = "\u{1}_php_register_variable"]
    pub fn php_register_variable(
        var: *mut ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_register_variable_safe"]
    pub fn php_register_variable_safe(
        var: *mut ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        val_len: usize,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_register_variable_ex"]
    pub fn php_register_variable_ex(
        var: *mut ::std::os::raw::c_char,
        val: *mut zval,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    #[link_name = "\u{1}_php_build_argv"]
    pub fn php_build_argv(s: *mut ::std::os::raw::c_char, track_vars_array: *mut zval);
}
extern "C" {
    #[link_name = "\u{1}_php_hash_environment"]
    pub fn php_hash_environment() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_embed_init"]
    pub fn php_embed_init(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_php_embed_shutdown"]
    pub fn php_embed_shutdown();
}
extern "C" {
    #[link_name = "\u{1}_php_embed_module"]
    pub static mut php_embed_module: sapi_module_struct;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
